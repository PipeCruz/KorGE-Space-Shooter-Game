{"version":3,"file":"korma-root-korma.js","sources":["kotlin/math.kt","text/StringBuilder.kt","arrayUtils.kt","generated/_Collections.kt","collections/Collections.kt","collections/Maps.kt","kotlin/Comparator.kt","../../../../../kds/src/commonMain/kotlin/com/soywiz/kds/FastMap.kt","text/Strings.kt","../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/math/Math.kt","../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/Korma.kt","../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/algo/AStar.kt","../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/Point.kt","../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/annotations/KormaExperimental.kt","../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/Anchor.kt","../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/Angle.kt","../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/BoundsBuilder.kt","../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/Matrix.kt","../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/Matrix3D.kt","util/Standard.kt","../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/Vector3D.kt","../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/MatrixExt.kt","../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/Orientation.kt","../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/PointArea.kt","../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/PointArrayList.kt","../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/QuaternionEuler.kt","../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/Rectangle.kt","../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/ScaleMode.kt","../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/Size.kt","../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/bezier/Bezier.kt","../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/bezier/SegmentEmitter.kt","comparisons/Comparisons.kt","../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/binpack/BinPacker.kt","collections/MutableCollections.kt","../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/binpack/MaxRects.kt","../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/ds/Array2Ext.kt","../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/range/OpenRange.kt","../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/shape/HorizontalLine.kt","../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/shape/Shape2d.kt","util/Lazy.kt","../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/vector/VectorPath.kt","../../../../../kds/src/commonMain/kotlin/com/soywiz/kds/iterators/_FastArrayIterators.kt","../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/triangle/Edge.kt","../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/triangle/Triangle.kt","util/Preconditions.kt","../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/vector/Edge.kt","../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/vector/LineCap.kt","../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/vector/LineJoin.kt","../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/vector/PolygonScanline.kt","../../../../../kds/src/jsMain/kotlin/com/soywiz/kds/Js.kt","../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/vector/StrokeToFill.kt","../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/vector/VectorBuilder.kt","../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/vector/Winding.kt","../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/internal/Internal.kt","../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/interpolation/Easing.kt","../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/interpolation/Interpolation.kt","../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/math/ArrayExt.kt","generated/_Arrays.kt","../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/random/RandomExt.kt","../../../../../kds/src/commonMain/kotlin/com/soywiz/kds/_Extensions.kt","../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/segment/IntSegmentSet.kt","../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/internal/KormaVersion.kt"],"sourcesContent":["/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n@file:Suppress(\"DEPRECATION\", \"DEPRECATION_ERROR\")\npackage kotlin.math\n\n\nimport kotlin.internal.InlineOnly\nimport kotlin.js.Math as nativeMath\n\n\n// region ================ Double Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sin(x: Double): Double = nativeMath.sin(x)\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cos(x: Double): Double = nativeMath.cos(x)\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tan(x: Double): Double = nativeMath.tan(x)\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asin(x: Double): Double = nativeMath.asin(x)\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acos(x: Double): Double = nativeMath.acos(x)\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan(x: Double): Double = nativeMath.atan(x)\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan2(y: Double, x: Double): Double = nativeMath.atan2(y, x)\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sinh(x: Double): Double = nativeMath.sinh(x)\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cosh(x: Double): Double = nativeMath.cosh(x)\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tanh(x: Double): Double = nativeMath.tanh(x)\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asinh(x: Double): Double = nativeMath.asinh(x)\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acosh(x: Double): Double = nativeMath.acosh(x)\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atanh(x: Double): Double = nativeMath.atanh(x)\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun hypot(x: Double, y: Double): Double = nativeMath.hypot(x, y)\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sqrt(x: Double): Double = nativeMath.sqrt(x)\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun exp(x: Double): Double = nativeMath.exp(x)\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun expm1(x: Double): Double = nativeMath.expm1(x)\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\npublic actual fun log(x: Double, base: Double): Double {\n    if (base <= 0.0 || base == 1.0) return Double.NaN\n    return nativeMath.log(x) / nativeMath.log(base)\n}\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln(x: Double): Double = nativeMath.log(x)\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log10(x: Double): Double = nativeMath.log10(x)\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log2(x: Double): Double = nativeMath.log2(x)\n\n/**\n * Computes `ln(x + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln1p(x: Double): Double = nativeMath.log1p(x)\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest double value that is greater than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ceil(x: Double): Double = nativeMath.ceil(x).unsafeCast<Double>() // TODO: Remove unsafe cast after removing public js.math\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest double value that is smaller than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun floor(x: Double): Double = nativeMath.floor(x).unsafeCast<Double>()\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun truncate(x: Double): Double = nativeMath.trunc(x)\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun round(x: Double): Double {\n    if (x % 0.5 != 0.0) {\n        return nativeMath.round(x).unsafeCast<Double>()\n    }\n    val floor = floor(x)\n    return if (floor % 2 == 0.0) floor else ceil(x)\n}\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Double]\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun abs(x: Double): Double = nativeMath.abs(x)\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sign(x: Double): Double = nativeMath.sign(x)\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Double, b: Double): Double = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Double, b: Double): Double = nativeMath.max(a, b)\n\n// extensions\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.pow(x: Double): Double = nativeMath.pow(this, x)\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.pow(n: Int): Double = nativeMath.pow(this, n.toDouble())\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Double.absoluteValue: Double get() = nativeMath.abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Double.sign: Double get() = nativeMath.sign(this)\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.withSign(sign: Int): Double = this.withSign(sign.toDouble())\n\n/**\n * Returns the ulp (unit in the last place) of this value.\n *\n * An ulp is a positive distance between this value and the next nearest [Double] value larger in magnitude.\n *\n * Special Cases:\n *   - `NaN.ulp` is `NaN`\n *   - `x.ulp` is `+Inf` when `x` is `+Inf` or `-Inf`\n *   - `0.0.ulp` is `Double.MIN_VALUE`\n */\n@SinceKotlin(\"1.2\")\npublic actual val Double.ulp: Double get() = when {\n    this < 0 -> (-this).ulp\n    this.isNaN() || this == Double.POSITIVE_INFINITY -> this\n    this == Double.MAX_VALUE -> this - this.nextDown()\n    else -> this.nextUp() - this\n}\n\n/**\n * Returns the [Double] value nearest to this value in direction of positive infinity.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextUp(): Double = when {\n    this.isNaN() || this == Double.POSITIVE_INFINITY -> this\n    this == 0.0 -> Double.MIN_VALUE\n    else -> Double.fromBits(this.toRawBits() + if (this > 0) 1 else -1)\n}\n\n/**\n * Returns the [Double] value nearest to this value in direction of negative infinity.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextDown(): Double = when {\n    this.isNaN() || this == Double.NEGATIVE_INFINITY -> this\n    this == 0.0 -> -Double.MIN_VALUE\n    else -> Double.fromBits(this.toRawBits() + if (this > 0) -1 else 1)\n}\n\n\n/**\n * Returns the [Double] value nearest to this value in direction from this value towards the value [to].\n *\n * Special cases:\n *   - `x.nextTowards(y)` is `NaN` if either `x` or `y` are `NaN`\n *   - `x.nextTowards(x) == x`\n *\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextTowards(to: Double): Double = when {\n    this.isNaN() || to.isNaN() -> Double.NaN\n    to == this -> to\n    to > this -> this.nextUp()\n    else /* to < this */ -> this.nextDown()\n}\n\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.roundToInt(): Int = when {\n    isNaN() -> throw IllegalArgumentException(\"Cannot round NaN value.\")\n    this > Int.MAX_VALUE -> Int.MAX_VALUE\n    this < Int.MIN_VALUE -> Int.MIN_VALUE\n    else -> nativeMath.round(this).unsafeCast<Double>().toInt()\n}\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.roundToLong(): Long = when {\n    isNaN() -> throw IllegalArgumentException(\"Cannot round NaN value.\")\n    this > Long.MAX_VALUE -> Long.MAX_VALUE\n    this < Long.MIN_VALUE -> Long.MIN_VALUE\n    else -> nativeMath.round(this).unsafeCast<Double>().toLong()\n}\n\n// endregion\n\n\n\n// region ================ Float Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sin(x: Float): Float = nativeMath.sin(x.toDouble()).toFloat()\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cos(x: Float): Float = nativeMath.cos(x.toDouble()).toFloat()\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tan(x: Float): Float = nativeMath.tan(x.toDouble()).toFloat()\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asin(x: Float): Float = nativeMath.asin(x.toDouble()).toFloat()\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acos(x: Float): Float = nativeMath.acos(x.toDouble()).toFloat()\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan(x: Float): Float = nativeMath.atan(x.toDouble()).toFloat()\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan2(y: Float, x: Float): Float = nativeMath.atan2(y.toDouble(), x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sinh(x: Float): Float = nativeMath.sinh(x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cosh(x: Float): Float = nativeMath.cosh(x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tanh(x: Float): Float = nativeMath.tanh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asinh(x: Float): Float = nativeMath.asinh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acosh(x: Float): Float = nativeMath.acosh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atanh(x: Float): Float = nativeMath.atanh(x.toDouble()).toFloat()\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun hypot(x: Float, y: Float): Float = nativeMath.hypot(x.toDouble(), y.toDouble()).toFloat()\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sqrt(x: Float): Float = nativeMath.sqrt(x.toDouble()).toFloat()\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun exp(x: Float): Float = nativeMath.exp(x.toDouble()).toFloat()\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun expm1(x: Float): Float = nativeMath.expm1(x.toDouble()).toFloat()\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log(x: Float, base: Float): Float = log(x.toDouble(), base.toDouble()).toFloat()\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln(x: Float): Float = nativeMath.log(x.toDouble()).toFloat()\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log10(x: Float): Float = nativeMath.log10(x.toDouble()).toFloat()\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log2(x: Float): Float = nativeMath.log2(x.toDouble()).toFloat()\n\n/**\n * Computes `ln(a + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln1p(x: Float): Float = nativeMath.log1p(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest Float value that is greater than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ceil(x: Float): Float = nativeMath.ceil(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest Float value that is smaller than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun floor(x: Float): Float = nativeMath.floor(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun truncate(x: Float): Float = truncate(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun round(x: Float): Float = round(x.toDouble()).toFloat()\n\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Float]\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun abs(x: Float): Float = nativeMath.abs(x.toDouble()).toFloat()\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sign(x: Float): Float = nativeMath.sign(x.toDouble()).toFloat()\n\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Float, b: Float): Float = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Float, b: Float): Float = nativeMath.max(a, b)\n\n// extensions\n\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.pow(x: Float): Float = nativeMath.pow(this.toDouble(), x.toDouble()).toFloat()\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.pow(n: Int): Float = nativeMath.pow(this.toDouble(), n.toDouble()).toFloat()\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Float.absoluteValue: Float get() = nativeMath.abs(this.toDouble()).toFloat()\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Float.sign: Float get() = nativeMath.sign(this.toDouble()).toFloat()\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n *\n * If [sign] is `NaN` the sign of the result is undefined.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.withSign(sign: Float): Float = this.toDouble().withSign(sign.toDouble()).toFloat()\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.withSign(sign: Int): Float = this.toDouble().withSign(sign.toDouble()).toFloat()\n\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.roundToInt(): Int = toDouble().roundToInt()\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.roundToLong(): Long = toDouble().roundToLong()\n\n\n// endregion\n\n// region ================ Integer Math ========================================\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Int.MIN_VALUE)` is `Int.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Int]\n */\n// TODO: remove manual 'or' when KT-19290 is fixed\n@SinceKotlin(\"1.2\")\npublic actual fun abs(n: Int): Int = if (n < 0) (-n or 0) else n\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Int, b: Int): Int = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Int, b: Int): Int = nativeMath.max(a, b)\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Int.MIN_VALUE.absoluteValue` is `Int.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Int.absoluteValue: Int get() = abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic actual val Int.sign: Int get() = when {\n    this < 0 -> -1\n    this > 0 -> 1\n    else -> 0\n}\n\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Long.MIN_VALUE)` is `Long.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Long]\n */\n@SinceKotlin(\"1.2\")\npublic actual fun abs(n: Long): Long = if (n < 0) -n else n\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun min(a: Long, b: Long): Long = if (a <= b) a else b\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun max(a: Long, b: Long): Long = if (a >= b) a else b\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Long.MIN_VALUE.absoluteValue` is `Long.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Long.absoluteValue: Long get() = abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic actual val Long.sign: Int get() = when {\n    this < 0 -> -1\n    this > 0 -> 1\n    else -> 0\n}\n\n\n// endregion\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\n/**\n * A mutable sequence of characters.\n *\n * String builder can be used to efficiently perform multiple string manipulation operations.\n */\nexpect class StringBuilder : Appendable, CharSequence {\n    /** Constructs an empty string builder. */\n    constructor()\n\n    /** Constructs an empty string builder with the specified initial [capacity]. */\n    constructor(capacity: Int)\n\n    /** Constructs a string builder that contains the same characters as the specified [content] char sequence. */\n    constructor(content: CharSequence)\n\n    /** Constructs a string builder that contains the same characters as the specified [content] string. */\n    @SinceKotlin(\"1.3\")\n//    @ExperimentalStdlibApi\n    constructor(content: String)\n\n    override val length: Int\n\n    override operator fun get(index: Int): Char\n\n    override fun subSequence(startIndex: Int, endIndex: Int): CharSequence\n\n    override fun append(value: Char): StringBuilder\n    override fun append(value: CharSequence?): StringBuilder\n    override fun append(value: CharSequence?, startIndex: Int, endIndex: Int): StringBuilder\n\n    /**\n     * Reverses the contents of this string builder and returns this instance.\n     *\n     * Surrogate pairs included in this string builder are treated as single characters.\n     * Therefore, the order of the high-low surrogates is never reversed.\n     *\n     * Note that the reverse operation may produce new surrogate pairs that were unpaired low-surrogates and high-surrogates before the operation.\n     * For example, reversing `\"\\uDC00\\uD800\"` produces `\"\\uD800\\uDC00\"` which is a valid surrogate pair.\n     */\n    fun reverse(): StringBuilder\n\n    /**\n     * Appends the string representation of the specified object [value] to this string builder and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was appended to this string builder.\n     */\n    fun append(value: Any?): StringBuilder\n\n    /**\n     * Appends the string representation of the specified boolean [value] to this string builder and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was appended to this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n//    @ExperimentalStdlibApi\n    fun append(value: Boolean): StringBuilder\n\n    /**\n     * Appends characters in the specified character array [value] to this string builder and returns this instance.\n     *\n     * Characters are appended in order, starting at the index 0.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun append(value: CharArray): StringBuilder\n\n    /**\n     * Appends the specified string [value] to this string builder and returns this instance.\n     */\n    @SinceKotlin(\"1.3\")\n//    @ExperimentalStdlibApi\n    fun append(value: String): StringBuilder\n\n    /**\n     * Returns the current capacity of this string builder.\n     *\n     * The capacity is the maximum length this string builder can have before an allocation occurs.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun capacity(): Int\n\n    /**\n     * Ensures that the capacity of this string builder is at least equal to the specified [minimumCapacity].\n     *\n     * If the current capacity is less than the [minimumCapacity], a new backing storage is allocated with greater capacity.\n     * Otherwise, this method takes no action and simply returns.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun ensureCapacity(minimumCapacity: Int)\n\n    /**\n     * Returns the index within this string builder of the first occurrence of the specified [string].\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun indexOf(string: String): Int\n\n    /**\n     * Returns the index within this string builder of the first occurrence of the specified [string],\n     * starting at the specified [startIndex].\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder starting at the specified [startIndex].\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun indexOf(string: String, startIndex: Int): Int\n\n    /**\n     * Returns the index within this string builder of the last occurrence of the specified [string].\n     * The last occurrence of empty string `\"\"` is considered to be at the index equal to `this.length`.\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun lastIndexOf(string: String): Int\n\n    /**\n     * Returns the index within this string builder of the last occurrence of the specified [string],\n     * starting from the specified [startIndex] toward the beginning.\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder starting at the specified [startIndex].\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun lastIndexOf(string: String, startIndex: Int): Int\n\n    /**\n     * Inserts the string representation of the specified boolean [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was inserted into this string builder at the specified [index].\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun insert(index: Int, value: Boolean): StringBuilder\n\n    /**\n     * Inserts the specified character [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun insert(index: Int, value: Char): StringBuilder\n\n    /**\n     * Inserts characters in the specified character array [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The inserted characters go in same order as in the [value] character array, starting at [index].\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun insert(index: Int, value: CharArray): StringBuilder\n\n    /**\n     * Inserts characters in the specified character sequence [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The inserted characters go in the same order as in the [value] character sequence, starting at [index].\n     *\n     * @param index the position in this string builder to insert at.\n     * @param value the character sequence from which characters are inserted. If [value] is `null`, then the four characters `\"null\"` are inserted.\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun insert(index: Int, value: CharSequence?): StringBuilder\n\n    /**\n     * Inserts the string representation of the specified object [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was inserted into this string builder at the specified [index].\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun insert(index: Int, value: Any?): StringBuilder\n\n    /**\n     * Inserts the string [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun insert(index: Int, value: String): StringBuilder\n\n    /**\n     *  Sets the length of this string builder to the specified [newLength].\n     *\n     *  If the [newLength] is less than the current length, it is changed to the specified [newLength].\n     *  Otherwise, null characters '\\u0000' are appended to this string builder until its length is less than the [newLength].\n     *\n     *  Note that in Kotlin/JS [set] operator function has non-constant execution time complexity.\n     *  Therefore, increasing length of this string builder and then updating each character by index may slow down your program.\n     *\n     *  @throws IndexOutOfBoundsException or [IllegalArgumentException] if [newLength] is less than zero.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun setLength(newLength: Int)\n\n    /**\n     * Returns a new [String] that contains characters in this string builder at [startIndex] (inclusive) and up to the [length] (exclusive).\n     *\n     * @throws IndexOutOfBoundsException if [startIndex] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun substring(startIndex: Int): String\n\n    /**\n     * Returns a new [String] that contains characters in this string builder at [startIndex] (inclusive) and up to the [endIndex] (exclusive).\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun substring(startIndex: Int, endIndex: Int): String\n\n    /**\n     * Attempts to reduce storage used for this string builder.\n     *\n     * If the backing storage of this string builder is larger than necessary to hold its current contents,\n     * then it may be resized to become more space efficient.\n     * Calling this method may, but is not required to, affect the value of the [capacity] property.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun trimToSize()\n}\n\n\n/**\n * Clears the content of this string builder making it empty and returns this instance.\n *\n * @sample samples.text.Strings.clearStringBuilder\n */\n@SinceKotlin(\"1.3\")\npublic expect fun StringBuilder.clear(): StringBuilder\n\n/**\n * Sets the character at the specified [index] to the specified [value].\n *\n * @throws IndexOutOfBoundsException if [index] is out of bounds of this string builder.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic expect operator fun StringBuilder.set(index: Int, value: Char)\n\n/**\n * Replaces characters in the specified range of this string builder with characters in the specified string [value] and returns this instance.\n *\n * @param startIndex the beginning (inclusive) of the range to replace.\n * @param endIndex the end (exclusive) of the range to replace.\n * @param value the string to replace with.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] if [startIndex] is less than zero, greater than the length of this string builder, or `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic expect fun StringBuilder.setRange(startIndex: Int, endIndex: Int, value: String): StringBuilder\n\n/**\n * Removes the character at the specified [index] from this string builder and returns this instance.\n *\n * If the `Char` at the specified [index] is part of a supplementary code point, this method does not remove the entire supplementary character.\n *\n * @param index the index of `Char` to remove.\n *\n * @throws IndexOutOfBoundsException if [index] is out of bounds of this string builder.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic expect fun StringBuilder.deleteAt(index: Int): StringBuilder\n\n/**\n * Removes characters in the specified range from this string builder and returns this instance.\n *\n * @param startIndex the beginning (inclusive) of the range to remove.\n * @param endIndex the end (exclusive) of the range to remove.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic expect fun StringBuilder.deleteRange(startIndex: Int, endIndex: Int): StringBuilder\n\n/**\n * Copies characters from this string builder into the [destination] character array.\n *\n * @param destination the array to copy to.\n * @param destinationOffset the position in the array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the range to copy, 0 by default.\n * @param endIndex the end (exclusive) of the range to copy, length of this string builder by default.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n *  or when that index is out of the [destination] array indices range.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic expect fun StringBuilder.toCharArray(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = this.length)\n\n/**\n * Appends characters in a subarray of the specified character array [value] to this string builder and returns this instance.\n *\n * Characters are appended in order, starting at specified [startIndex].\n *\n * @param value the array from which characters are appended.\n * @param startIndex the beginning (inclusive) of the subarray to append.\n * @param endIndex the end (exclusive) of the subarray to append.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] array indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic expect fun StringBuilder.appendRange(value: CharArray, startIndex: Int, endIndex: Int): StringBuilder\n\n/**\n * Appends a subsequence of the specified character sequence [value] to this string builder and returns this instance.\n *\n * @param value the character sequence from which a subsequence is appended. If [value] is `null`,\n *  then characters are appended as if [value] contained the four characters `\"null\"`.\n * @param startIndex the beginning (inclusive) of the subsequence to append.\n * @param endIndex the end (exclusive) of the subsequence to append.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic expect fun StringBuilder.appendRange(value: CharSequence?, startIndex: Int, endIndex: Int): StringBuilder\n\n/**\n * Inserts characters in a subarray of the specified character array [value] into this string builder at the specified [index] and returns this instance.\n *\n * The inserted characters go in same order as in the [value] array, starting at [index].\n *\n * @param index the position in this string builder to insert at.\n * @param value the array from which characters are inserted.\n * @param startIndex the beginning (inclusive) of the subarray to insert.\n * @param endIndex the end (exclusive) of the subarray to insert.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic expect fun StringBuilder.insertRange(index: Int, value: CharArray, startIndex: Int, endIndex: Int): StringBuilder\n\n/**\n * Inserts characters in a subsequence of the specified character sequence [value] into this string builder at the specified [index] and returns this instance.\n *\n * The inserted characters go in the same order as in the [value] character sequence, starting at [index].\n *\n * @param index the position in this string builder to insert at.\n * @param value the character sequence from which a subsequence is inserted. If [value] is `null`,\n *  then characters will be inserted as if [value] contained the four characters `\"null\"`.\n * @param startIndex the beginning (inclusive) of the subsequence to insert.\n * @param endIndex the end (exclusive) of the subsequence to insert.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic expect fun StringBuilder.insertRange(index: Int, value: CharSequence?, startIndex: Int, endIndex: Int): StringBuilder\n\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\")\n@Deprecated(\"Use append(value: Any?) instead\", ReplaceWith(\"append(value = obj)\"), DeprecationLevel.WARNING)\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.append(obj: Any?): StringBuilder = this.append(obj)\n\n/**\n * Builds new string by populating newly created [StringBuilder] using provided [builderAction]\n * and then converting it to [String].\n */\n@kotlin.internal.InlineOnly\npublic inline fun buildString(builderAction: StringBuilder.() -> Unit): String =\n    StringBuilder().apply(builderAction).toString()\n\n/**\n * Builds new string by populating newly created [StringBuilder] initialized with the given [capacity]\n * using provided [builderAction] and then converting it to [String].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun buildString(capacity: Int, builderAction: StringBuilder.() -> Unit): String =\n    StringBuilder(capacity).apply(builderAction).toString()\n\n/**\n * Appends all arguments to the given StringBuilder.\n */\npublic fun StringBuilder.append(vararg value: String?): StringBuilder {\n    for (item in value)\n        append(item)\n    return this\n}\n\n/**\n * Appends all arguments to the given StringBuilder.\n */\npublic fun StringBuilder.append(vararg value: Any?): StringBuilder {\n    for (item in value)\n        append(item)\n    return this\n}\n",null,"/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns 1st *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 1.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 2.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 3.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 4.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 5.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the collection.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.contains(element: T): Boolean {\n    if (this is Collection)\n        return contains(element)\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic fun <T> Iterable<T>.elementAt(index: Int): T {\n    if (this is List)\n        return get(index)\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"Collection doesn't contain element at index $index.\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAt(index: Int): T {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\npublic fun <T> Iterable<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    if (this is List)\n        return this.getOrElse(index, defaultValue)\n    if (index < 0)\n        return defaultValue(index)\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\npublic fun <T> Iterable<T>.elementAtOrNull(index: Int): T? {\n    if (this is List)\n        return this.getOrNull(index)\n    if (index < 0)\n        return null\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.first(): T {\n    when (this) {\n        is List -> return this.first()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.firstOrNull(): T? {\n    when (this) {\n        is List -> {\n            if (isEmpty())\n                return null\n            else\n                return this[0]\n        }\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns the first element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Iterable<T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n */\npublic fun <T> List<T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.indexOf(element: T): Int {\n    if (this is List) return this.indexOf(element)\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.indexOf(element: T): Int {\n    return indexOf(element)\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (predicate(iterator.previous())) {\n            return iterator.nextIndex()\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.last(): T {\n    when (this) {\n        is List -> return this.last()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.last(predicate: (T) -> Boolean): T {\n    var last: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return last as T\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> List<T>.last(predicate: (T) -> Boolean): T {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"List contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.lastIndexOf(element: T): Int {\n    if (this is List) return this.lastIndexOf(element)\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns last index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.lastIndexOf(element: T): Int {\n    return lastIndexOf(element)\n}\n\n/**\n * Returns the last element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.lastOrNull(): T? {\n    when (this) {\n        is List -> return if (isEmpty()) null else this[size - 1]\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> Iterable<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    var last: T? = null\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n        }\n    }\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> List<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this collection.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.random(): T {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this collection using the specified source of randomness.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Collection<T>.random(random: Random): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Collection is empty.\")\n    return elementAt(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this collection, or `null` if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.randomOrNull(): T? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this collection using the specified source of randomness, or `null` if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <T> Collection<T>.randomOrNull(random: Random): T? {\n    if (isEmpty())\n        return null\n    return elementAt(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.single(): T {\n    when (this) {\n        is List -> return this.single()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            val single = iterator.next()\n            if (iterator.hasNext())\n                throw IllegalArgumentException(\"Collection has more than one element.\")\n            return single\n        }\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"List is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"List has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Iterable<T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Collection contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns single element, or `null` if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.singleOrNull(): T? {\n    when (this) {\n        is List -> return if (size == 1) this[0] else null\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            val single = iterator.next()\n            if (iterator.hasNext())\n                return null\n            return single\n        }\n    }\n}\n\n/**\n * Returns single element, or `null` if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Iterable<T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Iterable<T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return toList()\n    val list: ArrayList<T>\n    if (this is Collection<*>) {\n        val resultSize = size - n\n        if (resultSize <= 0)\n            return emptyList()\n        if (resultSize == 1)\n            return listOf(last())\n        list = ArrayList<T>(resultSize)\n        if (this is List<T>) {\n            if (this is RandomAccess) {\n                for (index in n until size)\n                    list.add(this[index])\n            } else {\n                for (item in listIterator(n))\n                    list.add(item)\n            }\n            return list\n        }\n    }\n    else {\n        list = ArrayList<T>()\n    }\n    var count = 0\n    for (item in this) {\n        if (count >= n) list.add(item) else ++count\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> List<T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> List<T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            if (!predicate(iterator.previous())) {\n                return take(iterator.nextIndex() + 1)\n            }\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Iterable<T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T> Iterable<T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n */\npublic inline fun <reified R> Iterable<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Iterable<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n */\npublic fun <T : Any> Iterable<T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n */\npublic fun <C : MutableCollection<in T>, T : Any> Iterable<T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> List<T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return this.subList(indices.start, indices.endInclusive + 1).toList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> List<T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Iterable<T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (this is Collection<T>) {\n        if (n >= size) return toList()\n        if (n == 1) return listOf(first())\n    }\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> List<T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(last())\n    val list = ArrayList<T>(n)\n    if (this is RandomAccess) {\n        for (index in size - n until size)\n            list.add(this[index])\n    } else {\n        for (item in listIterator(size - n))\n            list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> List<T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (isEmpty())\n        return emptyList()\n    val iterator = listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (!predicate(iterator.previous())) {\n            iterator.next()\n            val expectedSize = size - iterator.nextIndex()\n            if (expectedSize == 0) return emptyList()\n            return ArrayList<T>(expectedSize).apply {\n                while (iterator.hasNext())\n                    add(iterator.next())\n            }\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Iterable<T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the list in-place.\n */\npublic expect fun <T> MutableList<T>.reverse(): Unit\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Iterable<T>.reversed(): List<T> {\n    if (this is Collection && size <= 1) return toList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Sorts elements in the list in-place according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> MutableList<T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sorted(): List<T> {\n    if (this is Collection) {\n        if (size <= 1) return this.toList()\n        @Suppress(\"UNCHECKED_CAST\")\n        return (toTypedArray<Comparable<T>>() as Array<T>).apply { sort() }.asList()\n    }\n    return toMutableList().apply { sort() }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Iterable<T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    if (this is Collection) {\n       if (size <= 1) return this.toList()\n       @Suppress(\"UNCHECKED_CAST\")\n       return (toTypedArray<Any?>() as Array<T>).apply { sortWith(comparator) }.asList()\n    }\n    return toMutableList().apply { sortWith(comparator) }\n}\n\n/**\n * Returns an array of Boolean containing all of the elements of this collection.\n */\npublic fun Collection<Boolean>.toBooleanArray(): BooleanArray {\n    val result = BooleanArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this collection.\n */\npublic fun Collection<Byte>.toByteArray(): ByteArray {\n    val result = ByteArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Char containing all of the elements of this collection.\n */\npublic fun Collection<Char>.toCharArray(): CharArray {\n    val result = CharArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Double containing all of the elements of this collection.\n */\npublic fun Collection<Double>.toDoubleArray(): DoubleArray {\n    val result = DoubleArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Float containing all of the elements of this collection.\n */\npublic fun Collection<Float>.toFloatArray(): FloatArray {\n    val result = FloatArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Int containing all of the elements of this collection.\n */\npublic fun Collection<Int>.toIntArray(): IntArray {\n    val result = IntArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Long containing all of the elements of this collection.\n */\npublic fun Collection<Long>.toLongArray(): LongArray {\n    val result = LongArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Short containing all of the elements of this collection.\n */\npublic fun Collection<Short>.toShortArray(): ShortArray {\n    val result = ShortArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associate\n */\npublic inline fun <T, K, V> Iterable<T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given collection indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateBy\n */\npublic inline fun <T, K> Iterable<T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateByWithValueTransform\n */\npublic inline fun <T, K, V> Iterable<T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given collection\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateByTo\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateByToWithValueTransform\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateTo\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are elements from the given collection and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V> Iterable<K>.associateWith(valueSelector: (K) -> V): Map<K, V> {\n    val result = LinkedHashMap<K, V>(mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given collection,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V, M : MutableMap<in K, in V>> Iterable<K>.associateWithTo(destination: M, valueSelector: (K) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Iterable<T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun <T> Iterable<T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(collectionSizeOrDefault(12))))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Iterable<T>.toList(): List<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyList()\n            1 -> listOf(if (this is List) get(0) else iterator().next())\n            else -> this.toMutableList()\n        }\n    }\n    return this.toMutableList().optimizeReadOnlyList()\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Iterable<T>.toMutableList(): MutableList<T> {\n    if (this is Collection<T>)\n        return this.toMutableList()\n    return toCollection(ArrayList<T>())\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Collection<T>.toMutableList(): MutableList<T> {\n    return ArrayList(this)\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toSet(): Set<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptySet()\n            1 -> setOf(if (this is List) this[0] else iterator().next())\n            else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n        }\n    }\n    return toCollection(LinkedHashSet<T>()).optimizeReadOnlySet()\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original collection.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <T, R> Iterable<T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original collection, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Iterable<T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Iterable<T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a collection to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Iterable<T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <T, R> Iterable<T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Iterable<T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(checkIndexOverflow(index++), item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original collection.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original collection\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original collection\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original collection\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun <T> Iterable<T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given collection.\n * \n * The elements in the resulting list are in the same order as they were in the source collection.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun <T> Iterable<T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given collection\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source collection.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <T, K> Iterable<T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this collection and the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun <T> Iterable<T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this collection and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic infix fun <T> Iterable<T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toMutableSet(): MutableSet<T> {\n    return when (this) {\n        is Collection<T> -> LinkedHashSet(this)\n        else -> toCollection(LinkedHashSet<T>())\n    }\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original collection.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun <T> Iterable<T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Iterable<T>.all(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if collection has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Iterable<T>.any(): Boolean {\n    if (this is Collection) return !isEmpty()\n    return iterator().hasNext()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Iterable<T>.any(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return false\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this collection.\n */\npublic fun <T> Iterable<T>.count(): Int {\n    if (this is Collection) return size\n    var count = 0\n    for (element in this) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Returns the number of elements in this collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.count(predicate: (T) -> Boolean): Int {\n    if (this is Collection && isEmpty()) return 0\n    var count = 0\n    for (element in this) if (predicate(element)) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <T, R> Iterable<T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Iterable<T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(checkIndexOverflow(index++), accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            accumulator = operation(iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            val index = iterator.previousIndex()\n            accumulator = operation(index, iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\n@kotlin.internal.HidesMembers\npublic inline fun <T> Iterable<T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun <T> Iterable<T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(checkIndexOverflow(index++), item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.max(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.max(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Iterable<T>.max(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxElem = iterator.next()\n    if (!iterator.hasNext()) return maxElem\n    var maxValue = selector(maxElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    } while (iterator.hasNext())\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Iterable<T>.maxWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.min(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.min(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Iterable<T>.min(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minElem = iterator.next()\n    if (!iterator.hasNext()) return minElem\n    var minValue = selector(minElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    } while (iterator.hasNext())\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Iterable<T>.minWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the collection has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Iterable<T>.none(): Boolean {\n    if (this is Collection) return isEmpty()\n    return !iterator().hasNext()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Iterable<T>.none(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each element and returns the collection itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, C : Iterable<T>> C.onEach(action: (T) -> Unit): C {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Iterable<T>.reduce(operation: (acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Iterable<T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the collection is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Iterable<T>.reduceOrNull(operation: (acc: S, T) -> S): S? {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return null\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> List<T>.reduceRight(operation: (T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> List<T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        val index = iterator.previousIndex()\n        accumulator = operation(index, iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the list is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> List<T>.reduceRightOrNull(operation: (T, acc: S) -> S): S? {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        return null\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <T, R> Iterable<T>.scan(initial: R, operation: (acc: R, T) -> R): List<R> {\n    val estimatedSize = collectionSizeOrDefault(9)\n    if (estimatedSize == 0) return listOf(initial)\n    val result = ArrayList<R>(estimatedSize + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original collection and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <T, R> Iterable<T>.scanIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    val estimatedSize = collectionSizeOrDefault(9)\n    if (estimatedSize == 0) return listOf(initial)\n    val result = ArrayList<R>(estimatedSize + 1).apply { add(initial) }\n    var index = 0\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(index++, accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this collection.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and the element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Iterable<T>.scanReduce(operation: (acc: S, T) -> S): List<S> {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return emptyList()\n    var accumulator: S = iterator.next()\n    val result = ArrayList<S>(collectionSizeOrDefault(10)).apply { add(accumulator) }\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original collection and current accumulator value that starts with the first element of this collection.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Iterable<T>.scanReduceIndexed(operation: (index: Int, acc: S, T) -> S): List<S> {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return emptyList()\n    var accumulator: S = iterator.next()\n    val result = ArrayList<S>(collectionSizeOrDefault(10)).apply { add(accumulator) }\n    var index = 1\n    while (iterator.hasNext()) {\n        accumulator = operation(index++, accumulator, iterator.next())\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Iterable<T?>.requireNoNulls(): Iterable<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Iterable<T>\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> List<T?>.requireNoNulls(): List<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as List<T>\n}\n\n/**\n * Splits this collection into a list of lists each not exceeding the given [size].\n * \n * The last list in the resulting list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.chunked(size: Int): List<List<T>> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this collection into several lists each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return list of results of the [transform] applied to an each list.\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.chunked(size: Int, transform: (List<T>) -> R): List<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\npublic operator fun <T> Iterable<T>.minus(element: T): List<T> {\n    val result = ArrayList<T>(collectionSizeOrDefault(10))\n    var removed = false\n    return this.filterTo(result) { if (!removed && it == element) { removed = true; false } else true }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] array.\n * \n * The [elements] array may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Array<out T>): List<T> {\n    if (elements.isEmpty()) return this.toList()\n    val other = elements.toHashSet()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] collection.\n * \n * The [elements] collection may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Iterable<T>): List<T> {\n    val other = elements.convertToSetForSetOperationWith(this)\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] sequence.\n * \n * The [elements] sequence may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Sequence<T>): List<T> {\n    val other = elements.toHashSet()\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minusElement(element: T): List<T> {\n    return minus(element)\n}\n\n/**\n * Splits the original collection into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun <T> Iterable<T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Iterable<T>.plus(element: T): List<T> {\n    if (this is Collection) return this.plus(element)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Collection<T>.plus(element: T): List<T> {\n    val result = ArrayList<T>(size + 1)\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Array<out T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Collection<T>.plus(elements: Array<out T>): List<T> {\n    val result = ArrayList<T>(this.size + elements.size)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Iterable<T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Collection<T>.plus(elements: Iterable<T>): List<T> {\n    if (elements is Collection) {\n        val result = ArrayList<T>(this.size + elements.size)\n        result.addAll(this)\n        result.addAll(elements)\n        return result\n    } else {\n        val result = ArrayList<T>(this)\n        result.addAll(elements)\n        return result\n    }\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Collection<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>(this.size + 10)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list of snapshots of the window of the given [size]\n * sliding along this collection with the given [step], where each\n * snapshot is a list.\n * \n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): List<List<T>> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val resultCapacity = thisSize / step + if (thisSize % step == 0) 0 else 1\n        val result = ArrayList<List<T>>(resultCapacity)\n        var index = 0\n        while (index in 0 until thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (windowSize < size && !partialWindows) break\n            result.add(List(windowSize) { this[it + index] })\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<List<T>>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = false).forEach {\n        result.add(it)\n    }\n    return result\n}\n\n/**\n * Returns a list of results of applying the given [transform] function to\n * an each list representing a view over the window of the given [size]\n * sliding along this collection with the given [step].\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (List<T>) -> R): List<R> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val resultCapacity = thisSize / step + if (thisSize % step == 0) 0 else 1\n        val result = ArrayList<R>(resultCapacity)\n        val window = MovingSubList(this)\n        var index = 0\n        while (index in 0 until thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (!partialWindows && windowSize < size) break\n            window.move(index, index + windowSize)\n            result.add(transform(window))\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<R>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = true).forEach {\n        result.add(transform(it))\n    }\n    return result\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = other.size\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in this) {\n        if (i >= arraySize) break\n        list.add(transform(element, other[i++]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] collection with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val first = iterator()\n    val second = other.iterator()\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), other.collectionSizeOrDefault(10)))\n    while (first.hasNext() && second.hasNext()) {\n        list.add(transform(first.next(), second.next()))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs of each two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.zipWithNext(): List<Pair<T, T>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to an each pair of two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic inline fun <T, R> Iterable<T>.zipWithNext(transform: (a: T, b: T) -> R): List<R> {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return emptyList()\n    val result = mutableListOf<R>()\n    var current = iterator.next()\n    while (iterator.hasNext()) {\n        val next = iterator.next()\n        result.add(transform(current, next))\n        current = next\n    }\n    return result\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Iterable<T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Iterable<T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Returns this collection as an [Iterable].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.asIterable(): Iterable<T> {\n    return this\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original collection returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromCollection\n */\npublic fun <T> Iterable<T>.asSequence(): Sequence<T> {\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Iterable<Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Iterable<Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Iterable<Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Iterable<Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Iterable<Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Iterable<Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Iterable<Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Iterable<Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Iterable<Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Iterable<Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Iterable<Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Iterable<Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n@file:UseExperimental(kotlin.experimental.ExperimentalTypeInference::class)\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\n\ninternal object EmptyIterator : ListIterator<Nothing> {\n    override fun hasNext(): Boolean = false\n    override fun hasPrevious(): Boolean = false\n    override fun nextIndex(): Int = 0\n    override fun previousIndex(): Int = -1\n    override fun next(): Nothing = throw NoSuchElementException()\n    override fun previous(): Nothing = throw NoSuchElementException()\n}\n\ninternal object EmptyList : List<Nothing>, Serializable, RandomAccess {\n    private const val serialVersionUID: Long = -7390468764508069838L\n\n    override fun equals(other: Any?): Boolean = other is List<*> && other.isEmpty()\n    override fun hashCode(): Int = 1\n    override fun toString(): String = \"[]\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n    override fun contains(element: Nothing): Boolean = false\n    override fun containsAll(elements: Collection<Nothing>): Boolean = elements.isEmpty()\n\n    override fun get(index: Int): Nothing = throw IndexOutOfBoundsException(\"Empty list doesn't contain element at index $index.\")\n    override fun indexOf(element: Nothing): Int = -1\n    override fun lastIndexOf(element: Nothing): Int = -1\n\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n    override fun listIterator(): ListIterator<Nothing> = EmptyIterator\n    override fun listIterator(index: Int): ListIterator<Nothing> {\n        if (index != 0) throw IndexOutOfBoundsException(\"Index: $index\")\n        return EmptyIterator\n    }\n\n    override fun subList(fromIndex: Int, toIndex: Int): List<Nothing> {\n        if (fromIndex == 0 && toIndex == 0) return this\n        throw IndexOutOfBoundsException(\"fromIndex: $fromIndex, toIndex: $toIndex\")\n    }\n\n    private fun readResolve(): Any = EmptyList\n}\n\ninternal fun <T> Array<out T>.asCollection(): Collection<T> = ArrayAsCollection(this, isVarargs = false)\n\nprivate class ArrayAsCollection<T>(val values: Array<out T>, val isVarargs: Boolean) : Collection<T> {\n    override val size: Int get() = values.size\n    override fun isEmpty(): Boolean = values.isEmpty()\n    override fun contains(element: T): Boolean = values.contains(element)\n    override fun containsAll(elements: Collection<T>): Boolean = elements.all { contains(it) }\n    override fun iterator(): Iterator<T> = values.iterator()\n    // override hidden toArray implementation to prevent copying of values array\n    public fun toArray(): Array<out Any?> = values.copyToArrayOfAny(isVarargs)\n}\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\npublic fun <T> emptyList(): List<T> = EmptyList\n\n/**\n * Returns a new read-only list of given elements.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.readOnlyList\n */\npublic fun <T> listOf(vararg elements: T): List<T> = if (elements.size > 0) elements.asList() else emptyList()\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> listOf(): List<T> = emptyList()\n\n/**\n * Returns an empty new [MutableList].\n * @sample samples.collections.Collections.Lists.emptyMutableList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> mutableListOf(): MutableList<T> = ArrayList()\n\n/**\n * Returns an empty new [ArrayList].\n * @sample samples.collections.Collections.Lists.emptyArrayList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> arrayListOf(): ArrayList<T> = ArrayList()\n\n/**\n * Returns a new [MutableList] with the given elements.\n * @sample samples.collections.Collections.Lists.mutableList\n */\npublic fun <T> mutableListOf(vararg elements: T): MutableList<T> =\n    if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new [ArrayList] with the given elements.\n * @sample samples.collections.Collections.Lists.arrayList\n */\npublic fun <T> arrayListOf(vararg elements: T): ArrayList<T> =\n    if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new read-only list either of single given element, if it is not null, or empty list if the element is null. The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(element: T?): List<T> = if (element != null) listOf(element) else emptyList()\n\n/**\n * Returns a new read-only list only of those given elements, that are not null.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(vararg elements: T?): List<T> = elements.filterNotNull()\n\n/**\n * Creates a new read-only list with the specified [size], where each element is calculated by calling the specified\n * [init] function.\n *\n * The function [init] is called for each list element sequentially starting from the first one.\n * It should return the value for a list element given its index.\n *\n * @sample samples.collections.Collections.Lists.readOnlyListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> List(size: Int, init: (index: Int) -> T): List<T> = MutableList(size, init)\n\n/**\n * Creates a new mutable list with the specified [size], where each element is calculated by calling the specified\n * [init] function.\n *\n * The function [init] is called for each list element sequentially starting from the first one.\n * It should return the value for a list element given its index.\n *\n * @sample samples.collections.Collections.Lists.mutableListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList(size: Int, init: (index: Int) -> T): MutableList<T> {\n    val list = ArrayList<T>(size)\n    repeat(size) { index -> list.add(init(index)) }\n    return list\n}\n\n/**\n * Builds a new read-only [List] by populating a [MutableList] using the given [builderAction]\n * and returning a read-only list with the same elements.\n *\n * The list passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * @sample samples.collections.Builders.Lists.buildListSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <E> buildList(@BuilderInference builderAction: MutableList<E>.() -> Unit): List<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return ArrayList<E>().apply(builderAction)\n}\n\n/**\n * Builds a new read-only [List] by populating a [MutableList] using the given [builderAction]\n * and returning a read-only list with the same elements.\n *\n * The list passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * [capacity] is used to hint the expected number of elements added in the [builderAction].\n *\n * @throws IllegalArgumentException if the given [capacity] is negative.\n *\n * @sample samples.collections.Builders.Lists.buildListSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <E> buildList(capacity: Int, @BuilderInference builderAction: MutableList<E>.() -> Unit): List<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    checkBuilderCapacity(capacity)\n    return ArrayList<E>(capacity).apply(builderAction)\n}\n\n\n/**\n * Returns an [IntRange] of the valid indices for this collection.\n * @sample samples.collections.Collections.Collections.indicesOfCollection\n */\npublic val Collection<*>.indices: IntRange\n    get() = 0..size - 1\n\n/**\n * Returns the index of the last item in the list or -1 if the list is empty.\n *\n * @sample samples.collections.Collections.Lists.lastIndexOfList\n */\npublic val <T> List<T>.lastIndex: Int\n    get() = this.size - 1\n\n/**\n * Returns `true` if the collection is not empty.\n * @sample samples.collections.Collections.Collections.collectionIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns `true` if this nullable collection is either null or empty.\n * @sample samples.collections.Collections.Collections.collectionIsNullOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || this.isEmpty()\n}\n\n/**\n * Returns this Collection if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Collections.collectionOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.orEmpty(): Collection<T> = this ?: emptyList()\n\n/**\n * Returns this List if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Lists.listOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>?.orEmpty(): List<T> = this ?: emptyList()\n\n/**\n * Returns this collection if it's not empty\n * or the result of calling [defaultValue] function if the collection is empty.\n *\n * @sample samples.collections.Collections.Collections.collectionIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifEmpty(defaultValue: () -> R): R where C : Collection<*>, C : R =\n    if (isEmpty()) defaultValue() else this\n\n\n/**\n * Checks if all elements in the specified collection are contained in this collection.\n *\n * Allows to overcome type-safety restriction of `containsAll` that requires to pass a collection of type `Collection<E>`.\n * @sample samples.collections.Collections.Collections.collectionContainsAll\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> Collection<T>.containsAll(elements: Collection<T>): Boolean = this.containsAll(elements)\n\ninternal fun <T> List<T>.optimizeReadOnlyList() = when (size) {\n    0 -> emptyList()\n    1 -> listOf(this[0])\n    else -> this\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of its elements,\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchOnComparable\n * @sample samples.collections.Collections.Lists.binarySearchWithBoundaries\n */\npublic fun <T : Comparable<T>> List<T?>.binarySearch(element: T?, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = compareValues(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the specified [comparator],\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted according to the specified [comparator].\n * @sample samples.collections.Collections.Lists.binarySearchWithComparator\n */\npublic fun <T> List<T>.binarySearch(element: T, comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparator.compare(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for an element having the key returned by the specified [selector] function\n * equal to the provided [key] value using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of keys of its elements.\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements with the specified [key], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element with the specified [key], if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchByKey\n */\npublic inline fun <T, K : Comparable<K>> List<T>.binarySearchBy(\n    key: K?,\n    fromIndex: Int = 0,\n    toIndex: Int = size,\n    crossinline selector: (T) -> K?\n): Int =\n    binarySearch(fromIndex, toIndex) { compareValues(selector(it), key) }\n\n// do not introduce this overload --- too rare\n//public fun <T, K> List<T>.binarySearchBy(key: K, comparator: Comparator<K>, fromIndex: Int = 0, toIndex: Int = size(), selector: (T) -> K): Int =\n//        binarySearch(fromIndex, toIndex) { comparator.compare(selector(it), key) }\n\n\n/**\n * Searches this list or its range for an element for which the given [comparison] function returns zero using the binary search algorithm.\n *\n * The list is expected to be sorted so that the signs of the [comparison] function's return values ascend on the list elements,\n * i.e. negative values come before zero and zeroes come before positive values.\n * Otherwise, the result is undefined.\n *\n * If the list contains multiple elements for which [comparison] returns zero, there is no guarantee which one will be found.\n *\n * @param comparison function that returns zero when called on the list element being searched.\n * On the elements coming before the target element, the function must return negative values;\n * on the elements coming after the target element, the function must return positive values.\n *\n * @return the index of the found element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchWithComparisonFunction\n */\npublic fun <T> List<T>.binarySearch(fromIndex: Int = 0, toIndex: Int = size, comparison: (T) -> Int): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparison(midVal)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Checks that `from` and `to` are in\n * the range of [0..size] and throws an appropriate exception, if they aren't.\n */\nprivate fun rangeCheck(size: Int, fromIndex: Int, toIndex: Int) {\n    when {\n        fromIndex > toIndex -> throw IllegalArgumentException(\"fromIndex ($fromIndex) is greater than toIndex ($toIndex).\")\n        fromIndex < 0 -> throw IndexOutOfBoundsException(\"fromIndex ($fromIndex) is less than zero.\")\n        toIndex > size -> throw IndexOutOfBoundsException(\"toIndex ($toIndex) is greater than size ($size).\")\n    }\n}\n\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal expect fun checkIndexOverflow(index: Int): Int\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal expect fun checkCountOverflow(count: Int): Int\n\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun throwIndexOverflow() { throw ArithmeticException(\"Index overflow has happened.\") }\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun throwCountOverflow() { throw ArithmeticException(\"Count overflow has happened.\") }\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"MapsKt\")\n@file:UseExperimental(kotlin.experimental.ExperimentalTypeInference::class)\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\n\nprivate object EmptyMap : Map<Any?, Nothing>, Serializable {\n    private const val serialVersionUID: Long = 8246714829545688274\n\n    override fun equals(other: Any?): Boolean = other is Map<*, *> && other.isEmpty()\n    override fun hashCode(): Int = 0\n    override fun toString(): String = \"{}\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n\n    override fun containsKey(key: Any?): Boolean = false\n    override fun containsValue(value: Nothing): Boolean = false\n    override fun get(key: Any?): Nothing? = null\n    override val entries: Set<Map.Entry<Any?, Nothing>> get() = EmptySet\n    override val keys: Set<Any?> get() = EmptySet\n    override val values: Collection<Nothing> get() = EmptyList\n\n    private fun readResolve(): Any = EmptyMap\n}\n\n/**\n * Returns an empty read-only map of specified type.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\npublic fun <K, V> emptyMap(): Map<K, V> = @Suppress(\"UNCHECKED_CAST\") (EmptyMap as Map<K, V>)\n\n/**\n * Returns a new read-only map with the specified contents, given as a list of pairs\n * where the first value is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * The returned map is serializable (JVM).\n *\n * @sample samples.collections.Maps.Instantiation.mapFromPairs\n */\npublic fun <K, V> mapOf(vararg pairs: Pair<K, V>): Map<K, V> =\n    if (pairs.size > 0) pairs.toMap(LinkedHashMap(mapCapacity(pairs.size))) else emptyMap()\n\n/**\n * Returns an empty read-only map.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mapOf(): Map<K, V> = emptyMap()\n\n/**\n * Returns an empty new [MutableMap].\n *\n * The returned map preserves the entry iteration order.\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mutableMapOf(): MutableMap<K, V> = LinkedHashMap()\n\n/**\n * Returns a new [MutableMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.mutableMapFromPairs\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\npublic fun <K, V> mutableMapOf(vararg pairs: Pair<K, V>): MutableMap<K, V> =\n    LinkedHashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [HashMap].\n *\n * @sample samples.collections.Maps.Instantiation.emptyHashMap\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> hashMapOf(): HashMap<K, V> = HashMap<K, V>()\n\n/**\n * Returns a new [HashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * @sample samples.collections.Maps.Instantiation.hashMapFromPairs\n */\npublic fun <K, V> hashMapOf(vararg pairs: Pair<K, V>): HashMap<K, V> = HashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [LinkedHashMap].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> linkedMapOf(): LinkedHashMap<K, V> = LinkedHashMap<K, V>()\n\n/**\n * Returns a new [LinkedHashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.linkedMapFromPairs\n */\npublic fun <K, V> linkedMapOf(vararg pairs: Pair<K, V>): LinkedHashMap<K, V> = pairs.toMap(LinkedHashMap(mapCapacity(pairs.size)))\n\n/**\n * Builds a new read-only [Map] by populating a [MutableMap] using the given [builderAction]\n * and returning a read-only map with the same key-value pairs.\n *\n * The map passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * Entries of the map are iterated in the order they were added by the [builderAction].\n *\n * @sample samples.collections.Builders.Maps.buildMapSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> buildMap(@BuilderInference builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return LinkedHashMap<K, V>().apply(builderAction)\n}\n\n/**\n * Builds a new read-only [Map] by populating a [MutableMap] using the given [builderAction]\n * and returning a read-only map with the same key-value pairs.\n *\n * The map passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * [capacity] is used to hint the expected number of pairs added in the [builderAction].\n *\n * Entries of the map are iterated in the order they were added by the [builderAction].\n *\n * @throws IllegalArgumentException if the given [capacity] is negative.\n *\n * @sample samples.collections.Builders.Maps.buildMapSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> buildMap(capacity: Int, @BuilderInference builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    checkBuilderCapacity(capacity)\n    return LinkedHashMap<K, V>(mapCapacity(capacity)).apply(builderAction)\n}\n\n/**\n * Calculate the initial capacity of a map.\n */\n@PublishedApi\ninternal expect fun mapCapacity(expectedSize: Int): Int\n\n/**\n * Checks a collection builder function capacity argument.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@PublishedApi\ninternal expect fun checkBuilderCapacity(capacity: Int)\n\n/** Returns `true` if this map is not empty. */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns `true` if this nullable map is either null or empty.\n * @sample samples.collections.Maps.Usage.mapIsNullOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || isEmpty()\n}\n\n/**\n * Returns the [Map] if its not `null`, or the empty [Map] otherwise.\n *\n * @sample samples.collections.Maps.Usage.mapOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>?.orEmpty(): Map<K, V> = this ?: emptyMap()\n\n/**\n * Returns this map if it's not empty\n * or the result of calling [defaultValue] function if the map is empty.\n *\n * @sample samples.collections.Maps.Usage.mapIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <M, R> M.ifEmpty(defaultValue: () -> R): R where M : Map<*, *>, M : R =\n    if (isEmpty()) defaultValue() else this\n\n/**\n * Checks if the map contains the given key.\n *\n * This method allows to use the `x in map` syntax for checking whether an object is contained in the map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.contains(key: K): Boolean = containsKey(key)\n\n/**\n * Returns the value corresponding to the given [key], or `null` if such a key is not present in the map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.get(key: K): V? =\n    @Suppress(\"UNCHECKED_CAST\") (this as Map<K, V>).get(key)\n\n/**\n * Allows to use the index operator for storing values in a mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.set(key: K, value: V): Unit {\n    put(key, value)\n}\n\n/**\n * Returns `true` if the map contains the specified [key].\n *\n * Allows to overcome type-safety restriction of `containsKey` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K> Map<out K, *>.containsKey(key: K): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as Map<K, *>).containsKey(key)\n\n/**\n * Returns `true` if the map maps one or more keys to the specified [value].\n *\n * Allows to overcome type-safety restriction of `containsValue` that requires to pass a value of type `V`.\n *\n * @sample samples.collections.Maps.Usage.containsValue\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <K, @kotlin.internal.OnlyInputTypes V> Map<K, V>.containsValue(value: V): Boolean = this.containsValue(value)\n\n\n/**\n * Removes the specified key and its corresponding value from this map.\n *\n * @return the previous value associated with the key, or `null` if the key was not present in the map.\n\n * Allows to overcome type-safety restriction of `remove` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K, V> MutableMap<out K, V>.remove(key: K): V? =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableMap<K, V>).remove(key)\n\n/**\n * Returns the key component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component1(): K = key\n\n/**\n * Returns the value component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component2(): V = value\n\n/**\n * Converts entry to [Pair] with key being first component and value being second.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map.Entry<K, V>.toPair(): Pair<K, V> = Pair(key, value)\n\n/**\n * Returns the value for the given key, or the result of the [defaultValue] function if there was no entry for the given key.\n *\n * @sample samples.collections.Maps.Usage.getOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>.getOrElse(key: K, defaultValue: () -> V): V = get(key) ?: defaultValue()\n\n\ninternal inline fun <K, V> Map<K, V>.getOrElseNullable(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    if (value == null && !containsKey(key)) {\n        return defaultValue()\n    } else {\n        @Suppress(\"UNCHECKED_CAST\")\n        return value as V\n    }\n}\n\n/**\n * Returns the value for the given [key] or throws an exception if there is no such key in the map.\n *\n * If the map was created by [withDefault], resorts to its `defaultValue` provider function\n * instead of throwing an exception.\n *\n * @throws NoSuchElementException when the map doesn't contain a value for the specified key and\n * no implicit default value was provided for that map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<K, V>.getValue(key: K): V = getOrImplicitDefault(key)\n\n/**\n * Returns the value for the given key. If the key is not found in the map, calls the [defaultValue] function,\n * puts its result into the map under the given key and returns it.\n *\n * Note that the operation is not guaranteed to be atomic if the map is being modified concurrently.\n *\n * @sample samples.collections.Maps.Usage.getOrPut\n */\npublic inline fun <K, V> MutableMap<K, V>.getOrPut(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    return if (value == null) {\n        val answer = defaultValue()\n        put(key, answer)\n        answer\n    } else {\n        value\n    }\n}\n\n/**\n * Returns an [Iterator] over the entries in the [Map].\n *\n * @sample samples.collections.Maps.Usage.forOverEntries\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map<out K, V>.iterator(): Iterator<Map.Entry<K, V>> = entries.iterator()\n\n/**\n * Returns a [MutableIterator] over the mutable entries in the [MutableMap].\n *\n */\n@kotlin.jvm.JvmName(\"mutableIterator\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.iterator(): MutableIterator<MutableMap.MutableEntry<K, V>> = entries.iterator()\n\n/**\n * Populates the given [destination] map with entries having the keys of this map and the values obtained\n * by applying the [transform] function to each entry in this [Map].\n */\npublic inline fun <K, V, R, M : MutableMap<in K, in R>> Map<out K, V>.mapValuesTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, { it.key }, transform)\n}\n\n/**\n * Populates the given [destination] map with entries having the keys obtained\n * by applying the [transform] function to each entry in this [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n */\npublic inline fun <K, V, R, M : MutableMap<in R, in V>> Map<out K, V>.mapKeysTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, transform, { it.value })\n}\n\n/**\n * Puts all the given [pairs] into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Array<out Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given collection into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Iterable<Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given sequence into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Sequence<Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Returns a new map with entries having the keys of this map and the values obtained by applying the [transform]\n * function to each entry in this [Map].\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapValues\n */\npublic inline fun <K, V, R> Map<out K, V>.mapValues(transform: (Map.Entry<K, V>) -> R): Map<K, R> {\n    return mapValuesTo(LinkedHashMap<K, R>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a new Map with entries having the keys obtained by applying the [transform] function to each entry in this\n * [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapKeys\n */\npublic inline fun <K, V, R> Map<out K, V>.mapKeys(transform: (Map.Entry<K, V>) -> R): Map<R, V> {\n    return mapKeysTo(LinkedHashMap<R, V>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a map containing all key-value pairs with keys matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterKeys\n */\npublic inline fun <K, V> Map<out K, V>.filterKeys(predicate: (K) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.key)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n/**\n * Returns a map containing all key-value pairs with values matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n *  @sample samples.collections.Maps.Filtering.filterValues\n */\npublic inline fun <K, V> Map<out K, V>.filterValues(predicate: (V) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.value)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n\n/**\n * Appends all entries matching the given [predicate] into the mutable map given as [destination] parameter.\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filter\n */\npublic inline fun <K, V> Map<out K, V>.filter(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Appends all entries not matching the given [predicate] into the given [destination].\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterNotTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterNotTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (!predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs not matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterNot\n */\npublic inline fun <K, V> Map<out K, V>.filterNot(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterNotTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Returns a new map containing all key-value pairs from the given collection of pairs.\n *\n * The returned map preserves the entry iteration order of the original collection.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Iterable<Pair<K, V>>.toMap(): Map<K, V> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyMap()\n            1 -> mapOf(if (this is List) this[0] else iterator().next())\n            else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n        }\n    }\n    return toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given collection of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Iterable<Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given array of pairs.\n *\n * The returned map preserves the entry iteration order of the original array.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Array<out Pair<K, V>>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> mapOf(this[0])\n    else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n}\n\n/**\n *  Populates and returns the [destination] mutable map with key-value pairs from the given array of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Array<out Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given sequence of pairs.\n *\n * The returned map preserves the entry iteration order of the original sequence.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Sequence<Pair<K, V>>.toMap(): Map<K, V> = toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given sequence of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Sequence<Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new read-only map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMap()\n    else -> toMutableMap()\n}\n\n/**\n * Returns a new mutable map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMutableMap(): MutableMap<K, V> = LinkedHashMap(this)\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Creates a new read-only map by replacing or adding an entry to this map from a given key-value [pair].\n *\n * The returned map preserves the entry iteration order of the original map.\n * The [pair] is iterated in the end if it has a unique key.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pair: Pair<K, V>): Map<K, V> =\n    if (this.isEmpty()) mapOf(pair) else LinkedHashMap(this).apply { put(pair.first, pair.second) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given collection of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] collection.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Iterable<Pair<K, V>>): Map<K, V> =\n    if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given array of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] array.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Array<out Pair<K, V>>): Map<K, V> =\n    if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given sequence of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] sequence.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Sequence<Pair<K, V>>): Map<K, V> =\n    LinkedHashMap(this).apply { putAll(pairs) }.optimizeReadOnlyMap()\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from another [map].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those entries of another [map] that are missing in this map are iterated in the end in the order of that [map].\n */\npublic operator fun <K, V> Map<out K, V>.plus(map: Map<out K, V>): Map<K, V> =\n    LinkedHashMap(this).apply { putAll(map) }\n\n\n/**\n * Appends or replaces the given [pair] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pair: Pair<K, V>) {\n    put(pair.first, pair.second)\n}\n\n/**\n * Appends or replaces all pairs from the given collection of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Iterable<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given array of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Array<out Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given sequence of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Sequence<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all entries from the given [map] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(map: Map<K, V>) {\n    putAll(map)\n}\n\n/**\n * Returns a map containing all entries of the original map except the entry with the given [key].\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(key: K): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(key) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] collection.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Iterable<K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] array.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Array<out K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] sequence.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Sequence<K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Removes the entry with the given [key] from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(key: K) {\n    remove(key)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] collection from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Iterable<K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] array from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Array<out K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries from the keys of which are contained in the given [keys] sequence from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Sequence<K>) {\n    this.keys.removeAll(keys)\n}\n\n\n// do not expose for now @PublishedApi\ninternal fun <K, V> Map<K, V>.optimizeReadOnlyMap() = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMapOrSelf()\n    else -> this\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\n\npublic actual interface Comparator<T> {\n    @JsName(\"compare\")\n    actual fun compare(a: T, b: T): Int\n}\n\npublic actual inline fun <T> Comparator(crossinline comparison: (a: T, b: T) -> Int): Comparator<T> = object : Comparator<T> {\n    override fun compare(a: T, b: T): Int = comparison(a, b)\n}\n",null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\nimport kotlin.contracts.contract\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trim(predicate: (Char) -> Boolean): CharSequence {\n    var startIndex = 0\n    var endIndex = length - 1\n    var startFound = false\n\n    while (startIndex <= endIndex) {\n        val index = if (!startFound) startIndex else endIndex\n        val match = predicate(this[index])\n\n        if (!startFound) {\n            if (!match)\n                startFound = true\n            else\n                startIndex += 1\n        } else {\n            if (!match)\n                break\n            else\n                endIndex -= 1\n        }\n    }\n\n    return subSequence(startIndex, endIndex + 1)\n}\n\n/**\n * Returns a string having leading and trailing characters matching the [predicate] removed.\n */\npublic inline fun String.trim(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trim(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trimStart(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices)\n        if (!predicate(this[index]))\n            return subSequence(index, length)\n\n    return \"\"\n}\n\n/**\n * Returns a string having leading characters matching the [predicate] removed.\n */\npublic inline fun String.trimStart(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trimStart(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having trailing characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trimEnd(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices.reversed())\n        if (!predicate(this[index]))\n            return subSequence(0, index + 1)\n\n    return \"\"\n}\n\n/**\n * Returns a string having trailing characters matching the [predicate] removed.\n */\npublic inline fun String.trimEnd(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trimEnd(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing characters from the [chars] array removed.\n */\npublic fun CharSequence.trim(vararg chars: Char): CharSequence = trim { it in chars }\n\n/**\n * Returns a string having leading and trailing characters from the [chars] array removed.\n */\npublic fun String.trim(vararg chars: Char): String = trim { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having leading characters from the [chars] array removed.\n */\npublic fun CharSequence.trimStart(vararg chars: Char): CharSequence = trimStart { it in chars }\n\n/**\n * Returns a string having leading characters from the [chars] array removed.\n */\npublic fun String.trimStart(vararg chars: Char): String = trimStart { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having trailing characters from the [chars] array removed.\n */\npublic fun CharSequence.trimEnd(vararg chars: Char): CharSequence = trimEnd { it in chars }\n\n/**\n * Returns a string having trailing characters from the [chars] array removed.\n */\npublic fun String.trimEnd(vararg chars: Char): String = trimEnd { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing whitespace removed.\n */\npublic fun CharSequence.trim(): CharSequence = trim(Char::isWhitespace)\n\n/**\n * Returns a string having leading and trailing whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trim(): String = (this as CharSequence).trim().toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading whitespace removed.\n */\npublic fun CharSequence.trimStart(): CharSequence = trimStart(Char::isWhitespace)\n\n/**\n * Returns a string having leading whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trimStart(): String = (this as CharSequence).trimStart().toString()\n\n/**\n * Returns a sub sequence of this char sequence having trailing whitespace removed.\n */\npublic fun CharSequence.trimEnd(): CharSequence = trimEnd(Char::isWhitespace)\n\n/**\n * Returns a string having trailing whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trimEnd(): String = (this as CharSequence).trimEnd().toString()\n\n/**\n * Returns a char sequence with content of this char sequence padded at the beginning\n * to the specified [length] with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a char sequence of length at least [length] consisting of `this` char sequence prepended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padStart\n */\npublic fun CharSequence.padStart(length: Int, padChar: Char = ' '): CharSequence {\n    if (length < 0)\n        throw IllegalArgumentException(\"Desired length $length is less than zero.\")\n    if (length <= this.length)\n        return this.subSequence(0, this.length)\n\n    val sb = StringBuilder(length)\n    for (i in 1..(length - this.length))\n        sb.append(padChar)\n    sb.append(this)\n    return sb\n}\n\n/**\n * Pads the string to the specified [length] at the beginning with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a string of length at least [length] consisting of `this` string prepended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padStart\n */\npublic fun String.padStart(length: Int, padChar: Char = ' '): String =\n    (this as CharSequence).padStart(length, padChar).toString()\n\n/**\n * Returns a char sequence with content of this char sequence padded at the end\n * to the specified [length] with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a char sequence of length at least [length] consisting of `this` char sequence appended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padEnd\n */\npublic fun CharSequence.padEnd(length: Int, padChar: Char = ' '): CharSequence {\n    if (length < 0)\n        throw IllegalArgumentException(\"Desired length $length is less than zero.\")\n    if (length <= this.length)\n        return this.subSequence(0, this.length)\n\n    val sb = StringBuilder(length)\n    sb.append(this)\n    for (i in 1..(length - this.length))\n        sb.append(padChar)\n    return sb\n}\n\n/**\n * Pads the string to the specified [length] at the end with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a string of length at least [length] consisting of `this` string appended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padEnd\n */\npublic fun String.padEnd(length: Int, padChar: Char = ' '): String =\n    (this as CharSequence).padEnd(length, padChar).toString()\n\n/**\n * Returns `true` if this nullable char sequence is either `null` or empty.\n *\n * @sample samples.text.Strings.stringIsNullOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || this.length == 0\n}\n\n/**\n * Returns `true` if this char sequence is empty (contains no characters).\n *\n * @sample samples.text.Strings.stringIsEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isEmpty(): Boolean = length == 0\n\n/**\n * Returns `true` if this char sequence is not empty.\n *\n * @sample samples.text.Strings.stringIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isNotEmpty(): Boolean = length > 0\n\n// implemented differently in JVM and JS\n//public fun String.isBlank(): Boolean = length() == 0 || all { it.isWhitespace() }\n\n\n/**\n * Returns `true` if this char sequence is not empty and contains some characters except of whitespace characters.\n *\n * @sample samples.text.Strings.stringIsNotBlank\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isNotBlank(): Boolean = !isBlank()\n\n/**\n * Returns `true` if this nullable char sequence is either `null` or empty or consists solely of whitespace characters.\n *\n * @sample samples.text.Strings.stringIsNullOrBlank\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence?.isNullOrBlank(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrBlank != null)\n    }\n\n    return this == null || this.isBlank()\n}\n\n/**\n * Iterator for characters of the given char sequence.\n */\npublic operator fun CharSequence.iterator(): CharIterator = object : CharIterator() {\n    private var index = 0\n\n    public override fun nextChar(): Char = get(index++)\n\n    public override fun hasNext(): Boolean = index < length\n}\n\n/** Returns the string if it is not `null`, or the empty string otherwise. */\n@kotlin.internal.InlineOnly\npublic inline fun String?.orEmpty(): String = this ?: \"\"\n\n/**\n * Returns this char sequence if it's not empty\n * or the result of calling [defaultValue] function if the char sequence is empty.\n *\n * @sample samples.text.Strings.stringIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifEmpty(defaultValue: () -> R): R where C : CharSequence, C : R =\n    if (isEmpty()) defaultValue() else this\n\n/**\n * Returns this char sequence if it is not empty and doesn't consist solely of whitespace characters,\n * or the result of calling [defaultValue] function otherwise.\n *\n * @sample samples.text.Strings.stringIfBlank\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifBlank(defaultValue: () -> R): R where C : CharSequence, C : R =\n    if (isBlank()) defaultValue() else this\n\n/**\n * Returns the range of valid character indices for this char sequence.\n */\npublic val CharSequence.indices: IntRange\n    get() = 0..length - 1\n\n/**\n * Returns the index of the last character in the char sequence or -1 if it is empty.\n */\npublic val CharSequence.lastIndex: Int\n    get() = this.length - 1\n\n/**\n * Returns `true` if this CharSequence has Unicode surrogate pair at the specified [index].\n */\npublic fun CharSequence.hasSurrogatePairAt(index: Int): Boolean {\n    return index in 0..length - 2\n            && this[index].isHighSurrogate()\n            && this[index + 1].isLowSurrogate()\n}\n\n/**\n * Returns a substring specified by the given [range] of indices.\n */\npublic fun String.substring(range: IntRange): String = substring(range.start, range.endInclusive + 1)\n\n/**\n * Returns a subsequence of this char sequence specified by the given [range] of indices.\n */\npublic fun CharSequence.subSequence(range: IntRange): CharSequence = subSequence(range.start, range.endInclusive + 1)\n\n/**\n * Returns a subsequence of this char sequence.\n *\n * This extension is chosen only for invocation with old-named parameters.\n * Replace parameter names with the same as those of [CharSequence.subSequence].\n */\n@kotlin.internal.InlineOnly\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning\n@Deprecated(\"Use parameters named startIndex and endIndex.\", ReplaceWith(\"subSequence(startIndex = start, endIndex = end)\"))\npublic inline fun String.subSequence(start: Int, end: Int): CharSequence = subSequence(start, end)\n\n/**\n * Returns a substring of chars from a range of this char sequence starting at the [startIndex] and ending right before the [endIndex].\n *\n * @param startIndex the start index (inclusive).\n * @param endIndex the end index (exclusive). If not specified, the length of the char sequence is used.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.substring(startIndex: Int, endIndex: Int = length): String = subSequence(startIndex, endIndex).toString()\n\n/**\n * Returns a substring of chars at indices from the specified [range] of this char sequence.\n */\npublic fun CharSequence.substring(range: IntRange): String = subSequence(range.start, range.endInclusive + 1).toString()\n\n/**\n * Returns a substring before the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBefore(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring before the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBefore(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring after the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfter(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + 1, length)\n}\n\n/**\n * Returns a substring after the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfter(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + delimiter.length, length)\n}\n\n/**\n * Returns a substring before the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBeforeLast(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring before the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBeforeLast(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring after the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfterLast(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + 1, length)\n}\n\n/**\n * Returns a substring after the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfterLast(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + delimiter.length, length)\n}\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given range\n * is replaced with the [replacement] char sequence.\n * @param startIndex the index of the first character to be replaced.\n * @param endIndex the index of the first character after the replacement to keep in the string.\n */\n@UseExperimental(ExperimentalStdlibApi::class)\npublic fun CharSequence.replaceRange(startIndex: Int, endIndex: Int, replacement: CharSequence): CharSequence {\n    if (endIndex < startIndex)\n        throw IndexOutOfBoundsException(\"End index ($endIndex) is less than start index ($startIndex).\")\n    val sb = StringBuilder()\n    sb.appendRange(this, 0, startIndex)\n    sb.append(replacement)\n    sb.appendRange(this, endIndex, length)\n    return sb\n}\n\n/**\n * Replaces the part of the string at the given range with the [replacement] char sequence.\n * @param startIndex the index of the first character to be replaced.\n * @param endIndex the index of the first character after the replacement to keep in the string.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceRange(startIndex: Int, endIndex: Int, replacement: CharSequence): String =\n    (this as CharSequence).replaceRange(startIndex, endIndex, replacement).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given [range]\n * is replaced with the [replacement] char sequence.\n *\n * The end index of the [range] is included in the part to be replaced.\n */\npublic fun CharSequence.replaceRange(range: IntRange, replacement: CharSequence): CharSequence =\n    replaceRange(range.start, range.endInclusive + 1, replacement)\n\n/**\n * Replace the part of string at the given [range] with the [replacement] string.\n *\n * The end index of the [range] is included in the part to be replaced.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceRange(range: IntRange, replacement: CharSequence): String =\n    (this as CharSequence).replaceRange(range, replacement).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given range is removed.\n *\n * @param startIndex the index of the first character to be removed.\n * @param endIndex the index of the first character after the removed part to keep in the string.\n *\n * [endIndex] is not included in the removed part.\n */\n@UseExperimental(ExperimentalStdlibApi::class)\npublic fun CharSequence.removeRange(startIndex: Int, endIndex: Int): CharSequence {\n    if (endIndex < startIndex)\n        throw IndexOutOfBoundsException(\"End index ($endIndex) is less than start index ($startIndex).\")\n\n    if (endIndex == startIndex)\n        return this.subSequence(0, length)\n\n    val sb = StringBuilder(length - (endIndex - startIndex))\n    sb.appendRange(this, 0, startIndex)\n    sb.appendRange(this, endIndex, length)\n    return sb\n}\n\n/**\n * Removes the part of a string at a given range.\n * @param startIndex the index of the first character to be removed.\n * @param endIndex the index of the first character after the removed part to keep in the string.\n *\n *  [endIndex] is not included in the removed part.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.removeRange(startIndex: Int, endIndex: Int): String =\n    (this as CharSequence).removeRange(startIndex, endIndex).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given [range] is removed.\n *\n * The end index of the [range] is included in the removed part.\n */\npublic fun CharSequence.removeRange(range: IntRange): CharSequence = removeRange(range.start, range.endInclusive + 1)\n\n/**\n * Removes the part of a string at the given [range].\n *\n * The end index of the [range] is included in the removed part.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.removeRange(range: IntRange): String =\n    (this as CharSequence).removeRange(range).toString()\n\n/**\n * If this char sequence starts with the given [prefix], returns a new char sequence\n * with the prefix removed. Otherwise, returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removePrefix(prefix: CharSequence): CharSequence {\n    if (startsWith(prefix)) {\n        return subSequence(prefix.length, length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * If this string starts with the given [prefix], returns a copy of this string\n * with the prefix removed. Otherwise, returns this string.\n */\npublic fun String.removePrefix(prefix: CharSequence): String {\n    if (startsWith(prefix)) {\n        return substring(prefix.length)\n    }\n    return this\n}\n\n/**\n * If this char sequence ends with the given [suffix], returns a new char sequence\n * with the suffix removed. Otherwise, returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSuffix(suffix: CharSequence): CharSequence {\n    if (endsWith(suffix)) {\n        return subSequence(0, length - suffix.length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * If this string ends with the given [suffix], returns a copy of this string\n * with the suffix removed. Otherwise, returns this string.\n */\npublic fun String.removeSuffix(suffix: CharSequence): String {\n    if (endsWith(suffix)) {\n        return substring(0, length - suffix.length)\n    }\n    return this\n}\n\n/**\n * When this char sequence starts with the given [prefix] and ends with the given [suffix],\n * returns a new char sequence having both the given [prefix] and [suffix] removed.\n * Otherwise returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSurrounding(prefix: CharSequence, suffix: CharSequence): CharSequence {\n    if ((length >= prefix.length + suffix.length) && startsWith(prefix) && endsWith(suffix)) {\n        return subSequence(prefix.length, length - suffix.length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * Removes from a string both the given [prefix] and [suffix] if and only if\n * it starts with the [prefix] and ends with the [suffix].\n * Otherwise returns this string unchanged.\n */\npublic fun String.removeSurrounding(prefix: CharSequence, suffix: CharSequence): String {\n    if ((length >= prefix.length + suffix.length) && startsWith(prefix) && endsWith(suffix)) {\n        return substring(prefix.length, length - suffix.length)\n    }\n    return this\n}\n\n/**\n * When this char sequence starts with and ends with the given [delimiter],\n * returns a new char sequence having this [delimiter] removed both from the start and end.\n * Otherwise returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSurrounding(delimiter: CharSequence): CharSequence = removeSurrounding(delimiter, delimiter)\n\n/**\n * Removes the given [delimiter] string from both the start and the end of this string\n * if and only if it starts with and ends with the [delimiter].\n * Otherwise returns this string unchanged.\n */\npublic fun String.removeSurrounding(delimiter: CharSequence): String = removeSurrounding(delimiter, delimiter)\n\n/**\n * Replace part of string before the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBefore(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string before the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBefore(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string after the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfter(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + 1, length, replacement)\n}\n\n/**\n * Replace part of string after the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfter(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + delimiter.length, length, replacement)\n}\n\n/**\n * Replace part of string after the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfterLast(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + delimiter.length, length, replacement)\n}\n\n/**\n * Replace part of string after the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfterLast(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + 1, length, replacement)\n}\n\n/**\n * Replace part of string before the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBeforeLast(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string before the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBeforeLast(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n\n// public fun String.replace(oldChar: Char, newChar: Char, ignoreCase: Boolean): String // JVM- and JS-specific\n// public fun String.replace(oldValue: String, newValue: String, ignoreCase: Boolean): String // JVM- and JS-specific\n\n/**\n * Returns a new string obtained by replacing each substring of this char sequence that matches the given regular expression\n * with the given [replacement].\n *\n * The [replacement] can consist of any combination of literal text and $-substitutions. To treat the replacement string\n * literally escape it with the [kotlin.text.Regex.Companion.escapeReplacement] method.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replace(regex: Regex, replacement: String): String = regex.replace(this, replacement)\n\n/**\n * Returns a new string obtained by replacing each substring of this char sequence that matches the given regular expression\n * with the result of the given function [transform] that takes [MatchResult] and returns a string to be used as a\n * replacement for that match.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replace(regex: Regex, noinline transform: (MatchResult) -> CharSequence): String =\n    regex.replace(this, transform)\n\n/**\n * Replaces the first occurrence of the given regular expression [regex] in this char sequence with specified [replacement] expression.\n *\n * @param replacement A replacement expression that can include substitutions. See [Regex.replaceFirst] for details.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replaceFirst(regex: Regex, replacement: String): String = regex.replaceFirst(this, replacement)\n\n\n/**\n * Returns `true` if this char sequence matches the given regular expression.\n */\n@kotlin.internal.InlineOnly\npublic inline infix fun CharSequence.matches(regex: Regex): Boolean = regex.matches(this)\n\n/**\n * Implementation of [regionMatches] for CharSequences.\n * Invoked when it's already known that arguments are not Strings, so that no additional type checks are performed.\n */\ninternal fun CharSequence.regionMatchesImpl(thisOffset: Int, other: CharSequence, otherOffset: Int, length: Int, ignoreCase: Boolean): Boolean {\n    if ((otherOffset < 0) || (thisOffset < 0) || (thisOffset > this.length - length) || (otherOffset > other.length - length)) {\n        return false\n    }\n\n    for (index in 0 until length) {\n        if (!this[thisOffset + index].equals(other[otherOffset + index], ignoreCase))\n            return false\n    }\n    return true\n}\n\n/**\n * Returns `true` if this char sequence starts with the specified character.\n */\npublic fun CharSequence.startsWith(char: Char, ignoreCase: Boolean = false): Boolean =\n    this.length > 0 && this[0].equals(char, ignoreCase)\n\n/**\n * Returns `true` if this char sequence ends with the specified character.\n */\npublic fun CharSequence.endsWith(char: Char, ignoreCase: Boolean = false): Boolean =\n    this.length > 0 && this[lastIndex].equals(char, ignoreCase)\n\n/**\n * Returns `true` if this char sequence starts with the specified prefix.\n */\npublic fun CharSequence.startsWith(prefix: CharSequence, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && prefix is String)\n        return this.startsWith(prefix)\n    else\n        return regionMatchesImpl(0, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if a substring of this char sequence starting at the specified offset [startIndex] starts with the specified prefix.\n */\npublic fun CharSequence.startsWith(prefix: CharSequence, startIndex: Int, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && prefix is String)\n        return this.startsWith(prefix, startIndex)\n    else\n        return regionMatchesImpl(startIndex, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if this char sequence ends with the specified suffix.\n */\npublic fun CharSequence.endsWith(suffix: CharSequence, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && suffix is String)\n        return this.endsWith(suffix)\n    else\n        return regionMatchesImpl(length - suffix.length, suffix, 0, suffix.length, ignoreCase)\n}\n\n\n// common prefix and suffix\n\n/**\n * Returns the longest string `prefix` such that this char sequence and [other] char sequence both start with this prefix,\n * taking care not to split surrogate pairs.\n * If this and [other] have no common prefix, returns the empty string.\n\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @sample samples.text.Strings.commonPrefixWith\n */\npublic fun CharSequence.commonPrefixWith(other: CharSequence, ignoreCase: Boolean = false): String {\n    val shortestLength = minOf(this.length, other.length)\n\n    var i = 0\n    while (i < shortestLength && this[i].equals(other[i], ignoreCase = ignoreCase)) {\n        i++\n    }\n    if (this.hasSurrogatePairAt(i - 1) || other.hasSurrogatePairAt(i - 1)) {\n        i--\n    }\n    return subSequence(0, i).toString()\n}\n\n/**\n * Returns the longest string `suffix` such that this char sequence and [other] char sequence both end with this suffix,\n * taking care not to split surrogate pairs.\n * If this and [other] have no common suffix, returns the empty string.\n\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @sample samples.text.Strings.commonSuffixWith\n */\npublic fun CharSequence.commonSuffixWith(other: CharSequence, ignoreCase: Boolean = false): String {\n    val thisLength = this.length\n    val otherLength = other.length\n    val shortestLength = minOf(thisLength, otherLength)\n\n    var i = 0\n    while (i < shortestLength && this[thisLength - i - 1].equals(other[otherLength - i - 1], ignoreCase = ignoreCase)) {\n        i++\n    }\n    if (this.hasSurrogatePairAt(thisLength - i - 1) || other.hasSurrogatePairAt(otherLength - i - 1)) {\n        i--\n    }\n    return subSequence(thisLength - i, thisLength).toString()\n}\n\n\n// indexOfAny()\n\n/**\n * Finds the index of the first occurrence of any of the specified [chars] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the first occurrence of matched character from [chars] or -1 if none of [chars] are found.\n *\n */\npublic fun CharSequence.indexOfAny(chars: CharArray, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    if (!ignoreCase && chars.size == 1 && this is String) {\n        val char = chars.single()\n        return nativeIndexOf(char, startIndex)\n    }\n\n    for (index in startIndex.coerceAtLeast(0)..lastIndex) {\n        val charAtIndex = get(index)\n        if (chars.any { it.equals(charAtIndex, ignoreCase) })\n            return index\n    }\n    return -1\n}\n\n/**\n * Finds the index of the last occurrence of any of the specified [chars] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the last occurrence of matched character from [chars] or -1 if none of [chars] are found.\n *\n */\npublic fun CharSequence.lastIndexOfAny(chars: CharArray, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    if (!ignoreCase && chars.size == 1 && this is String) {\n        val char = chars.single()\n        return nativeLastIndexOf(char, startIndex)\n    }\n\n\n    for (index in startIndex.coerceAtMost(lastIndex) downTo 0) {\n        val charAtIndex = get(index)\n        if (chars.any { it.equals(charAtIndex, ignoreCase) })\n            return index\n    }\n\n    return -1\n}\n\n\nprivate fun CharSequence.indexOf(other: CharSequence, startIndex: Int, endIndex: Int, ignoreCase: Boolean, last: Boolean = false): Int {\n    val indices = if (!last)\n        startIndex.coerceAtLeast(0)..endIndex.coerceAtMost(length)\n    else\n        startIndex.coerceAtMost(lastIndex) downTo endIndex.coerceAtLeast(0)\n\n    if (this is String && other is String) { // smart cast\n        for (index in indices) {\n            if (other.regionMatches(0, this, index, other.length, ignoreCase))\n                return index\n        }\n    } else {\n        for (index in indices) {\n            if (other.regionMatchesImpl(0, this, index, other.length, ignoreCase))\n                return index\n        }\n    }\n    return -1\n}\n\nprivate fun CharSequence.findAnyOf(strings: Collection<String>, startIndex: Int, ignoreCase: Boolean, last: Boolean): Pair<Int, String>? {\n    if (!ignoreCase && strings.size == 1) {\n        val string = strings.single()\n        val index = if (!last) indexOf(string, startIndex) else lastIndexOf(string, startIndex)\n        return if (index < 0) null else index to string\n    }\n\n    val indices = if (!last) startIndex.coerceAtLeast(0)..length else startIndex.coerceAtMost(lastIndex) downTo 0\n\n    if (this is String) {\n        for (index in indices) {\n            val matchingString = strings.firstOrNull { it.regionMatches(0, this, index, it.length, ignoreCase) }\n            if (matchingString != null)\n                return index to matchingString\n        }\n    } else {\n        for (index in indices) {\n            val matchingString = strings.firstOrNull { it.regionMatchesImpl(0, this, index, it.length, ignoreCase) }\n            if (matchingString != null)\n                return index to matchingString\n        }\n    }\n\n    return null\n}\n\n/**\n * Finds the first occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return A pair of an index of the first occurrence of matched string from [strings] and the string matched\n * or `null` if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.findAnyOf(strings: Collection<String>, startIndex: Int = 0, ignoreCase: Boolean = false): Pair<Int, String>? =\n    findAnyOf(strings, startIndex, ignoreCase, last = false)\n\n/**\n * Finds the last occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return A pair of an index of the last occurrence of matched string from [strings] and the string matched or `null` if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the end toward the beginning of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.findLastAnyOf(strings: Collection<String>, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Pair<Int, String>? =\n    findAnyOf(strings, startIndex, ignoreCase, last = true)\n\n/**\n * Finds the index of the first occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the first occurrence of matched string from [strings] or -1 if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.indexOfAny(strings: Collection<String>, startIndex: Int = 0, ignoreCase: Boolean = false): Int =\n    findAnyOf(strings, startIndex, ignoreCase, last = false)?.first ?: -1\n\n/**\n * Finds the index of the last occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the last occurrence of matched string from [strings] or -1 if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the end toward the beginning of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.lastIndexOfAny(strings: Collection<String>, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int =\n    findAnyOf(strings, startIndex, ignoreCase, last = true)?.first ?: -1\n\n\n// indexOf\n\n/**\n * Returns the index within this string of the first occurrence of the specified character, starting from the specified [startIndex].\n *\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the first occurrence of [char] or -1 if none is found.\n */\npublic fun CharSequence.indexOf(char: Char, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOfAny(charArrayOf(char), startIndex, ignoreCase)\n    else\n        nativeIndexOf(char, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the first occurrence of the specified [string],\n * starting from the specified [startIndex].\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the first occurrence of [string] or `-1` if none is found.\n * @sample samples.text.Strings.indexOf\n */\npublic fun CharSequence.indexOf(string: String, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOf(string, startIndex, length, ignoreCase)\n    else\n        nativeIndexOf(string, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the last occurrence of the specified character,\n * starting from the specified [startIndex].\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the last occurrence of [char] or -1 if none is found.\n */\npublic fun CharSequence.lastIndexOf(char: Char, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        lastIndexOfAny(charArrayOf(char), startIndex, ignoreCase)\n    else\n        nativeLastIndexOf(char, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the last occurrence of the specified [string],\n * starting from the specified [startIndex].\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the last occurrence of [string] or -1 if none is found.\n */\npublic fun CharSequence.lastIndexOf(string: String, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOf(string, startIndex, 0, ignoreCase, last = true)\n    else\n        nativeLastIndexOf(string, startIndex)\n}\n\n/**\n * Returns `true` if this char sequence contains the specified [other] sequence of characters as a substring.\n *\n * @param ignoreCase `true` to ignore character case when comparing strings. By default `false`.\n */\n@Suppress(\"INAPPLICABLE_OPERATOR_MODIFIER\")\npublic operator fun CharSequence.contains(other: CharSequence, ignoreCase: Boolean = false): Boolean =\n    if (other is String)\n        indexOf(other, ignoreCase = ignoreCase) >= 0\n    else\n        indexOf(other, 0, length, ignoreCase) >= 0\n\n\n\n/**\n * Returns `true` if this char sequence contains the specified character [char].\n *\n * @param ignoreCase `true` to ignore character case when comparing characters. By default `false`.\n */\n@Suppress(\"INAPPLICABLE_OPERATOR_MODIFIER\")\npublic operator fun CharSequence.contains(char: Char, ignoreCase: Boolean = false): Boolean =\n    indexOf(char, ignoreCase = ignoreCase) >= 0\n\n/**\n * Returns `true` if this char sequence contains at least one match of the specified regular expression [regex].\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharSequence.contains(regex: Regex): Boolean = regex.containsMatchIn(this)\n\n\n// rangesDelimitedBy\n\n\nprivate class DelimitedRangesSequence(\n    private val input: CharSequence,\n    private val startIndex: Int,\n    private val limit: Int,\n    private val getNextMatch: CharSequence.(currentIndex: Int) -> Pair<Int, Int>?\n) : Sequence<IntRange> {\n\n    override fun iterator(): Iterator<IntRange> = object : Iterator<IntRange> {\n        var nextState: Int = -1 // -1 for unknown, 0 for done, 1 for continue\n        var currentStartIndex: Int = startIndex.coerceIn(0, input.length)\n        var nextSearchIndex: Int = currentStartIndex\n        var nextItem: IntRange? = null\n        var counter: Int = 0\n\n        private fun calcNext() {\n            if (nextSearchIndex < 0) {\n                nextState = 0\n                nextItem = null\n            } else {\n                if (limit > 0 && ++counter >= limit || nextSearchIndex > input.length) {\n                    nextItem = currentStartIndex..input.lastIndex\n                    nextSearchIndex = -1\n                } else {\n                    val match = input.getNextMatch(nextSearchIndex)\n                    if (match == null) {\n                        nextItem = currentStartIndex..input.lastIndex\n                        nextSearchIndex = -1\n                    } else {\n                        val (index, length) = match\n                        nextItem = currentStartIndex until index\n                        currentStartIndex = index + length\n                        nextSearchIndex = currentStartIndex + if (length == 0) 1 else 0\n                    }\n                }\n                nextState = 1\n            }\n        }\n\n        override fun next(): IntRange {\n            if (nextState == -1)\n                calcNext()\n            if (nextState == 0)\n                throw NoSuchElementException()\n            val result = nextItem as IntRange\n            // Clean next to avoid keeping reference on yielded instance\n            nextItem = null\n            nextState = -1\n            return result\n        }\n\n        override fun hasNext(): Boolean {\n            if (nextState == -1)\n                calcNext()\n            return nextState == 1\n        }\n    }\n}\n\n/**\n * Returns a sequence of index ranges of substrings in this char sequence around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param startIndex The index to start searching delimiters from.\n *  No range having its start value less than [startIndex] is returned.\n *  [startIndex] is coerced to be non-negative and not greater than length of this string.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n */\nprivate fun CharSequence.rangesDelimitedBy(delimiters: CharArray, startIndex: Int = 0, ignoreCase: Boolean = false, limit: Int = 0): Sequence<IntRange> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" })\n\n    return DelimitedRangesSequence(this, startIndex, limit, { currentIndex ->\n        indexOfAny(delimiters, currentIndex, ignoreCase = ignoreCase).let { if (it < 0) null else it to 1 }\n    })\n}\n\n\n/**\n * Returns a sequence of index ranges of substrings in this char sequence around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param startIndex The index to start searching delimiters from.\n *  No range having its start value less than [startIndex] is returned.\n *  [startIndex] is coerced to be non-negative and not greater than length of this string.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [delimiters]\n * that matches this string at that position.\n */\nprivate fun CharSequence.rangesDelimitedBy(delimiters: Array<out String>, startIndex: Int = 0, ignoreCase: Boolean = false, limit: Int = 0): Sequence<IntRange> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" } )\n    val delimitersList = delimiters.asList()\n\n    return DelimitedRangesSequence(this, startIndex, limit, { currentIndex -> findAnyOf(delimitersList, currentIndex, ignoreCase = ignoreCase, last = false)?.let { it.first to it.second.length } })\n\n}\n\n\n// split\n\n/**\n * Splits this char sequence to a sequence of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [delimiters]\n * that matches this string at that position.\n */\npublic fun CharSequence.splitToSequence(vararg delimiters: String, ignoreCase: Boolean = false, limit: Int = 0): Sequence<String> =\n    rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).map { substring(it) }\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and matches at each position the first element in [delimiters]\n * that is equal to a delimiter in this instance at that position.\n */\npublic fun CharSequence.split(vararg delimiters: String, ignoreCase: Boolean = false, limit: Int = 0): List<String> {\n    if (delimiters.size == 1) {\n        val delimiter = delimiters[0]\n        if (!delimiter.isEmpty()) {\n            return split(delimiter, ignoreCase, limit)\n        }\n    }\n\n    return rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).asIterable().map { substring(it) }\n}\n\n/**\n * Splits this char sequence to a sequence of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\npublic fun CharSequence.splitToSequence(vararg delimiters: Char, ignoreCase: Boolean = false, limit: Int = 0): Sequence<String> =\n    rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).map { substring(it) }\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\npublic fun CharSequence.split(vararg delimiters: Char, ignoreCase: Boolean = false, limit: Int = 0): List<String> {\n    if (delimiters.size == 1) {\n        return split(delimiters[0].toString(), ignoreCase, limit)\n    }\n\n    return rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).asIterable().map { substring(it) }\n}\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiter].\n * This is specialized version of split which receives single non-empty delimiter and offers better performance\n *\n * @param delimiter String used as delimiter\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\nprivate fun CharSequence.split(delimiter: String, ignoreCase: Boolean, limit: Int): List<String> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" })\n\n    var currentOffset = 0\n    var nextIndex = indexOf(delimiter, currentOffset, ignoreCase)\n    if (nextIndex == -1 || limit == 1) {\n        return listOf(this.toString())\n    }\n\n    val isLimited = limit > 0\n    val result = ArrayList<String>(if (isLimited) limit.coerceAtMost(10) else 10)\n    do {\n        result.add(substring(currentOffset, nextIndex))\n        currentOffset = nextIndex + delimiter.length\n        // Do not search for next occurrence if we're reaching limit\n        if (isLimited && result.size == limit - 1) break\n        nextIndex = indexOf(delimiter, currentOffset, ignoreCase)\n    } while (nextIndex != -1)\n\n    result.add(substring(currentOffset, length))\n    return result\n}\n\n/**\n * Splits this char sequence around matches of the given regular expression.\n *\n * @param limit Non-negative value specifying the maximum number of substrings to return.\n * Zero by default means no limit is set.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.split(regex: Regex, limit: Int = 0): List<String> = regex.split(this, limit)\n\n/**\n * Splits this char sequence to a sequence of lines delimited by any of the following character sequences: CRLF, LF or CR.\n *\n * The lines returned do not include terminating line separators.\n */\npublic fun CharSequence.lineSequence(): Sequence<String> = splitToSequence(\"\\r\\n\", \"\\n\", \"\\r\")\n\n/**\n * Splits this char sequence to a list of lines delimited by any of the following character sequences: CRLF, LF or CR.\n *\n * The lines returned do not include terminating line separators.\n */\npublic fun CharSequence.lines(): List<String> = lineSequence().toList()\n",null,null,null,null,null,null,null,null,null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StandardKt\")\npackage kotlin\n\nimport kotlin.contracts.*\n\n/**\n * An exception is thrown to indicate that a method body remains to be implemented.\n */\npublic class NotImplementedError(message: String = \"An operation is not implemented.\") : Error(message)\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n */\n\n@kotlin.internal.InlineOnly\npublic inline fun TODO(): Nothing = throw NotImplementedError()\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n *\n * @param reason a string explaining why the implementation is missing.\n */\n@kotlin.internal.InlineOnly\npublic inline fun TODO(reason: String): Nothing = throw NotImplementedError(\"An operation is not implemented: $reason\")\n\n\n\n/**\n * Calls the specified function [block] and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <R> run(block: () -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.run(block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with the given [receiver] as its receiver and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#with).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> with(receiver: T, block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return receiver.block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns `this` value.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#apply).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> T.apply(block: T.() -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block()\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns `this` value.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#also).\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.also(block: (T) -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block(this)\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#let).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.let(block: (T) -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block(this)\n}\n\n/**\n * Returns `this` value if it satisfies the given [predicate] or `null`, if it doesn't.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeIf(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (predicate(this)) this else null\n}\n\n/**\n * Returns `this` value if it _does not_ satisfy the given [predicate] or `null`, if it does.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeUnless(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (!predicate(this)) this else null\n}\n\n/**\n * Executes the given function [action] specified number of [times].\n *\n * A zero-based index of current iteration is passed as a parameter to [action].\n *\n * @sample samples.misc.ControlFlow.repeat\n */\n@kotlin.internal.InlineOnly\npublic inline fun repeat(times: Int, action: (Int) -> Unit) {\n    contract { callsInPlace(action) }\n\n    for (index in 0 until times) {\n        action(index)\n    }\n}\n",null,null,null,null,null,null,null,null,null,null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n@file:kotlin.jvm.JvmName(\"ComparisonsKt\")\n@file:kotlin.jvm.JvmMultifileClass\n\npackage kotlin.comparisons\n\n/**\n * Compares two values using the specified functions [selectors] to calculate the result of the comparison.\n * The functions are called sequentially, receive the given values [a] and [b] and return [Comparable]\n * objects. As soon as the [Comparable] instances returned by a function for [a] and [b] values do not\n * compare as equal, the result of that comparison is returned.\n *\n * @sample samples.comparisons.Comparisons.compareValuesByWithSelectors\n */\npublic fun <T> compareValuesBy(a: T, b: T, vararg selectors: (T) -> Comparable<*>?): Int {\n    require(selectors.size > 0)\n    return compareValuesByImpl(a, b, selectors)\n}\n\nprivate fun <T> compareValuesByImpl(a: T, b: T, selectors: Array<out (T) -> Comparable<*>?>): Int {\n    for (fn in selectors) {\n        val v1 = fn(a)\n        val v2 = fn(b)\n        val diff = compareValues(v1, v2)\n        if (diff != 0) return diff\n    }\n    return 0\n}\n\n/**\n * Compares two values using the specified [selector] function to calculate the result of the comparison.\n * The function is applied to the given values [a] and [b] and return [Comparable] objects.\n * The result of comparison of these [Comparable] instances is returned.\n *\n * @sample samples.comparisons.Comparisons.compareValuesByWithSingleSelector\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareValuesBy(a: T, b: T, selector: (T) -> Comparable<*>?): Int {\n    return compareValues(selector(a), selector(b))\n}\n\n/**\n * Compares two values using the specified [selector] function to calculate the result of the comparison.\n * The function is applied to the given values [a] and [b] and return objects of type K which are then being\n * compared with the given [comparator].\n *\n * @sample samples.comparisons.Comparisons.compareValuesByWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> compareValuesBy(a: T, b: T, comparator: Comparator<in K>, selector: (T) -> K): Int {\n    return comparator.compare(selector(a), selector(b))\n}\n\n//// Not so useful without type inference for receiver of expression\n//// compareValuesWith(v1, v2, compareBy { it.prop1 } thenByDescending { it.prop2 })\n///**\n// * Compares two values using the specified [comparator].\n// */\n//@Suppress(\"NOTHING_TO_INLINE\")\n//public inline fun <T> compareValuesWith(a: T, b: T, comparator: Comparator<T>): Int = comparator.compare(a, b)\n//\n\n\n/**\n * Compares two nullable [Comparable] values. Null is considered less than any value.\n *\n * @sample samples.comparisons.Comparisons.compareValues\n */\npublic fun <T : Comparable<*>> compareValues(a: T?, b: T?): Int {\n    if (a === b) return 0\n    if (a == null) return -1\n    if (b == null) return 1\n\n    @Suppress(\"UNCHECKED_CAST\")\n    return (a as Comparable<Any>).compareTo(b)\n}\n\n/**\n * Creates a comparator using the sequence of functions to calculate a result of comparison.\n * The functions are called sequentially, receive the given values `a` and `b` and return [Comparable]\n * objects. As soon as the [Comparable] instances returned by a function for `a` and `b` values do not\n * compare as equal, the result of that comparison is returned from the [Comparator].\n *\n * @sample samples.comparisons.Comparisons.compareByWithSelectors\n */\npublic fun <T> compareBy(vararg selectors: (T) -> Comparable<*>?): Comparator<T> {\n    require(selectors.size > 0)\n    return Comparator { a, b -> compareValuesByImpl(a, b, selectors) }\n}\n\n\n/**\n * Creates a comparator using the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.compareByWithSingleSelector\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareBy(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(a, b, selector) }\n\n/**\n * Creates a comparator using the [selector] function to transform values being compared and then applying\n * the specified [comparator] to compare transformed values.\n *\n * @sample samples.comparisons.Comparisons.compareByWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> compareBy(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(a, b, comparator, selector) }\n\n/**\n * Creates a descending comparator using the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.compareByDescendingWithSingleSelector\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareByDescending(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(b, a, selector) }\n\n/**\n * Creates a descending comparator using the [selector] function to transform values being compared and then applying\n * the specified [comparator] to compare transformed values.\n *\n * Note that an order of [comparator] is reversed by this wrapper.\n *\n * @sample samples.comparisons.Comparisons.compareByDescendingWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> compareByDescending(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(b, a, comparator, selector) }\n\n/**\n * Creates a comparator comparing values after the primary comparator defined them equal. It uses\n * the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.thenBy\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Comparator<T>.thenBy(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenBy.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(a, b, selector)\n    }\n\n/**\n * Creates a comparator comparing values after the primary comparator defined them equal. It uses\n * the [selector] function to transform values and then compares them with the given [comparator].\n *\n * @sample samples.comparisons.Comparisons.thenByWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> Comparator<T>.thenBy(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenBy.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(a, b, comparator, selector)\n    }\n\n/**\n * Creates a descending comparator using the primary comparator and\n * the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.thenByDescending\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Comparator<T>.thenByDescending(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenByDescending.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(b, a, selector)\n    }\n\n/**\n * Creates a descending comparator comparing values after the primary comparator defined them equal. It uses\n * the [selector] function to transform values and then compares them with the given [comparator].\n *\n * @sample samples.comparisons.Comparisons.thenByDescendingWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> Comparator<T>.thenByDescending(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenByDescending.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(b, a, comparator, selector)\n    }\n\n\n/**\n * Creates a comparator using the primary comparator and function to calculate a result of comparison.\n *\n * @sample samples.comparisons.Comparisons.thenComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Comparator<T>.thenComparator(crossinline comparison: (a: T, b: T) -> Int): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenComparator.compare(a, b)\n        if (previousCompare != 0) previousCompare else comparison(a, b)\n    }\n\n/**\n * Combines this comparator and the given [comparator] such that the latter is applied only\n * when the former considered values equal.\n *\n * @sample samples.comparisons.Comparisons.then\n */\npublic infix fun <T> Comparator<T>.then(comparator: Comparator<in T>): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@then.compare(a, b)\n        if (previousCompare != 0) previousCompare else comparator.compare(a, b)\n    }\n\n/**\n * Combines this comparator and the given [comparator] such that the latter is applied only\n * when the former considered values equal.\n *\n * @sample samples.comparisons.Comparisons.thenDescending\n */\npublic infix fun <T> Comparator<T>.thenDescending(comparator: Comparator<in T>): Comparator<T> =\n    Comparator<T> { a, b ->\n        val previousCompare = this@thenDescending.compare(a, b)\n        if (previousCompare != 0) previousCompare else comparator.compare(b, a)\n    }\n\n// Not so useful without type inference for receiver of expression\n/**\n * Extends the given [comparator] of non-nullable values to a comparator of nullable values\n * considering `null` value less than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastWithComparator\n */\npublic fun <T : Any> nullsFirst(comparator: Comparator<in T>): Comparator<T?> =\n    Comparator { a, b ->\n        when {\n            a === b -> 0\n            a == null -> -1\n            b == null -> 1\n            else -> comparator.compare(a, b)\n        }\n    }\n\n/**\n * Provides a comparator of nullable [Comparable] values\n * considering `null` value less than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Comparable<T>> nullsFirst(): Comparator<T?> = nullsFirst(naturalOrder())\n\n/**\n * Extends the given [comparator] of non-nullable values to a comparator of nullable values\n * considering `null` value greater than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastWithComparator\n */\npublic fun <T : Any> nullsLast(comparator: Comparator<in T>): Comparator<T?> =\n    Comparator { a, b ->\n        when {\n            a === b -> 0\n            a == null -> 1\n            b == null -> -1\n            else -> comparator.compare(a, b)\n        }\n    }\n\n/**\n * Provides a comparator of nullable [Comparable] values\n * considering `null` value greater than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Comparable<T>> nullsLast(): Comparator<T?> = nullsLast(naturalOrder())\n\n/**\n * Returns a comparator that compares [Comparable] objects in natural order.\n *\n * @sample samples.comparisons.Comparisons.naturalOrderComparator\n */\npublic fun <T : Comparable<T>> naturalOrder(): Comparator<T> = @Suppress(\"UNCHECKED_CAST\") (NaturalOrderComparator as Comparator<T>)\n\n/**\n * Returns a comparator that compares [Comparable] objects in reversed natural order.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastWithComparator\n */\npublic fun <T : Comparable<T>> reverseOrder(): Comparator<T> = @Suppress(\"UNCHECKED_CAST\") (ReverseOrderComparator as Comparator<T>)\n\n/**\n *  Returns a comparator that imposes the reverse ordering of this comparator.\n *\n *  @sample samples.comparisons.Comparisons.reversed\n */\npublic fun <T> Comparator<T>.reversed(): Comparator<T> = when (this) {\n    is ReversedComparator -> this.comparator\n    NaturalOrderComparator -> @Suppress(\"UNCHECKED_CAST\") (ReverseOrderComparator as Comparator<T>)\n    ReverseOrderComparator -> @Suppress(\"UNCHECKED_CAST\") (NaturalOrderComparator as Comparator<T>)\n    else -> ReversedComparator(this)\n}\n\n\nprivate class ReversedComparator<T>(public val comparator: Comparator<T>) : Comparator<T> {\n    override fun compare(a: T, b: T): Int = comparator.compare(b, a)\n    @Suppress(\"VIRTUAL_MEMBER_HIDDEN\")\n    fun reversed(): Comparator<T> = comparator\n}\n\nprivate object NaturalOrderComparator : Comparator<Comparable<Any>> {\n    override fun compare(a: Comparable<Any>, b: Comparable<Any>): Int = a.compareTo(b)\n    @Suppress(\"VIRTUAL_MEMBER_HIDDEN\")\n    fun reversed(): Comparator<Comparable<Any>> = ReverseOrderComparator\n}\n\nprivate object ReverseOrderComparator : Comparator<Comparable<Any>> {\n    override fun compare(a: Comparable<Any>, b: Comparable<Any>): Int = b.compareTo(a)\n    @Suppress(\"VIRTUAL_MEMBER_HIDDEN\")\n    fun reversed(): Comparator<Comparable<Any>> = NaturalOrderComparator\n}\n",null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\nimport kotlin.random.Random\n\n/**\n * Removes a single instance of the specified element from this\n * collection, if it is present.\n *\n * Allows to overcome type-safety restriction of `remove` that requires to pass an element of type `E`.\n *\n * @return `true` if the element has been successfully removed; `false` if it was not present in the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.remove(element: T): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).remove(element)\n\n/**\n * Removes all of this collection's elements that are also contained in the specified collection.\n\n * Allows to overcome type-safety restriction of `removeAll` that requires to pass a collection of type `Collection<E>`.\n *\n * @return `true` if any of the specified elements was removed from the collection, `false` if the collection was not modified.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.removeAll(elements: Collection<T>): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).removeAll(elements)\n\n/**\n * Retains only the elements in this collection that are contained in the specified collection.\n *\n * Allows to overcome type-safety restriction of `retainAll` that requires to pass a collection of type `Collection<E>`.\n *\n * @return `true` if any element was removed from the collection, `false` if the collection was not modified.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.retainAll(elements: Collection<T>): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).retainAll(elements)\n\n/**\n * Adds the specified [element] to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(element: T) {\n    this.add(element)\n}\n\n/**\n * Adds all elements of the given [elements] collection to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Iterable<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] array to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Array<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] sequence to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Sequence<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Removes a single instance of the specified [element] from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(element: T) {\n    this.remove(element)\n}\n\n/**\n * Removes all elements contained in the given [elements] collection from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Iterable<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Removes all elements contained in the given [elements] array from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Array<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Removes all elements contained in the given [elements] sequence from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Sequence<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] collection to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Iterable<T>): Boolean {\n    when (elements) {\n        is Collection -> return addAll(elements)\n        else -> {\n            var result: Boolean = false\n            for (item in elements)\n                if (add(item)) result = true\n            return result\n        }\n    }\n}\n\n/**\n * Adds all elements of the given [elements] sequence to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Sequence<T>): Boolean {\n    var result: Boolean = false\n    for (item in elements) {\n        if (add(item)) result = true\n    }\n    return result\n}\n\n/**\n * Adds all elements of the given [elements] array to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Array<out T>): Boolean {\n    return addAll(elements.asList())\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] collection.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Iterable<T>): Boolean {\n    return removeAll(elements.convertToSetForSetOperationWith(this))\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] sequence.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Sequence<T>): Boolean {\n    val set = elements.toHashSet()\n    return set.isNotEmpty() && removeAll(set)\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] array.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Array<out T>): Boolean {\n    return elements.isNotEmpty() && removeAll(elements.toHashSet())\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] collection.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Iterable<T>): Boolean {\n    return retainAll(elements.convertToSetForSetOperationWith(this))\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] array.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Array<out T>): Boolean {\n    if (elements.isNotEmpty())\n        return retainAll(elements.toHashSet())\n    else\n        return retainNothing()\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] sequence.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Sequence<T>): Boolean {\n    val set = elements.toHashSet()\n    if (set.isNotEmpty())\n        return retainAll(set)\n    else\n        return retainNothing()\n}\n\nprivate fun MutableCollection<*>.retainNothing(): Boolean {\n    val result = isNotEmpty()\n    clear()\n    return result\n}\n\n\n/**\n * Removes all elements from this [MutableIterable] that match the given [predicate].\n *\n * @return `true` if any element was removed from this collection, or `false` when no elements were removed and collection was not modified.\n */\npublic fun <T> MutableIterable<T>.removeAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, true)\n\n/**\n * Retains only elements of this [MutableIterable] that match the given [predicate].\n *\n * @return `true` if any element was removed from this collection, or `false` when all elements were retained and collection was not modified.\n */\npublic fun <T> MutableIterable<T>.retainAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, false)\n\nprivate fun <T> MutableIterable<T>.filterInPlace(predicate: (T) -> Boolean, predicateResultToRemove: Boolean): Boolean {\n    var result = false\n    with(iterator()) {\n        while (hasNext())\n            if (predicate(next()) == predicateResultToRemove) {\n                remove()\n                result = true\n            }\n    }\n    return result\n}\n\n\n/**\n * Returns a new list with the elements of this list randomly shuffled\n * using the specified [random] instance as the source of randomness.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Iterable<T>.shuffled(random: Random): List<T> = toMutableList().apply { shuffle(random) }\n\n\n/**\n * Removes the element at the specified [index] from this list.\n * In Kotlin one should use the [MutableList.removeAt] function instead.\n */\n@Deprecated(\"Use removeAt(index) instead.\", ReplaceWith(\"removeAt(index)\"), level = DeprecationLevel.ERROR)\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList<T>.remove(index: Int): T = removeAt(index)\n\n/**\n * Removes the first element from this mutable list and returns that removed element, or throws [NoSuchElementException] if this list is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <T> MutableList<T>.removeFirst(): T = if (isEmpty()) throw NoSuchElementException(\"List is empty.\") else removeAt(0)\n\n/**\n * Removes the first element from this mutable list and returns that removed element, or returns `null` if this list is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <T> MutableList<T>.removeFirstOrNull(): T? = if (isEmpty()) null else removeAt(0)\n\n/**\n * Removes the last element from this mutable list and returns that removed element, or throws [NoSuchElementException] if this list is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <T> MutableList<T>.removeLast(): T = if (isEmpty()) throw NoSuchElementException(\"List is empty.\") else removeAt(lastIndex)\n\n/**\n * Removes the last element from this mutable list and returns that removed element, or returns `null` if this list is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <T> MutableList<T>.removeLastOrNull(): T? = if (isEmpty()) null else removeAt(lastIndex)\n\n/**\n * Removes all elements from this [MutableList] that match the given [predicate].\n *\n * @return `true` if any element was removed from this collection, or `false` when no elements were removed and collection was not modified.\n */\npublic fun <T> MutableList<T>.removeAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, true)\n\n/**\n * Retains only elements of this [MutableList] that match the given [predicate].\n *\n * @return `true` if any element was removed from this collection, or `false` when all elements were retained and collection was not modified.\n */\npublic fun <T> MutableList<T>.retainAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, false)\n\nprivate fun <T> MutableList<T>.filterInPlace(predicate: (T) -> Boolean, predicateResultToRemove: Boolean): Boolean {\n    if (this !is RandomAccess)\n        return (this as MutableIterable<T>).filterInPlace(predicate, predicateResultToRemove)\n\n    var writeIndex: Int = 0\n    for (readIndex in 0..lastIndex) {\n        val element = this[readIndex]\n        if (predicate(element) == predicateResultToRemove)\n            continue\n\n        if (writeIndex != readIndex)\n            this[writeIndex] = element\n\n        writeIndex++\n    }\n    if (writeIndex < size) {\n        for (removeIndex in lastIndex downTo writeIndex)\n            removeAt(removeIndex)\n\n        return true\n    } else {\n        return false\n    }\n}\n\n/**\n * Randomly shuffles elements in this mutable list using the specified [random] instance as the source of randomness.\n *\n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> MutableList<T>.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n",null,null,null,null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmName(\"LazyKt\")\n@file:kotlin.jvm.JvmMultifileClass\n\npackage kotlin\n\nimport kotlin.reflect.KProperty\n\n/**\n * Represents a value with lazy initialization.\n *\n * To create an instance of [Lazy] use the [lazy] function.\n */\npublic interface Lazy<out T> {\n    /**\n     * Gets the lazily initialized value of the current Lazy instance.\n     * Once the value was initialized it must not change during the rest of lifetime of this Lazy instance.\n     */\n    public val value: T\n\n    /**\n     * Returns `true` if a value for this Lazy instance has been already initialized, and `false` otherwise.\n     * Once this function has returned `true` it stays `true` for the rest of lifetime of this Lazy instance.\n     */\n    public fun isInitialized(): Boolean\n}\n\n/**\n * Creates a new instance of the [Lazy] that is already initialized with the specified [value].\n */\npublic fun <T> lazyOf(value: T): Lazy<T> = InitializedLazyImpl(value)\n\n/**\n * An extension to delegate a read-only property of type [T] to an instance of [Lazy].\n *\n * This extension allows to use instances of Lazy for property delegation:\n * `val property: String by lazy { initializer }`\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Lazy<T>.getValue(thisRef: Any?, property: KProperty<*>): T = value\n\n/**\n * Specifies how a [Lazy] instance synchronizes initialization among multiple threads.\n */\npublic enum class LazyThreadSafetyMode {\n\n    /**\n     * Locks are used to ensure that only a single thread can initialize the [Lazy] instance.\n     */\n    SYNCHRONIZED,\n\n    /**\n     * Initializer function can be called several times on concurrent access to uninitialized [Lazy] instance value,\n     * but only the first returned value will be used as the value of [Lazy] instance.\n     */\n    PUBLICATION,\n\n    /**\n     * No locks are used to synchronize an access to the [Lazy] instance value; if the instance is accessed from multiple threads, its behavior is undefined.\n     *\n     * This mode should not be used unless the [Lazy] instance is guaranteed never to be initialized from more than one thread.\n     */\n    NONE,\n}\n\n\ninternal object UNINITIALIZED_VALUE\n\n// internal to be called from lazy in JS\ninternal class UnsafeLazyImpl<out T>(initializer: () -> T) : Lazy<T>, Serializable {\n    private var initializer: (() -> T)? = initializer\n    private var _value: Any? = UNINITIALIZED_VALUE\n\n    override val value: T\n        get() {\n            if (_value === UNINITIALIZED_VALUE) {\n                _value = initializer!!()\n                initializer = null\n            }\n            @Suppress(\"UNCHECKED_CAST\")\n            return _value as T\n        }\n\n    override fun isInitialized(): Boolean = _value !== UNINITIALIZED_VALUE\n\n    override fun toString(): String = if (isInitialized()) value.toString() else \"Lazy value not initialized yet.\"\n\n    private fun writeReplace(): Any = InitializedLazyImpl(value)\n}\n\ninternal class InitializedLazyImpl<out T>(override val value: T) : Lazy<T>, Serializable {\n\n    override fun isInitialized(): Boolean = true\n\n    override fun toString(): String = value.toString()\n\n}\n",null,null,null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"PreconditionsKt\")\n\npackage kotlin\n\nimport kotlin.contracts.contract\n\n/**\n * Throws an [IllegalArgumentException] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun require(value: Boolean): Unit {\n    contract {\n        returns() implies value\n    }\n    require(value) { \"Failed requirement.\" }\n}\n\n/**\n * Throws an [IllegalArgumentException] with the result of calling [lazyMessage] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun require(value: Boolean, lazyMessage: () -> Any): Unit {\n    contract {\n        returns() implies value\n    }\n    if (!value) {\n        val message = lazyMessage()\n        throw IllegalArgumentException(message.toString())\n    }\n}\n\n/**\n * Throws an [IllegalArgumentException] if the [value] is null. Otherwise returns the not null value.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> requireNotNull(value: T?): T {\n    contract {\n        returns() implies (value != null)\n    }\n    return requireNotNull(value) { \"Required value was null.\" }\n}\n\n/**\n * Throws an [IllegalArgumentException] with the result of calling [lazyMessage] if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> requireNotNull(value: T?, lazyMessage: () -> Any): T {\n    contract {\n        returns() implies (value != null)\n    }\n\n    if (value == null) {\n        val message = lazyMessage()\n        throw IllegalArgumentException(message.toString())\n    } else {\n        return value\n    }\n}\n\n/**\n * Throws an [IllegalStateException] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun check(value: Boolean): Unit {\n    contract {\n        returns() implies value\n    }\n    check(value) { \"Check failed.\" }\n}\n\n/**\n * Throws an [IllegalStateException] with the result of calling [lazyMessage] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun check(value: Boolean, lazyMessage: () -> Any): Unit {\n    contract {\n        returns() implies value\n    }\n    if (!value) {\n        val message = lazyMessage()\n        throw IllegalStateException(message.toString())\n    }\n}\n\n/**\n * Throws an [IllegalStateException] if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> checkNotNull(value: T?): T {\n    contract {\n        returns() implies (value != null)\n    }\n    return checkNotNull(value) { \"Required value was null.\" }\n}\n\n/**\n * Throws an [IllegalStateException] with the result of calling [lazyMessage]  if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> checkNotNull(value: T?, lazyMessage: () -> Any): T {\n    contract {\n        returns() implies (value != null)\n    }\n\n    if (value == null) {\n        val message = lazyMessage()\n        throw IllegalStateException(message.toString())\n    } else {\n        return value\n    }\n}\n\n\n/**\n * Throws an [IllegalStateException] with the given [message].\n *\n * @sample samples.misc.Preconditions.failWithError\n */\n@kotlin.internal.InlineOnly\npublic inline fun error(message: Any): Nothing = throw IllegalStateException(message.toString())\n",null,null,null,null,null,null,null,null,null,null,null,null,"/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"ArraysKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component1(): Byte {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component1(): Short {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component1(): Int {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component1(): Long {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component1(): Float {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component1(): Double {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component1(): Boolean {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component1(): Char {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component2(): Byte {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component2(): Short {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component2(): Int {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component2(): Long {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component2(): Float {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component2(): Double {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component2(): Boolean {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component2(): Char {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component3(): Byte {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component3(): Short {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component3(): Int {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component3(): Long {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component3(): Float {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component3(): Double {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component3(): Boolean {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component3(): Char {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component4(): Byte {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component4(): Short {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component4(): Int {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component4(): Long {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component4(): Float {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component4(): Double {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component4(): Boolean {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component4(): Char {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component5(): Byte {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component5(): Short {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component5(): Int {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component5(): Long {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component5(): Float {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component5(): Double {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component5(): Boolean {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component5(): Char {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.contains(element: T): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun ByteArray.contains(element: Byte): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun ShortArray.contains(element: Short): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun IntArray.contains(element: Int): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun LongArray.contains(element: Long): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun FloatArray.contains(element: Float): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun DoubleArray.contains(element: Double): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun BooleanArray.contains(element: Boolean): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun CharArray.contains(element: Char): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun <T> Array<out T>.elementAt(index: Int): T\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun ByteArray.elementAt(index: Int): Byte\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun ShortArray.elementAt(index: Int): Short\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun IntArray.elementAt(index: Int): Int\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun LongArray.elementAt(index: Int): Long\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun FloatArray.elementAt(index: Int): Float\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun DoubleArray.elementAt(index: Int): Double\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun BooleanArray.elementAt(index: Int): Boolean\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun CharArray.elementAt(index: Int): Char\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Byte): Byte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Short): Short {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Int): Int {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Long): Long {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Float): Float {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Double): Double {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Boolean): Boolean {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAtOrNull(index: Int): Byte? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAtOrNull(index: Int): Short? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAtOrNull(index: Int): Int? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAtOrNull(index: Int): Long? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAtOrNull(index: Int): Float? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAtOrNull(index: Int): Double? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAtOrNull(index: Int): Boolean? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAtOrNull(index: Int): Char? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.find(predicate: (Byte) -> Boolean): Byte? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.find(predicate: (Short) -> Boolean): Short? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.find(predicate: (Int) -> Boolean): Int? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.find(predicate: (Long) -> Boolean): Long? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.find(predicate: (Float) -> Boolean): Float? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.find(predicate: (Double) -> Boolean): Double? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.find(predicate: (Boolean) -> Boolean): Boolean? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.find(predicate: (Char) -> Boolean): Char? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.findLast(predicate: (Byte) -> Boolean): Byte? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.findLast(predicate: (Short) -> Boolean): Short? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.findLast(predicate: (Int) -> Boolean): Int? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.findLast(predicate: (Long) -> Boolean): Long? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.findLast(predicate: (Float) -> Boolean): Float? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.findLast(predicate: (Double) -> Boolean): Double? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.findLast(predicate: (Boolean) -> Boolean): Boolean? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.findLast(predicate: (Char) -> Boolean): Char? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun <T> Array<out T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ByteArray.first(): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ShortArray.first(): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun IntArray.first(): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun LongArray.first(): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun FloatArray.first(): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun DoubleArray.first(): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun BooleanArray.first(): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun CharArray.first(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Array<out T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ByteArray.first(predicate: (Byte) -> Boolean): Byte {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ShortArray.first(predicate: (Short) -> Boolean): Short {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun IntArray.first(predicate: (Int) -> Boolean): Int {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun LongArray.first(predicate: (Long) -> Boolean): Long {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun FloatArray.first(predicate: (Float) -> Boolean): Float {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun DoubleArray.first(predicate: (Double) -> Boolean): Double {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun BooleanArray.first(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun CharArray.first(predicate: (Char) -> Boolean): Char {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun <T> Array<out T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun ByteArray.firstOrNull(): Byte? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun ShortArray.firstOrNull(): Short? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun IntArray.firstOrNull(): Int? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun LongArray.firstOrNull(): Long? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun FloatArray.firstOrNull(): Float? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun DoubleArray.firstOrNull(): Double? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun BooleanArray.firstOrNull(): Boolean? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun CharArray.firstOrNull(): Char? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Array<out T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun ByteArray.firstOrNull(predicate: (Byte) -> Boolean): Byte? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun ShortArray.firstOrNull(predicate: (Short) -> Boolean): Short? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun IntArray.firstOrNull(predicate: (Int) -> Boolean): Int? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun LongArray.firstOrNull(predicate: (Long) -> Boolean): Long? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun FloatArray.firstOrNull(predicate: (Float) -> Boolean): Float? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun DoubleArray.firstOrNull(predicate: (Double) -> Boolean): Double? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun BooleanArray.firstOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun CharArray.firstOrNull(predicate: (Char) -> Boolean): Char? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.getOrElse(index: Int, defaultValue: (Int) -> Byte): Byte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.getOrElse(index: Int, defaultValue: (Int) -> Short): Short {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.getOrElse(index: Int, defaultValue: (Int) -> Int): Int {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.getOrElse(index: Int, defaultValue: (Int) -> Long): Long {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.getOrElse(index: Int, defaultValue: (Int) -> Float): Float {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.getOrElse(index: Int, defaultValue: (Int) -> Double): Double {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.getOrElse(index: Int, defaultValue: (Int) -> Boolean): Boolean {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.getOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun <T> Array<out T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun ByteArray.getOrNull(index: Int): Byte? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun ShortArray.getOrNull(index: Int): Short? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun IntArray.getOrNull(index: Int): Int? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun LongArray.getOrNull(index: Int): Long? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun FloatArray.getOrNull(index: Int): Float? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun DoubleArray.getOrNull(index: Int): Double? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun BooleanArray.getOrNull(index: Int): Boolean? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun CharArray.getOrNull(index: Int): Char? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.indexOf(element: T): Int {\n    if (element == null) {\n        for (index in indices) {\n            if (this[index] == null) {\n                return index\n            }\n        }\n    } else {\n        for (index in indices) {\n            if (element == this[index]) {\n                return index\n            }\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun ByteArray.indexOf(element: Byte): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun ShortArray.indexOf(element: Short): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun IntArray.indexOf(element: Int): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun LongArray.indexOf(element: Long): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun FloatArray.indexOf(element: Float): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun DoubleArray.indexOf(element: Double): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun BooleanArray.indexOf(element: Boolean): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun CharArray.indexOf(element: Char): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun <T> Array<out T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ByteArray.indexOfFirst(predicate: (Byte) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ShortArray.indexOfFirst(predicate: (Short) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun IntArray.indexOfFirst(predicate: (Int) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun LongArray.indexOfFirst(predicate: (Long) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun FloatArray.indexOfFirst(predicate: (Float) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun DoubleArray.indexOfFirst(predicate: (Double) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun BooleanArray.indexOfFirst(predicate: (Boolean) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun CharArray.indexOfFirst(predicate: (Char) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun <T> Array<out T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ByteArray.indexOfLast(predicate: (Byte) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ShortArray.indexOfLast(predicate: (Short) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun IntArray.indexOfLast(predicate: (Int) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun LongArray.indexOfLast(predicate: (Long) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun FloatArray.indexOfLast(predicate: (Float) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun DoubleArray.indexOfLast(predicate: (Double) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun BooleanArray.indexOfLast(predicate: (Boolean) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun CharArray.indexOfLast(predicate: (Char) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun <T> Array<out T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ByteArray.last(): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ShortArray.last(): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun IntArray.last(): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun LongArray.last(): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun FloatArray.last(): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun DoubleArray.last(): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun BooleanArray.last(): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun CharArray.last(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Array<out T>.last(predicate: (T) -> Boolean): T {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ByteArray.last(predicate: (Byte) -> Boolean): Byte {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ShortArray.last(predicate: (Short) -> Boolean): Short {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun IntArray.last(predicate: (Int) -> Boolean): Int {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun LongArray.last(predicate: (Long) -> Boolean): Long {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun FloatArray.last(predicate: (Float) -> Boolean): Float {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun DoubleArray.last(predicate: (Double) -> Boolean): Double {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun BooleanArray.last(predicate: (Boolean) -> Boolean): Boolean {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun CharArray.last(predicate: (Char) -> Boolean): Char {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.lastIndexOf(element: T): Int {\n    if (element == null) {\n        for (index in indices.reversed()) {\n            if (this[index] == null) {\n                return index\n            }\n        }\n    } else {\n        for (index in indices.reversed()) {\n            if (element == this[index]) {\n                return index\n            }\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun ByteArray.lastIndexOf(element: Byte): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun ShortArray.lastIndexOf(element: Short): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun IntArray.lastIndexOf(element: Int): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun LongArray.lastIndexOf(element: Long): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun FloatArray.lastIndexOf(element: Float): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun DoubleArray.lastIndexOf(element: Double): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun BooleanArray.lastIndexOf(element: Boolean): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun CharArray.lastIndexOf(element: Char): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun <T> Array<out T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun ByteArray.lastOrNull(): Byte? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun ShortArray.lastOrNull(): Short? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun IntArray.lastOrNull(): Int? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun LongArray.lastOrNull(): Long? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun FloatArray.lastOrNull(): Float? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun DoubleArray.lastOrNull(): Double? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun BooleanArray.lastOrNull(): Boolean? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun CharArray.lastOrNull(): Char? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> Array<out T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun ByteArray.lastOrNull(predicate: (Byte) -> Boolean): Byte? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun ShortArray.lastOrNull(predicate: (Short) -> Boolean): Short? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun IntArray.lastOrNull(predicate: (Int) -> Boolean): Int? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun LongArray.lastOrNull(predicate: (Long) -> Boolean): Long? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun FloatArray.lastOrNull(predicate: (Float) -> Boolean): Float? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun DoubleArray.lastOrNull(predicate: (Double) -> Boolean): Double? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun BooleanArray.lastOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun CharArray.lastOrNull(predicate: (Char) -> Boolean): Char? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.random(): T {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.random(): Byte {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.random(): Short {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.random(): Int {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.random(): Long {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.random(): Float {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.random(): Double {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.random(): Boolean {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.random(): Char {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Array<out T>.random(random: Random): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun ByteArray.random(random: Random): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun ShortArray.random(random: Random): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun IntArray.random(random: Random): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun LongArray.random(random: Random): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun FloatArray.random(random: Random): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun DoubleArray.random(random: Random): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun BooleanArray.random(random: Random): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun CharArray.random(random: Random): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.randomOrNull(): T? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.randomOrNull(): Byte? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.randomOrNull(): Short? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.randomOrNull(): Int? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.randomOrNull(): Long? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.randomOrNull(): Float? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.randomOrNull(): Double? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.randomOrNull(): Boolean? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.randomOrNull(): Char? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <T> Array<out T>.randomOrNull(random: Random): T? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun ByteArray.randomOrNull(random: Random): Byte? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun ShortArray.randomOrNull(random: Random): Short? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun IntArray.randomOrNull(random: Random): Int? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun LongArray.randomOrNull(random: Random): Long? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun FloatArray.randomOrNull(random: Random): Float? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun DoubleArray.randomOrNull(random: Random): Double? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun BooleanArray.randomOrNull(random: Random): Boolean? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun CharArray.randomOrNull(random: Random): Char? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun <T> Array<out T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun ByteArray.single(): Byte {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun ShortArray.single(): Short {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun IntArray.single(): Int {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun LongArray.single(): Long {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun FloatArray.single(): Float {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun DoubleArray.single(): Double {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun BooleanArray.single(): Boolean {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun CharArray.single(): Char {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Array<out T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun ByteArray.single(predicate: (Byte) -> Boolean): Byte {\n    var single: Byte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Byte\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun ShortArray.single(predicate: (Short) -> Boolean): Short {\n    var single: Short? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Short\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun IntArray.single(predicate: (Int) -> Boolean): Int {\n    var single: Int? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Int\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun LongArray.single(predicate: (Long) -> Boolean): Long {\n    var single: Long? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Long\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun FloatArray.single(predicate: (Float) -> Boolean): Float {\n    var single: Float? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Float\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun DoubleArray.single(predicate: (Double) -> Boolean): Double {\n    var single: Double? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Double\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun BooleanArray.single(predicate: (Boolean) -> Boolean): Boolean {\n    var single: Boolean? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Boolean\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun CharArray.single(predicate: (Char) -> Boolean): Char {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Char\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun <T> Array<out T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun ByteArray.singleOrNull(): Byte? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun ShortArray.singleOrNull(): Short? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun IntArray.singleOrNull(): Int? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun LongArray.singleOrNull(): Long? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun FloatArray.singleOrNull(): Float? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun DoubleArray.singleOrNull(): Double? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun BooleanArray.singleOrNull(): Boolean? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun CharArray.singleOrNull(): Char? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Array<out T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun ByteArray.singleOrNull(predicate: (Byte) -> Boolean): Byte? {\n    var single: Byte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun ShortArray.singleOrNull(predicate: (Short) -> Boolean): Short? {\n    var single: Short? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun IntArray.singleOrNull(predicate: (Int) -> Boolean): Int? {\n    var single: Int? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun LongArray.singleOrNull(predicate: (Long) -> Boolean): Long? {\n    var single: Long? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun FloatArray.singleOrNull(predicate: (Float) -> Boolean): Float? {\n    var single: Float? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun DoubleArray.singleOrNull(predicate: (Double) -> Boolean): Double? {\n    var single: Double? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun BooleanArray.singleOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    var single: Boolean? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun CharArray.singleOrNull(predicate: (Char) -> Boolean): Char? {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Array<out T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ByteArray.drop(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ShortArray.drop(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun IntArray.drop(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun LongArray.drop(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun FloatArray.drop(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun DoubleArray.drop(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun BooleanArray.drop(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun CharArray.drop(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Array<out T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ByteArray.dropLast(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ShortArray.dropLast(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun IntArray.dropLast(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun LongArray.dropLast(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun FloatArray.dropLast(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun DoubleArray.dropLast(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun BooleanArray.dropLast(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun CharArray.dropLast(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Array<out T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ByteArray.dropLastWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ShortArray.dropLastWhile(predicate: (Short) -> Boolean): List<Short> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun IntArray.dropLastWhile(predicate: (Int) -> Boolean): List<Int> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun LongArray.dropLastWhile(predicate: (Long) -> Boolean): List<Long> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun FloatArray.dropLastWhile(predicate: (Float) -> Boolean): List<Float> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun DoubleArray.dropLastWhile(predicate: (Double) -> Boolean): List<Double> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun BooleanArray.dropLastWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun CharArray.dropLastWhile(predicate: (Char) -> Boolean): List<Char> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Array<out T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ByteArray.dropWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    var yielding = false\n    val list = ArrayList<Byte>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ShortArray.dropWhile(predicate: (Short) -> Boolean): List<Short> {\n    var yielding = false\n    val list = ArrayList<Short>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun IntArray.dropWhile(predicate: (Int) -> Boolean): List<Int> {\n    var yielding = false\n    val list = ArrayList<Int>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun LongArray.dropWhile(predicate: (Long) -> Boolean): List<Long> {\n    var yielding = false\n    val list = ArrayList<Long>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun FloatArray.dropWhile(predicate: (Float) -> Boolean): List<Float> {\n    var yielding = false\n    val list = ArrayList<Float>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun DoubleArray.dropWhile(predicate: (Double) -> Boolean): List<Double> {\n    var yielding = false\n    val list = ArrayList<Double>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun BooleanArray.dropWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    var yielding = false\n    val list = ArrayList<Boolean>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun CharArray.dropWhile(predicate: (Char) -> Boolean): List<Char> {\n    var yielding = false\n    val list = ArrayList<Char>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun <T> Array<out T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun ByteArray.filter(predicate: (Byte) -> Boolean): List<Byte> {\n    return filterTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun ShortArray.filter(predicate: (Short) -> Boolean): List<Short> {\n    return filterTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun IntArray.filter(predicate: (Int) -> Boolean): List<Int> {\n    return filterTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun LongArray.filter(predicate: (Long) -> Boolean): List<Long> {\n    return filterTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun FloatArray.filter(predicate: (Float) -> Boolean): List<Float> {\n    return filterTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun DoubleArray.filter(predicate: (Double) -> Boolean): List<Double> {\n    return filterTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun BooleanArray.filter(predicate: (Boolean) -> Boolean): List<Boolean> {\n    return filterTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun CharArray.filter(predicate: (Char) -> Boolean): List<Char> {\n    return filterTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T> Array<out T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun ByteArray.filterIndexed(predicate: (index: Int, Byte) -> Boolean): List<Byte> {\n    return filterIndexedTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun ShortArray.filterIndexed(predicate: (index: Int, Short) -> Boolean): List<Short> {\n    return filterIndexedTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun IntArray.filterIndexed(predicate: (index: Int, Int) -> Boolean): List<Int> {\n    return filterIndexedTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun LongArray.filterIndexed(predicate: (index: Int, Long) -> Boolean): List<Long> {\n    return filterIndexedTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun FloatArray.filterIndexed(predicate: (index: Int, Float) -> Boolean): List<Float> {\n    return filterIndexedTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun DoubleArray.filterIndexed(predicate: (index: Int, Double) -> Boolean): List<Double> {\n    return filterIndexedTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun BooleanArray.filterIndexed(predicate: (index: Int, Boolean) -> Boolean): List<Boolean> {\n    return filterIndexedTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun CharArray.filterIndexed(predicate: (index: Int, Char) -> Boolean): List<Char> {\n    return filterIndexedTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterIndexedTo(destination: C, predicate: (index: Int, Byte) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterIndexedTo(destination: C, predicate: (index: Int, Short) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterIndexedTo(destination: C, predicate: (index: Int, Int) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterIndexedTo(destination: C, predicate: (index: Int, Long) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterIndexedTo(destination: C, predicate: (index: Int, Float) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterIndexedTo(destination: C, predicate: (index: Int, Double) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterIndexedTo(destination: C, predicate: (index: Int, Boolean) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterIndexedTo(destination: C, predicate: (index: Int, Char) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n */\npublic inline fun <reified R> Array<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Array<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun <T> Array<out T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun ByteArray.filterNot(predicate: (Byte) -> Boolean): List<Byte> {\n    return filterNotTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun ShortArray.filterNot(predicate: (Short) -> Boolean): List<Short> {\n    return filterNotTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun IntArray.filterNot(predicate: (Int) -> Boolean): List<Int> {\n    return filterNotTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun LongArray.filterNot(predicate: (Long) -> Boolean): List<Long> {\n    return filterNotTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun FloatArray.filterNot(predicate: (Float) -> Boolean): List<Float> {\n    return filterNotTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun DoubleArray.filterNot(predicate: (Double) -> Boolean): List<Double> {\n    return filterNotTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun BooleanArray.filterNot(predicate: (Boolean) -> Boolean): List<Boolean> {\n    return filterNotTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun CharArray.filterNot(predicate: (Char) -> Boolean): List<Char> {\n    return filterNotTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n */\npublic fun <T : Any> Array<out T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n */\npublic fun <C : MutableCollection<in T>, T : Any> Array<out T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterNotTo(destination: C, predicate: (Byte) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterNotTo(destination: C, predicate: (Short) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterNotTo(destination: C, predicate: (Int) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterNotTo(destination: C, predicate: (Long) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterNotTo(destination: C, predicate: (Float) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterNotTo(destination: C, predicate: (Double) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterNotTo(destination: C, predicate: (Boolean) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterNotTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterTo(destination: C, predicate: (Byte) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterTo(destination: C, predicate: (Short) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterTo(destination: C, predicate: (Int) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterTo(destination: C, predicate: (Long) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterTo(destination: C, predicate: (Float) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterTo(destination: C, predicate: (Double) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterTo(destination: C, predicate: (Boolean) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> Array<out T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ByteArray.slice(indices: IntRange): List<Byte> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ShortArray.slice(indices: IntRange): List<Short> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun IntArray.slice(indices: IntRange): List<Int> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun LongArray.slice(indices: IntRange): List<Long> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun FloatArray.slice(indices: IntRange): List<Float> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun DoubleArray.slice(indices: IntRange): List<Double> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun BooleanArray.slice(indices: IntRange): List<Boolean> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun CharArray.slice(indices: IntRange): List<Char> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> Array<out T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun ByteArray.slice(indices: Iterable<Int>): List<Byte> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Byte>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun ShortArray.slice(indices: Iterable<Int>): List<Short> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Short>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun IntArray.slice(indices: Iterable<Int>): List<Int> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Int>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun LongArray.slice(indices: Iterable<Int>): List<Long> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Long>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun FloatArray.slice(indices: Iterable<Int>): List<Float> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Float>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun DoubleArray.slice(indices: Iterable<Int>): List<Double> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Double>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun BooleanArray.slice(indices: Iterable<Int>): List<Boolean> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Boolean>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun CharArray.slice(indices: Iterable<Int>): List<Char> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Char>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun <T> Array<T>.sliceArray(indices: Collection<Int>): Array<T> {\n    val result = arrayOfNulls(this, indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun ByteArray.sliceArray(indices: Collection<Int>): ByteArray {\n    val result = ByteArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun ShortArray.sliceArray(indices: Collection<Int>): ShortArray {\n    val result = ShortArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun IntArray.sliceArray(indices: Collection<Int>): IntArray {\n    val result = IntArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun LongArray.sliceArray(indices: Collection<Int>): LongArray {\n    val result = LongArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun FloatArray.sliceArray(indices: Collection<Int>): FloatArray {\n    val result = FloatArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun DoubleArray.sliceArray(indices: Collection<Int>): DoubleArray {\n    val result = DoubleArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun BooleanArray.sliceArray(indices: Collection<Int>): BooleanArray {\n    val result = BooleanArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun CharArray.sliceArray(indices: Collection<Int>): CharArray {\n    val result = CharArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun <T> Array<T>.sliceArray(indices: IntRange): Array<T> {\n    if (indices.isEmpty()) return copyOfRange(0, 0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun ByteArray.sliceArray(indices: IntRange): ByteArray {\n    if (indices.isEmpty()) return ByteArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun ShortArray.sliceArray(indices: IntRange): ShortArray {\n    if (indices.isEmpty()) return ShortArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun IntArray.sliceArray(indices: IntRange): IntArray {\n    if (indices.isEmpty()) return IntArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun LongArray.sliceArray(indices: IntRange): LongArray {\n    if (indices.isEmpty()) return LongArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun FloatArray.sliceArray(indices: IntRange): FloatArray {\n    if (indices.isEmpty()) return FloatArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun DoubleArray.sliceArray(indices: IntRange): DoubleArray {\n    if (indices.isEmpty()) return DoubleArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun BooleanArray.sliceArray(indices: IntRange): BooleanArray {\n    if (indices.isEmpty()) return BooleanArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun CharArray.sliceArray(indices: IntRange): CharArray {\n    if (indices.isEmpty()) return CharArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Array<out T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ByteArray.take(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Byte>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ShortArray.take(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Short>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun IntArray.take(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Int>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun LongArray.take(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Long>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun FloatArray.take(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Float>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun DoubleArray.take(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Double>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun BooleanArray.take(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Boolean>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun CharArray.take(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Char>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Array<out T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<T>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ByteArray.takeLast(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Byte>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ShortArray.takeLast(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Short>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun IntArray.takeLast(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Int>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun LongArray.takeLast(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Long>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun FloatArray.takeLast(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Float>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun DoubleArray.takeLast(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Double>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun BooleanArray.takeLast(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Boolean>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun CharArray.takeLast(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Char>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Array<out T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ByteArray.takeLastWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ShortArray.takeLastWhile(predicate: (Short) -> Boolean): List<Short> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun IntArray.takeLastWhile(predicate: (Int) -> Boolean): List<Int> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun LongArray.takeLastWhile(predicate: (Long) -> Boolean): List<Long> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun FloatArray.takeLastWhile(predicate: (Float) -> Boolean): List<Float> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun DoubleArray.takeLastWhile(predicate: (Double) -> Boolean): List<Double> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun BooleanArray.takeLastWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun CharArray.takeLastWhile(predicate: (Char) -> Boolean): List<Char> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Array<out T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ByteArray.takeWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    val list = ArrayList<Byte>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ShortArray.takeWhile(predicate: (Short) -> Boolean): List<Short> {\n    val list = ArrayList<Short>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun IntArray.takeWhile(predicate: (Int) -> Boolean): List<Int> {\n    val list = ArrayList<Int>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun LongArray.takeWhile(predicate: (Long) -> Boolean): List<Long> {\n    val list = ArrayList<Long>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun FloatArray.takeWhile(predicate: (Float) -> Boolean): List<Float> {\n    val list = ArrayList<Float>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun DoubleArray.takeWhile(predicate: (Double) -> Boolean): List<Double> {\n    val list = ArrayList<Double>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun BooleanArray.takeWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    val list = ArrayList<Boolean>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun CharArray.takeWhile(predicate: (Char) -> Boolean): List<Char> {\n    val list = ArrayList<Char>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun <T> Array<T>.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun ByteArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun ShortArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun IntArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun LongArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun FloatArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun DoubleArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun BooleanArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun CharArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Array<out T>.reversed(): List<T> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun ByteArray.reversed(): List<Byte> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun ShortArray.reversed(): List<Short> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun IntArray.reversed(): List<Int> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun LongArray.reversed(): List<Long> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun FloatArray.reversed(): List<Float> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun DoubleArray.reversed(): List<Double> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun BooleanArray.reversed(): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun CharArray.reversed(): List<Char> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun <T> Array<T>.reversedArray(): Array<T> {\n    if (isEmpty()) return this\n    val result = arrayOfNulls(this, size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun ByteArray.reversedArray(): ByteArray {\n    if (isEmpty()) return this\n    val result = ByteArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun ShortArray.reversedArray(): ShortArray {\n    if (isEmpty()) return this\n    val result = ShortArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun IntArray.reversedArray(): IntArray {\n    if (isEmpty()) return this\n    val result = IntArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun LongArray.reversedArray(): LongArray {\n    if (isEmpty()) return this\n    val result = LongArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun FloatArray.reversedArray(): FloatArray {\n    if (isEmpty()) return this\n    val result = FloatArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun DoubleArray.reversedArray(): DoubleArray {\n    if (isEmpty()) return this\n    val result = DoubleArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun BooleanArray.reversedArray(): BooleanArray {\n    if (isEmpty()) return this\n    val result = BooleanArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun CharArray.reversedArray(): CharArray {\n    if (isEmpty()) return this\n    val result = CharArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Sorts elements in the array in-place according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the array in-place descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun ByteArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun ShortArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun IntArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun LongArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun FloatArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun DoubleArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun CharArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sorted(): List<T> {\n    return sortedArray().asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun ByteArray.sorted(): List<Byte> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun ShortArray.sorted(): List<Short> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun IntArray.sorted(): List<Int> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun LongArray.sorted(): List<Long> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun FloatArray.sorted(): List<Float> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun DoubleArray.sorted(): List<Double> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun CharArray.sorted(): List<Char> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<T>.sortedArray(): Array<T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun ByteArray.sortedArray(): ByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun ShortArray.sortedArray(): ShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun IntArray.sortedArray(): IntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun LongArray.sortedArray(): LongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun FloatArray.sortedArray(): FloatArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun DoubleArray.sortedArray(): DoubleArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun CharArray.sortedArray(): CharArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<T>.sortedArrayDescending(): Array<T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortWith(reverseOrder()) }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun ByteArray.sortedArrayDescending(): ByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun ShortArray.sortedArrayDescending(): ShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun IntArray.sortedArrayDescending(): IntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun LongArray.sortedArrayDescending(): LongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun FloatArray.sortedArrayDescending(): FloatArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun DoubleArray.sortedArrayDescending(): DoubleArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun CharArray.sortedArrayDescending(): CharArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sortedArrayWith(comparator: Comparator<in T>): Array<out T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortWith(comparator) }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ByteArray.sortedBy(crossinline selector: (Byte) -> R?): List<Byte> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ShortArray.sortedBy(crossinline selector: (Short) -> R?): List<Short> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> IntArray.sortedBy(crossinline selector: (Int) -> R?): List<Int> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> LongArray.sortedBy(crossinline selector: (Long) -> R?): List<Long> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> FloatArray.sortedBy(crossinline selector: (Float) -> R?): List<Float> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.sortedBy(crossinline selector: (Double) -> R?): List<Double> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.sortedBy(crossinline selector: (Boolean) -> R?): List<Boolean> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> CharArray.sortedBy(crossinline selector: (Char) -> R?): List<Char> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ByteArray.sortedByDescending(crossinline selector: (Byte) -> R?): List<Byte> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ShortArray.sortedByDescending(crossinline selector: (Short) -> R?): List<Short> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> IntArray.sortedByDescending(crossinline selector: (Int) -> R?): List<Int> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> LongArray.sortedByDescending(crossinline selector: (Long) -> R?): List<Long> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> FloatArray.sortedByDescending(crossinline selector: (Float) -> R?): List<Float> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.sortedByDescending(crossinline selector: (Double) -> R?): List<Double> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.sortedByDescending(crossinline selector: (Boolean) -> R?): List<Boolean> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> CharArray.sortedByDescending(crossinline selector: (Char) -> R?): List<Char> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun ByteArray.sortedDescending(): List<Byte> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun ShortArray.sortedDescending(): List<Short> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun IntArray.sortedDescending(): List<Int> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun LongArray.sortedDescending(): List<Long> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun FloatArray.sortedDescending(): List<Float> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun DoubleArray.sortedDescending(): List<Double> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun CharArray.sortedDescending(): List<Char> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    return sortedArrayWith(comparator).asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun ByteArray.sortedWith(comparator: Comparator<in Byte>): List<Byte> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun ShortArray.sortedWith(comparator: Comparator<in Short>): List<Short> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun IntArray.sortedWith(comparator: Comparator<in Int>): List<Int> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun LongArray.sortedWith(comparator: Comparator<in Long>): List<Long> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun FloatArray.sortedWith(comparator: Comparator<in Float>): List<Float> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun DoubleArray.sortedWith(comparator: Comparator<in Double>): List<Double> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun BooleanArray.sortedWith(comparator: Comparator<in Boolean>): List<Boolean> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun CharArray.sortedWith(comparator: Comparator<in Char>): List<Char> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun <T> Array<out T>.asList(): List<T>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun ByteArray.asList(): List<Byte>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun ShortArray.asList(): List<Short>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun IntArray.asList(): List<Int>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun LongArray.asList(): List<Long>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun FloatArray.asList(): List<Float>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun DoubleArray.asList(): List<Double>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun BooleanArray.asList(): List<Boolean>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun CharArray.asList(): List<Char>\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun <T> Array<out T>.contentDeepEquals(other: Array<out T>): Boolean\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T> Array<out T>.contentDeepHashCode(): Int\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T> Array<out T>.contentDeepToString(): String\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun <T> Array<out T>.contentEquals(other: Array<out T>): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun ByteArray.contentEquals(other: ByteArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun ShortArray.contentEquals(other: ShortArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun IntArray.contentEquals(other: IntArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun LongArray.contentEquals(other: LongArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun FloatArray.contentEquals(other: FloatArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun DoubleArray.contentEquals(other: DoubleArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun BooleanArray.contentEquals(other: BooleanArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun CharArray.contentEquals(other: CharArray): Boolean\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T> Array<out T>.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun ByteArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun ShortArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun IntArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun LongArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun FloatArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun DoubleArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun BooleanArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun CharArray.contentHashCode(): Int\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T> Array<out T>.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun ByteArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun ShortArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun IntArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun LongArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun FloatArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun DoubleArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun BooleanArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun CharArray.contentToString(): String\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun <T> Array<out T>.copyInto(destination: Array<T>, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): Array<T>\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ByteArray.copyInto(destination: ByteArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ByteArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ShortArray.copyInto(destination: ShortArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ShortArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun IntArray.copyInto(destination: IntArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): IntArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun LongArray.copyInto(destination: LongArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): LongArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun FloatArray.copyInto(destination: FloatArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): FloatArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun DoubleArray.copyInto(destination: DoubleArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): DoubleArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun BooleanArray.copyInto(destination: BooleanArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): BooleanArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun CharArray.copyInto(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): CharArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOf(): Array<T>\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun ByteArray.copyOf(): ByteArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun ShortArray.copyOf(): ShortArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun IntArray.copyOf(): IntArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun LongArray.copyOf(): LongArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun FloatArray.copyOf(): FloatArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun DoubleArray.copyOf(): DoubleArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun BooleanArray.copyOf(): BooleanArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun CharArray.copyOf(): CharArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun ByteArray.copyOf(newSize: Int): ByteArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun ShortArray.copyOf(newSize: Int): ShortArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun IntArray.copyOf(newSize: Int): IntArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun LongArray.copyOf(newSize: Int): LongArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun FloatArray.copyOf(newSize: Int): FloatArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun DoubleArray.copyOf(newSize: Int): DoubleArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `false` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `false` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun BooleanArray.copyOf(newSize: Int): BooleanArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with null char (`\\u0000`) values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with null char (`\\u0000`) values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun CharArray.copyOf(newSize: Int): CharArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `null` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `null` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizingCopyOf\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOf(newSize: Int): Array<T?>\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOfRange(fromIndex: Int, toIndex: Int): Array<T>\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun ByteArray.copyOfRange(fromIndex: Int, toIndex: Int): ByteArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun ShortArray.copyOfRange(fromIndex: Int, toIndex: Int): ShortArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun IntArray.copyOfRange(fromIndex: Int, toIndex: Int): IntArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun LongArray.copyOfRange(fromIndex: Int, toIndex: Int): LongArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun FloatArray.copyOfRange(fromIndex: Int, toIndex: Int): FloatArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun DoubleArray.copyOfRange(fromIndex: Int, toIndex: Int): DoubleArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun BooleanArray.copyOfRange(fromIndex: Int, toIndex: Int): BooleanArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun CharArray.copyOfRange(fromIndex: Int, toIndex: Int): CharArray\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun <T> Array<T>.fill(element: T, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ByteArray.fill(element: Byte, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ShortArray.fill(element: Short, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun IntArray.fill(element: Int, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun LongArray.fill(element: Long, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun FloatArray.fill(element: Float, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun DoubleArray.fill(element: Double, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun BooleanArray.fill(element: Boolean, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun CharArray.fill(element: Char, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val <T> Array<out T>.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val ByteArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val ShortArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val IntArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val LongArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val FloatArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val DoubleArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val BooleanArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val CharArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns the last valid index for the array.\n */\npublic val <T> Array<out T>.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val ByteArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val ShortArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val IntArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val LongArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val FloatArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val DoubleArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val BooleanArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val CharArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(element: T): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun ByteArray.plus(element: Byte): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun ShortArray.plus(element: Short): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun IntArray.plus(element: Int): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun LongArray.plus(element: Long): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun FloatArray.plus(element: Float): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun DoubleArray.plus(element: Double): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun BooleanArray.plus(element: Boolean): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun CharArray.plus(element: Char): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(elements: Collection<T>): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun ByteArray.plus(elements: Collection<Byte>): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun ShortArray.plus(elements: Collection<Short>): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun IntArray.plus(elements: Collection<Int>): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun LongArray.plus(elements: Collection<Long>): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun FloatArray.plus(elements: Collection<Float>): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun DoubleArray.plus(elements: Collection<Double>): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun BooleanArray.plus(elements: Collection<Boolean>): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun CharArray.plus(elements: Collection<Char>): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(elements: Array<out T>): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun ByteArray.plus(elements: ByteArray): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun ShortArray.plus(elements: ShortArray): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun IntArray.plus(elements: IntArray): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun LongArray.plus(elements: LongArray): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun FloatArray.plus(elements: FloatArray): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun DoubleArray.plus(elements: DoubleArray): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun BooleanArray.plus(elements: BooleanArray): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun CharArray.plus(elements: CharArray): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.plusElement(element: T): Array<T>\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun IntArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun LongArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun ByteArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun ShortArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun DoubleArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun FloatArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun CharArray.sort(): Unit\n\n/**\n * Sorts the array in-place according to the natural order of its elements.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @sample samples.collections.Arrays.Sorting.sortArrayOfComparable\n */\npublic expect fun <T : Comparable<T>> Array<out T>.sort(): Unit\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic expect fun <T> Array<out T>.sortWith(comparator: Comparator<in T>): Unit\n\n/**\n * Returns an array of Boolean containing all of the elements of this generic array.\n */\npublic fun Array<out Boolean>.toBooleanArray(): BooleanArray {\n    return BooleanArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this generic array.\n */\npublic fun Array<out Byte>.toByteArray(): ByteArray {\n    return ByteArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Char containing all of the elements of this generic array.\n */\npublic fun Array<out Char>.toCharArray(): CharArray {\n    return CharArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Double containing all of the elements of this generic array.\n */\npublic fun Array<out Double>.toDoubleArray(): DoubleArray {\n    return DoubleArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Float containing all of the elements of this generic array.\n */\npublic fun Array<out Float>.toFloatArray(): FloatArray {\n    return FloatArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Int containing all of the elements of this generic array.\n */\npublic fun Array<out Int>.toIntArray(): IntArray {\n    return IntArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Long containing all of the elements of this generic array.\n */\npublic fun Array<out Long>.toLongArray(): LongArray {\n    return LongArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Short containing all of the elements of this generic array.\n */\npublic fun Array<out Short>.toShortArray(): ShortArray {\n    return ShortArray(size) { index -> this[index] }\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun ByteArray.toTypedArray(): Array<Byte>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun ShortArray.toTypedArray(): Array<Short>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun IntArray.toTypedArray(): Array<Int>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun LongArray.toTypedArray(): Array<Long>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun FloatArray.toTypedArray(): Array<Float>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun DoubleArray.toTypedArray(): Array<Double>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun BooleanArray.toTypedArray(): Array<Boolean>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun CharArray.toTypedArray(): Array<Char>\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <T, K, V> Array<out T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> ByteArray.associate(transform: (Byte) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> ShortArray.associate(transform: (Short) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> IntArray.associate(transform: (Int) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> LongArray.associate(transform: (Long) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> FloatArray.associate(transform: (Float) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> DoubleArray.associate(transform: (Double) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> BooleanArray.associate(transform: (Boolean) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> CharArray.associate(transform: (Char) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <T, K> Array<out T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> ByteArray.associateBy(keySelector: (Byte) -> K): Map<K, Byte> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Byte>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> ShortArray.associateBy(keySelector: (Short) -> K): Map<K, Short> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Short>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> IntArray.associateBy(keySelector: (Int) -> K): Map<K, Int> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Int>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> LongArray.associateBy(keySelector: (Long) -> K): Map<K, Long> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Long>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> FloatArray.associateBy(keySelector: (Float) -> K): Map<K, Float> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Float>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> DoubleArray.associateBy(keySelector: (Double) -> K): Map<K, Double> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Double>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> BooleanArray.associateBy(keySelector: (Boolean) -> K): Map<K, Boolean> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Boolean>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> CharArray.associateBy(keySelector: (Char) -> K): Map<K, Char> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Char>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <T, K, V> Array<out T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> ByteArray.associateBy(keySelector: (Byte) -> K, valueTransform: (Byte) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> ShortArray.associateBy(keySelector: (Short) -> K, valueTransform: (Short) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> IntArray.associateBy(keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> LongArray.associateBy(keySelector: (Long) -> K, valueTransform: (Long) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> FloatArray.associateBy(keySelector: (Float) -> K, valueTransform: (Float) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> DoubleArray.associateBy(keySelector: (Double) -> K, valueTransform: (Double) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> BooleanArray.associateBy(keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> CharArray.associateBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Array<out T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Byte>> ByteArray.associateByTo(destination: M, keySelector: (Byte) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Short>> ShortArray.associateByTo(destination: M, keySelector: (Short) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Int>> IntArray.associateByTo(destination: M, keySelector: (Int) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Long>> LongArray.associateByTo(destination: M, keySelector: (Long) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Float>> FloatArray.associateByTo(destination: M, keySelector: (Float) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Double>> DoubleArray.associateByTo(destination: M, keySelector: (Double) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Boolean>> BooleanArray.associateByTo(destination: M, keySelector: (Boolean) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Char>> CharArray.associateByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateByTo(destination: M, keySelector: (Byte) -> K, valueTransform: (Byte) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateByTo(destination: M, keySelector: (Short) -> K, valueTransform: (Short) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> IntArray.associateByTo(destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> LongArray.associateByTo(destination: M, keySelector: (Long) -> K, valueTransform: (Long) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateByTo(destination: M, keySelector: (Float) -> K, valueTransform: (Float) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateByTo(destination: M, keySelector: (Double) -> K, valueTransform: (Double) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateByTo(destination: M, keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharArray.associateByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateTo(destination: M, transform: (Byte) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateTo(destination: M, transform: (Short) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> IntArray.associateTo(destination: M, transform: (Int) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> LongArray.associateTo(destination: M, transform: (Long) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateTo(destination: M, transform: (Float) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateTo(destination: M, transform: (Double) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateTo(destination: M, transform: (Boolean) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharArray.associateTo(destination: M, transform: (Char) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Array<out T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Byte>> ByteArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Short>> ShortArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Int>> IntArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Long>> LongArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Float>> FloatArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Double>> DoubleArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Boolean>> BooleanArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Char>> CharArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun <T> Array<out T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun ByteArray.toHashSet(): HashSet<Byte> {\n    return toCollection(HashSet<Byte>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun ShortArray.toHashSet(): HashSet<Short> {\n    return toCollection(HashSet<Short>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun IntArray.toHashSet(): HashSet<Int> {\n    return toCollection(HashSet<Int>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun LongArray.toHashSet(): HashSet<Long> {\n    return toCollection(HashSet<Long>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun FloatArray.toHashSet(): HashSet<Float> {\n    return toCollection(HashSet<Float>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun DoubleArray.toHashSet(): HashSet<Double> {\n    return toCollection(HashSet<Double>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun BooleanArray.toHashSet(): HashSet<Boolean> {\n    return toCollection(HashSet<Boolean>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun CharArray.toHashSet(): HashSet<Char> {\n    return toCollection(HashSet<Char>(mapCapacity(size)))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Array<out T>.toList(): List<T> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun ByteArray.toList(): List<Byte> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun ShortArray.toList(): List<Short> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun IntArray.toList(): List<Int> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun LongArray.toList(): List<Long> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun FloatArray.toList(): List<Float> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun DoubleArray.toList(): List<Double> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun BooleanArray.toList(): List<Boolean> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun CharArray.toList(): List<Char> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun <T> Array<out T>.toMutableList(): MutableList<T> {\n    return ArrayList(this.asCollection())\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun ByteArray.toMutableList(): MutableList<Byte> {\n    val list = ArrayList<Byte>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun ShortArray.toMutableList(): MutableList<Short> {\n    val list = ArrayList<Short>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun IntArray.toMutableList(): MutableList<Int> {\n    val list = ArrayList<Int>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun LongArray.toMutableList(): MutableList<Long> {\n    val list = ArrayList<Long>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun FloatArray.toMutableList(): MutableList<Float> {\n    val list = ArrayList<Float>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun DoubleArray.toMutableList(): MutableList<Double> {\n    val list = ArrayList<Double>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun BooleanArray.toMutableList(): MutableList<Boolean> {\n    val list = ArrayList<Boolean>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun CharArray.toMutableList(): MutableList<Char> {\n    val list = ArrayList<Char>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun <T> Array<out T>.toSet(): Set<T> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ByteArray.toSet(): Set<Byte> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Byte>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ShortArray.toSet(): Set<Short> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Short>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun IntArray.toSet(): Set<Int> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Int>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun LongArray.toSet(): Set<Long> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Long>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun FloatArray.toSet(): Set<Float> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Float>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun DoubleArray.toSet(): Set<Double> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Double>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun BooleanArray.toSet(): Set<Boolean> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Boolean>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun CharArray.toSet(): Set<Char> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Char>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <T, R> Array<out T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> ByteArray.flatMap(transform: (Byte) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> ShortArray.flatMap(transform: (Short) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> IntArray.flatMap(transform: (Int) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> LongArray.flatMap(transform: (Long) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> FloatArray.flatMap(transform: (Float) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> DoubleArray.flatMap(transform: (Double) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> BooleanArray.flatMap(transform: (Boolean) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> CharArray.flatMap(transform: (Char) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.flatMapTo(destination: C, transform: (Byte) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.flatMapTo(destination: C, transform: (Short) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.flatMapTo(destination: C, transform: (Int) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.flatMapTo(destination: C, transform: (Long) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.flatMapTo(destination: C, transform: (Float) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.flatMapTo(destination: C, transform: (Double) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.flatMapTo(destination: C, transform: (Boolean) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.flatMapTo(destination: C, transform: (Char) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Array<out T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> ByteArray.groupBy(keySelector: (Byte) -> K): Map<K, List<Byte>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Byte>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> ShortArray.groupBy(keySelector: (Short) -> K): Map<K, List<Short>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Short>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> IntArray.groupBy(keySelector: (Int) -> K): Map<K, List<Int>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Int>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> LongArray.groupBy(keySelector: (Long) -> K): Map<K, List<Long>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Long>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> FloatArray.groupBy(keySelector: (Float) -> K): Map<K, List<Float>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Float>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> DoubleArray.groupBy(keySelector: (Double) -> K): Map<K, List<Double>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Double>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> BooleanArray.groupBy(keySelector: (Boolean) -> K): Map<K, List<Boolean>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Boolean>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> CharArray.groupBy(keySelector: (Char) -> K): Map<K, List<Char>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Char>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Array<out T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> ByteArray.groupBy(keySelector: (Byte) -> K, valueTransform: (Byte) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> ShortArray.groupBy(keySelector: (Short) -> K, valueTransform: (Short) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> IntArray.groupBy(keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> LongArray.groupBy(keySelector: (Long) -> K, valueTransform: (Long) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> FloatArray.groupBy(keySelector: (Float) -> K, valueTransform: (Float) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> DoubleArray.groupBy(keySelector: (Double) -> K, valueTransform: (Double) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> BooleanArray.groupBy(keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> CharArray.groupBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Array<out T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Byte>>> ByteArray.groupByTo(destination: M, keySelector: (Byte) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Byte>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Short>>> ShortArray.groupByTo(destination: M, keySelector: (Short) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Short>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Int>>> IntArray.groupByTo(destination: M, keySelector: (Int) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Int>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Long>>> LongArray.groupByTo(destination: M, keySelector: (Long) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Long>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Float>>> FloatArray.groupByTo(destination: M, keySelector: (Float) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Float>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Double>>> DoubleArray.groupByTo(destination: M, keySelector: (Double) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Double>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Boolean>>> BooleanArray.groupByTo(destination: M, keySelector: (Boolean) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Boolean>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Char>>> CharArray.groupByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Char>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Array<out T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ByteArray.groupByTo(destination: M, keySelector: (Byte) -> K, valueTransform: (Byte) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ShortArray.groupByTo(destination: M, keySelector: (Short) -> K, valueTransform: (Short) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> IntArray.groupByTo(destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> LongArray.groupByTo(destination: M, keySelector: (Long) -> K, valueTransform: (Long) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> FloatArray.groupByTo(destination: M, keySelector: (Float) -> K, valueTransform: (Float) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> DoubleArray.groupByTo(destination: M, keySelector: (Double) -> K, valueTransform: (Double) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> BooleanArray.groupByTo(destination: M, keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> CharArray.groupByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from an array to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Array<out T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <T, R> Array<out T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> ByteArray.map(transform: (Byte) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> ShortArray.map(transform: (Short) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> IntArray.map(transform: (Int) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> LongArray.map(transform: (Long) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> FloatArray.map(transform: (Float) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> DoubleArray.map(transform: (Double) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> BooleanArray.map(transform: (Boolean) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> CharArray.map(transform: (Char) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Array<out T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> ByteArray.mapIndexed(transform: (index: Int, Byte) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> ShortArray.mapIndexed(transform: (index: Int, Short) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> IntArray.mapIndexed(transform: (index: Int, Int) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> LongArray.mapIndexed(transform: (index: Int, Long) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> FloatArray.mapIndexed(transform: (index: Int, Float) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> DoubleArray.mapIndexed(transform: (index: Int, Double) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> BooleanArray.mapIndexed(transform: (index: Int, Boolean) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> CharArray.mapIndexed(transform: (index: Int, Char) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Array<out T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.mapIndexedTo(destination: C, transform: (index: Int, Byte) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.mapIndexedTo(destination: C, transform: (index: Int, Short) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.mapIndexedTo(destination: C, transform: (index: Int, Int) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.mapIndexedTo(destination: C, transform: (index: Int, Long) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.mapIndexedTo(destination: C, transform: (index: Int, Float) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.mapIndexedTo(destination: C, transform: (index: Int, Double) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.mapIndexedTo(destination: C, transform: (index: Int, Boolean) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.mapIndexedTo(destination: C, transform: (index: Int, Char) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <T, R : Any> Array<out T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original array\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.mapTo(destination: C, transform: (Byte) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.mapTo(destination: C, transform: (Short) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.mapTo(destination: C, transform: (Int) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.mapTo(destination: C, transform: (Long) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.mapTo(destination: C, transform: (Float) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.mapTo(destination: C, transform: (Double) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.mapTo(destination: C, transform: (Boolean) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.mapTo(destination: C, transform: (Char) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun <T> Array<out T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun ByteArray.withIndex(): Iterable<IndexedValue<Byte>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun ShortArray.withIndex(): Iterable<IndexedValue<Short>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun IntArray.withIndex(): Iterable<IndexedValue<Int>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun LongArray.withIndex(): Iterable<IndexedValue<Long>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun FloatArray.withIndex(): Iterable<IndexedValue<Float>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun DoubleArray.withIndex(): Iterable<IndexedValue<Double>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun BooleanArray.withIndex(): Iterable<IndexedValue<Boolean>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun CharArray.withIndex(): Iterable<IndexedValue<Char>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun <T> Array<out T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun ByteArray.distinct(): List<Byte> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun ShortArray.distinct(): List<Short> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun IntArray.distinct(): List<Int> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun LongArray.distinct(): List<Long> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun FloatArray.distinct(): List<Float> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun DoubleArray.distinct(): List<Double> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun BooleanArray.distinct(): List<Boolean> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun CharArray.distinct(): List<Char> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <T, K> Array<out T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> ByteArray.distinctBy(selector: (Byte) -> K): List<Byte> {\n    val set = HashSet<K>()\n    val list = ArrayList<Byte>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> ShortArray.distinctBy(selector: (Short) -> K): List<Short> {\n    val set = HashSet<K>()\n    val list = ArrayList<Short>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> IntArray.distinctBy(selector: (Int) -> K): List<Int> {\n    val set = HashSet<K>()\n    val list = ArrayList<Int>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> LongArray.distinctBy(selector: (Long) -> K): List<Long> {\n    val set = HashSet<K>()\n    val list = ArrayList<Long>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> FloatArray.distinctBy(selector: (Float) -> K): List<Float> {\n    val set = HashSet<K>()\n    val list = ArrayList<Float>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> DoubleArray.distinctBy(selector: (Double) -> K): List<Double> {\n    val set = HashSet<K>()\n    val list = ArrayList<Double>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> BooleanArray.distinctBy(selector: (Boolean) -> K): List<Boolean> {\n    val set = HashSet<K>()\n    val list = ArrayList<Boolean>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> CharArray.distinctBy(selector: (Char) -> K): List<Char> {\n    val set = HashSet<K>()\n    val list = ArrayList<Char>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun <T> Array<out T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun ByteArray.intersect(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun ShortArray.intersect(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun IntArray.intersect(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun LongArray.intersect(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun FloatArray.intersect(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun DoubleArray.intersect(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun BooleanArray.intersect(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun CharArray.intersect(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun <T> Array<out T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ByteArray.subtract(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ShortArray.subtract(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun IntArray.subtract(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun LongArray.subtract(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun FloatArray.subtract(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun DoubleArray.subtract(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun BooleanArray.subtract(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun CharArray.subtract(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun <T> Array<out T>.toMutableSet(): MutableSet<T> {\n    val set = LinkedHashSet<T>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ByteArray.toMutableSet(): MutableSet<Byte> {\n    val set = LinkedHashSet<Byte>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ShortArray.toMutableSet(): MutableSet<Short> {\n    val set = LinkedHashSet<Short>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun IntArray.toMutableSet(): MutableSet<Int> {\n    val set = LinkedHashSet<Int>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun LongArray.toMutableSet(): MutableSet<Long> {\n    val set = LinkedHashSet<Long>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun FloatArray.toMutableSet(): MutableSet<Float> {\n    val set = LinkedHashSet<Float>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun DoubleArray.toMutableSet(): MutableSet<Double> {\n    val set = LinkedHashSet<Double>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun BooleanArray.toMutableSet(): MutableSet<Boolean> {\n    val set = LinkedHashSet<Boolean>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun CharArray.toMutableSet(): MutableSet<Char> {\n    val set = LinkedHashSet<Char>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun <T> Array<out T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun ByteArray.union(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun ShortArray.union(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun IntArray.union(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun LongArray.union(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun FloatArray.union(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun DoubleArray.union(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun BooleanArray.union(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun CharArray.union(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Array<out T>.all(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun ByteArray.all(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun ShortArray.all(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun IntArray.all(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun LongArray.all(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun FloatArray.all(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun DoubleArray.all(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun BooleanArray.all(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun CharArray.all(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Array<out T>.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun ByteArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun ShortArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun IntArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun LongArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun FloatArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun DoubleArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun BooleanArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun CharArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Array<out T>.any(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun ByteArray.any(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun ShortArray.any(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun IntArray.any(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun LongArray.any(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun FloatArray.any(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun DoubleArray.any(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun BooleanArray.any(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun CharArray.any(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Array<out T>.count(predicate: (T) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun ByteArray.count(predicate: (Byte) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun ShortArray.count(predicate: (Short) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun IntArray.count(predicate: (Int) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun LongArray.count(predicate: (Long) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun FloatArray.count(predicate: (Float) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun DoubleArray.count(predicate: (Double) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun BooleanArray.count(predicate: (Boolean) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun CharArray.count(predicate: (Char) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <T, R> Array<out T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> ByteArray.fold(initial: R, operation: (acc: R, Byte) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> ShortArray.fold(initial: R, operation: (acc: R, Short) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> IntArray.fold(initial: R, operation: (acc: R, Int) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> LongArray.fold(initial: R, operation: (acc: R, Long) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> FloatArray.fold(initial: R, operation: (acc: R, Float) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> DoubleArray.fold(initial: R, operation: (acc: R, Double) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> BooleanArray.fold(initial: R, operation: (acc: R, Boolean) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> CharArray.fold(initial: R, operation: (acc: R, Char) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Byte) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Short) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Int) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Long) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Float) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Double) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Boolean) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> ByteArray.foldRight(initial: R, operation: (Byte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> ShortArray.foldRight(initial: R, operation: (Short, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> IntArray.foldRight(initial: R, operation: (Int, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> LongArray.foldRight(initial: R, operation: (Long, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> FloatArray.foldRight(initial: R, operation: (Float, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> DoubleArray.foldRight(initial: R, operation: (Double, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> BooleanArray.foldRight(initial: R, operation: (Boolean, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> CharArray.foldRight(initial: R, operation: (Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldRightIndexed(initial: R, operation: (index: Int, Byte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldRightIndexed(initial: R, operation: (index: Int, Short, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldRightIndexed(initial: R, operation: (index: Int, Int, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldRightIndexed(initial: R, operation: (index: Int, Long, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldRightIndexed(initial: R, operation: (index: Int, Float, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldRightIndexed(initial: R, operation: (index: Int, Double, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldRightIndexed(initial: R, operation: (index: Int, Boolean, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldRightIndexed(initial: R, operation: (index: Int, Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun <T> Array<out T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun ByteArray.forEach(action: (Byte) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun ShortArray.forEach(action: (Short) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun IntArray.forEach(action: (Int) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun LongArray.forEach(action: (Long) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun FloatArray.forEach(action: (Float) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun DoubleArray.forEach(action: (Double) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun BooleanArray.forEach(action: (Boolean) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun CharArray.forEach(action: (Char) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun <T> Array<out T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun ByteArray.forEachIndexed(action: (index: Int, Byte) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun ShortArray.forEachIndexed(action: (index: Int, Short) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun IntArray.forEachIndexed(action: (index: Int, Int) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun LongArray.forEachIndexed(action: (index: Int, Long) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun FloatArray.forEachIndexed(action: (index: Int, Float) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun DoubleArray.forEachIndexed(action: (index: Int, Double) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun BooleanArray.forEachIndexed(action: (index: Int, Boolean) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun CharArray.forEachIndexed(action: (index: Int, Char) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Double>.max(): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Float>.max(): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Array<out T>.max(): T? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun ByteArray.max(): Byte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun ShortArray.max(): Short? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun IntArray.max(): Int? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun LongArray.max(): Long? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun FloatArray.max(): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun DoubleArray.max(): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun CharArray.max(): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.maxBy(selector: (T) -> R): T? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> ByteArray.maxBy(selector: (Byte) -> R): Byte? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> ShortArray.maxBy(selector: (Short) -> R): Short? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> IntArray.maxBy(selector: (Int) -> R): Int? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> LongArray.maxBy(selector: (Long) -> R): Long? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> FloatArray.maxBy(selector: (Float) -> R): Float? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> DoubleArray.maxBy(selector: (Double) -> R): Double? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> BooleanArray.maxBy(selector: (Boolean) -> R): Boolean? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> CharArray.maxBy(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Array<out T>.maxWith(comparator: Comparator<in T>): T? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ByteArray.maxWith(comparator: Comparator<in Byte>): Byte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ShortArray.maxWith(comparator: Comparator<in Short>): Short? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun IntArray.maxWith(comparator: Comparator<in Int>): Int? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun LongArray.maxWith(comparator: Comparator<in Long>): Long? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun FloatArray.maxWith(comparator: Comparator<in Float>): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun DoubleArray.maxWith(comparator: Comparator<in Double>): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun BooleanArray.maxWith(comparator: Comparator<in Boolean>): Boolean? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun CharArray.maxWith(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Double>.min(): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Float>.min(): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Array<out T>.min(): T? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun ByteArray.min(): Byte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun ShortArray.min(): Short? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun IntArray.min(): Int? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun LongArray.min(): Long? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun FloatArray.min(): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun DoubleArray.min(): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun CharArray.min(): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.minBy(selector: (T) -> R): T? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> ByteArray.minBy(selector: (Byte) -> R): Byte? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> ShortArray.minBy(selector: (Short) -> R): Short? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> IntArray.minBy(selector: (Int) -> R): Int? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> LongArray.minBy(selector: (Long) -> R): Long? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> FloatArray.minBy(selector: (Float) -> R): Float? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> DoubleArray.minBy(selector: (Double) -> R): Double? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> BooleanArray.minBy(selector: (Boolean) -> R): Boolean? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> CharArray.minBy(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Array<out T>.minWith(comparator: Comparator<in T>): T? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ByteArray.minWith(comparator: Comparator<in Byte>): Byte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ShortArray.minWith(comparator: Comparator<in Short>): Short? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun IntArray.minWith(comparator: Comparator<in Int>): Int? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun LongArray.minWith(comparator: Comparator<in Long>): Long? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun FloatArray.minWith(comparator: Comparator<in Float>): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun DoubleArray.minWith(comparator: Comparator<in Double>): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun BooleanArray.minWith(comparator: Comparator<in Boolean>): Boolean? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun CharArray.minWith(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Array<out T>.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun ByteArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun ShortArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun IntArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun LongArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun FloatArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun DoubleArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun BooleanArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun CharArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Array<out T>.none(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun ByteArray.none(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun ShortArray.none(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun IntArray.none(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun LongArray.none(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun FloatArray.none(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun DoubleArray.none(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun BooleanArray.none(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun CharArray.none(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Array<out T>.reduce(operation: (acc: S, T) -> S): S {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ByteArray.reduce(operation: (acc: Byte, Byte) -> Byte): Byte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ShortArray.reduce(operation: (acc: Short, Short) -> Short): Short {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun IntArray.reduce(operation: (acc: Int, Int) -> Int): Int {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun LongArray.reduce(operation: (acc: Long, Long) -> Long): Long {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun FloatArray.reduce(operation: (acc: Float, Float) -> Float): Float {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun DoubleArray.reduce(operation: (acc: Double, Double) -> Double): Double {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun BooleanArray.reduce(operation: (acc: Boolean, Boolean) -> Boolean): Boolean {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun CharArray.reduce(operation: (acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Array<out T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ByteArray.reduceIndexed(operation: (index: Int, acc: Byte, Byte) -> Byte): Byte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ShortArray.reduceIndexed(operation: (index: Int, acc: Short, Short) -> Short): Short {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun IntArray.reduceIndexed(operation: (index: Int, acc: Int, Int) -> Int): Int {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun LongArray.reduceIndexed(operation: (index: Int, acc: Long, Long) -> Long): Long {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun FloatArray.reduceIndexed(operation: (index: Int, acc: Float, Float) -> Float): Float {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun DoubleArray.reduceIndexed(operation: (index: Int, acc: Double, Double) -> Double): Double {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun BooleanArray.reduceIndexed(operation: (index: Int, acc: Boolean, Boolean) -> Boolean): Boolean {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun CharArray.reduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Array<out T>.reduceOrNull(operation: (acc: S, T) -> S): S? {\n    if (isEmpty())\n        return null\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun ByteArray.reduceOrNull(operation: (acc: Byte, Byte) -> Byte): Byte? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun ShortArray.reduceOrNull(operation: (acc: Short, Short) -> Short): Short? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun IntArray.reduceOrNull(operation: (acc: Int, Int) -> Int): Int? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun LongArray.reduceOrNull(operation: (acc: Long, Long) -> Long): Long? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun FloatArray.reduceOrNull(operation: (acc: Float, Float) -> Float): Float? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun DoubleArray.reduceOrNull(operation: (acc: Double, Double) -> Double): Double? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun BooleanArray.reduceOrNull(operation: (acc: Boolean, Boolean) -> Boolean): Boolean? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun CharArray.reduceOrNull(operation: (acc: Char, Char) -> Char): Char? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> Array<out T>.reduceRight(operation: (T, acc: S) -> S): S {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ByteArray.reduceRight(operation: (Byte, acc: Byte) -> Byte): Byte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ShortArray.reduceRight(operation: (Short, acc: Short) -> Short): Short {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun IntArray.reduceRight(operation: (Int, acc: Int) -> Int): Int {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun LongArray.reduceRight(operation: (Long, acc: Long) -> Long): Long {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun FloatArray.reduceRight(operation: (Float, acc: Float) -> Float): Float {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun DoubleArray.reduceRight(operation: (Double, acc: Double) -> Double): Double {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun BooleanArray.reduceRight(operation: (Boolean, acc: Boolean) -> Boolean): Boolean {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun CharArray.reduceRight(operation: (Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> Array<out T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ByteArray.reduceRightIndexed(operation: (index: Int, Byte, acc: Byte) -> Byte): Byte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ShortArray.reduceRightIndexed(operation: (index: Int, Short, acc: Short) -> Short): Short {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun IntArray.reduceRightIndexed(operation: (index: Int, Int, acc: Int) -> Int): Int {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun LongArray.reduceRightIndexed(operation: (index: Int, Long, acc: Long) -> Long): Long {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun FloatArray.reduceRightIndexed(operation: (index: Int, Float, acc: Float) -> Float): Float {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun DoubleArray.reduceRightIndexed(operation: (index: Int, Double, acc: Double) -> Double): Double {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun BooleanArray.reduceRightIndexed(operation: (index: Int, Boolean, acc: Boolean) -> Boolean): Boolean {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun CharArray.reduceRightIndexed(operation: (index: Int, Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Array<out T>.reduceRightOrNull(operation: (T, acc: S) -> S): S? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun ByteArray.reduceRightOrNull(operation: (Byte, acc: Byte) -> Byte): Byte? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun ShortArray.reduceRightOrNull(operation: (Short, acc: Short) -> Short): Short? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun IntArray.reduceRightOrNull(operation: (Int, acc: Int) -> Int): Int? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun LongArray.reduceRightOrNull(operation: (Long, acc: Long) -> Long): Long? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun FloatArray.reduceRightOrNull(operation: (Float, acc: Float) -> Float): Float? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun DoubleArray.reduceRightOrNull(operation: (Double, acc: Double) -> Double): Double? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun BooleanArray.reduceRightOrNull(operation: (Boolean, acc: Boolean) -> Boolean): Boolean? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun CharArray.reduceRightOrNull(operation: (Char, acc: Char) -> Char): Char? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <T, R> Array<out T>.scan(initial: R, operation: (acc: R, T) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.scan(initial: R, operation: (acc: R, Byte) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.scan(initial: R, operation: (acc: R, Short) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.scan(initial: R, operation: (acc: R, Int) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.scan(initial: R, operation: (acc: R, Long) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.scan(initial: R, operation: (acc: R, Float) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.scan(initial: R, operation: (acc: R, Double) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.scan(initial: R, operation: (acc: R, Boolean) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.scan(initial: R, operation: (acc: R, Char) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <T, R> Array<out T>.scanIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Byte) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Short) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Int) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Long) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Float) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Double) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Boolean) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and the element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Array<out T>.scanReduce(operation: (acc: S, T) -> S): List<S> {\n    if (isEmpty()) return emptyList()\n    var accumulator: S = this[0]\n    val result = ArrayList<S>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.scanReduce(operation: (acc: Byte, Byte) -> Byte): List<Byte> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Byte>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.scanReduce(operation: (acc: Short, Short) -> Short): List<Short> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Short>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.scanReduce(operation: (acc: Int, Int) -> Int): List<Int> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Int>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.scanReduce(operation: (acc: Long, Long) -> Long): List<Long> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Long>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.scanReduce(operation: (acc: Float, Float) -> Float): List<Float> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Float>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.scanReduce(operation: (acc: Double, Double) -> Double): List<Double> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Double>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.scanReduce(operation: (acc: Boolean, Boolean) -> Boolean): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Boolean>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.scanReduce(operation: (acc: Char, Char) -> Char): List<Char> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Char>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Array<out T>.scanReduceIndexed(operation: (index: Int, acc: S, T) -> S): List<S> {\n    if (isEmpty()) return emptyList()\n    var accumulator: S = this[0]\n    val result = ArrayList<S>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.scanReduceIndexed(operation: (index: Int, acc: Byte, Byte) -> Byte): List<Byte> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Byte>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.scanReduceIndexed(operation: (index: Int, acc: Short, Short) -> Short): List<Short> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Short>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.scanReduceIndexed(operation: (index: Int, acc: Int, Int) -> Int): List<Int> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Int>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.scanReduceIndexed(operation: (index: Int, acc: Long, Long) -> Long): List<Long> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Long>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.scanReduceIndexed(operation: (index: Int, acc: Float, Float) -> Float): List<Float> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Float>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.scanReduceIndexed(operation: (index: Int, acc: Double, Double) -> Double): List<Double> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Double>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.scanReduceIndexed(operation: (index: Int, acc: Boolean, Boolean) -> Boolean): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Boolean>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.scanReduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): List<Char> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Char>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun <T> Array<out T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ByteArray.sumBy(selector: (Byte) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ShortArray.sumBy(selector: (Short) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun IntArray.sumBy(selector: (Int) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun LongArray.sumBy(selector: (Long) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun FloatArray.sumBy(selector: (Float) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun DoubleArray.sumBy(selector: (Double) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun BooleanArray.sumBy(selector: (Boolean) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun CharArray.sumBy(selector: (Char) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun <T> Array<out T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ByteArray.sumByDouble(selector: (Byte) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ShortArray.sumByDouble(selector: (Short) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun IntArray.sumByDouble(selector: (Int) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun LongArray.sumByDouble(selector: (Long) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun FloatArray.sumByDouble(selector: (Float) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun DoubleArray.sumByDouble(selector: (Double) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun BooleanArray.sumByDouble(selector: (Boolean) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun CharArray.sumByDouble(selector: (Char) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Array<T?>.requireNoNulls(): Array<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Array<T>\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun <T> Array<out T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun ByteArray.partition(predicate: (Byte) -> Boolean): Pair<List<Byte>, List<Byte>> {\n    val first = ArrayList<Byte>()\n    val second = ArrayList<Byte>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun ShortArray.partition(predicate: (Short) -> Boolean): Pair<List<Short>, List<Short>> {\n    val first = ArrayList<Short>()\n    val second = ArrayList<Short>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun IntArray.partition(predicate: (Int) -> Boolean): Pair<List<Int>, List<Int>> {\n    val first = ArrayList<Int>()\n    val second = ArrayList<Int>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun LongArray.partition(predicate: (Long) -> Boolean): Pair<List<Long>, List<Long>> {\n    val first = ArrayList<Long>()\n    val second = ArrayList<Long>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun FloatArray.partition(predicate: (Float) -> Boolean): Pair<List<Float>, List<Float>> {\n    val first = ArrayList<Float>()\n    val second = ArrayList<Float>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun DoubleArray.partition(predicate: (Double) -> Boolean): Pair<List<Double>, List<Double>> {\n    val first = ArrayList<Double>()\n    val second = ArrayList<Double>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun BooleanArray.partition(predicate: (Boolean) -> Boolean): Pair<List<Boolean>, List<Boolean>> {\n    val first = ArrayList<Boolean>()\n    val second = ArrayList<Boolean>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun CharArray.partition(predicate: (Char) -> Boolean): Pair<List<Char>, List<Char>> {\n    val first = ArrayList<Char>()\n    val second = ArrayList<Char>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Array<out T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ByteArray.zip(other: Array<out R>): List<Pair<Byte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ShortArray.zip(other: Array<out R>): List<Pair<Short, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> IntArray.zip(other: Array<out R>): List<Pair<Int, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> LongArray.zip(other: Array<out R>): List<Pair<Long, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> FloatArray.zip(other: Array<out R>): List<Pair<Float, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> DoubleArray.zip(other: Array<out R>): List<Pair<Double, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> BooleanArray.zip(other: Array<out R>): List<Pair<Boolean, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> CharArray.zip(other: Array<out R>): List<Pair<Char, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Array<out T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ByteArray.zip(other: Array<out R>, transform: (a: Byte, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ShortArray.zip(other: Array<out R>, transform: (a: Short, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> IntArray.zip(other: Array<out R>, transform: (a: Int, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> LongArray.zip(other: Array<out R>, transform: (a: Long, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> FloatArray.zip(other: Array<out R>, transform: (a: Float, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> DoubleArray.zip(other: Array<out R>, transform: (a: Double, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> BooleanArray.zip(other: Array<out R>, transform: (a: Boolean, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> CharArray.zip(other: Array<out R>, transform: (a: Char, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Array<out T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ByteArray.zip(other: Iterable<R>): List<Pair<Byte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ShortArray.zip(other: Iterable<R>): List<Pair<Short, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> IntArray.zip(other: Iterable<R>): List<Pair<Int, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> LongArray.zip(other: Iterable<R>): List<Pair<Long, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> FloatArray.zip(other: Iterable<R>): List<Pair<Float, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> DoubleArray.zip(other: Iterable<R>): List<Pair<Double, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> BooleanArray.zip(other: Iterable<R>): List<Pair<Boolean, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> CharArray.zip(other: Iterable<R>): List<Pair<Char, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Array<out T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ByteArray.zip(other: Iterable<R>, transform: (a: Byte, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ShortArray.zip(other: Iterable<R>, transform: (a: Short, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> IntArray.zip(other: Iterable<R>, transform: (a: Int, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> LongArray.zip(other: Iterable<R>, transform: (a: Long, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> FloatArray.zip(other: Iterable<R>, transform: (a: Float, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> DoubleArray.zip(other: Iterable<R>, transform: (a: Double, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> BooleanArray.zip(other: Iterable<R>, transform: (a: Boolean, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> CharArray.zip(other: Iterable<R>, transform: (a: Char, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun ByteArray.zip(other: ByteArray): List<Pair<Byte, Byte>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun ShortArray.zip(other: ShortArray): List<Pair<Short, Short>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun IntArray.zip(other: IntArray): List<Pair<Int, Int>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun LongArray.zip(other: LongArray): List<Pair<Long, Long>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun FloatArray.zip(other: FloatArray): List<Pair<Float, Float>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun DoubleArray.zip(other: DoubleArray): List<Pair<Double, Double>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun BooleanArray.zip(other: BooleanArray): List<Pair<Boolean, Boolean>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun CharArray.zip(other: CharArray): List<Pair<Char, Char>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> ByteArray.zip(other: ByteArray, transform: (a: Byte, b: Byte) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> ShortArray.zip(other: ShortArray, transform: (a: Short, b: Short) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> IntArray.zip(other: IntArray, transform: (a: Int, b: Int) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> LongArray.zip(other: LongArray, transform: (a: Long, b: Long) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> FloatArray.zip(other: FloatArray, transform: (a: Float, b: Float) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> DoubleArray.zip(other: DoubleArray, transform: (a: Double, b: Double) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> BooleanArray.zip(other: BooleanArray, transform: (a: Boolean, b: Boolean) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> CharArray.zip(other: CharArray, transform: (a: Char, b: Char) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Array<out T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> ByteArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Byte) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> ShortArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Short) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> IntArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Int) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> LongArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Long) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> FloatArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Float) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> DoubleArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Double) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> BooleanArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Boolean) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> CharArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Char) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Array<out T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun ByteArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Byte) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun ShortArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Short) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun IntArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Int) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun LongArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Long) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun FloatArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Float) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun DoubleArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Double) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun BooleanArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Boolean) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun CharArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Char) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun <T> Array<out T>.asIterable(): Iterable<T> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun ByteArray.asIterable(): Iterable<Byte> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun ShortArray.asIterable(): Iterable<Short> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun IntArray.asIterable(): Iterable<Int> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun LongArray.asIterable(): Iterable<Long> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun FloatArray.asIterable(): Iterable<Float> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun DoubleArray.asIterable(): Iterable<Double> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun BooleanArray.asIterable(): Iterable<Boolean> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun CharArray.asIterable(): Iterable<Char> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun <T> Array<out T>.asSequence(): Sequence<T> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun ByteArray.asSequence(): Sequence<Byte> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun ShortArray.asSequence(): Sequence<Short> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun IntArray.asSequence(): Sequence<Int> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun LongArray.asSequence(): Sequence<Long> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun FloatArray.asSequence(): Sequence<Float> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun DoubleArray.asSequence(): Sequence<Double> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun BooleanArray.asSequence(): Sequence<Boolean> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun CharArray.asSequence(): Sequence<Char> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Array<out Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Array<out Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Array<out Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Array<out Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Array<out Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Array<out Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun ByteArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun ShortArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun IntArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun LongArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun FloatArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun DoubleArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Array<out Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Array<out Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Array<out Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Array<out Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Array<out Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Array<out Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun ByteArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun ShortArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun IntArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun LongArray.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun FloatArray.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun DoubleArray.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n",null,null,null,null],"names":[],"mappings":"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AAS,IAAT,EAAa,IAAb,EEvFA,IFuFA,EEvFI,IFuFJ,CAAN,GAAiC,eAAM,kBEvFjC,IFuFiC,EEvF7B,IFuF6B,EEvFzB,IFuFyB,EEvFrB,IFuFqB,CAAvC,GAAkE,eAAM,kBEvF1D,IFuF0D,EEvFtD,IFuFsD,EEvFlD,EFuFkD,EEvF9C,EFuF8C,C;UAClF,mBAAqB,YAAJ,KAAI,C;UA0B7B,oBtC60BgD,MAAW,KsC70BrC,YtC60BqC,EsC70BzB,EtC60ByB,C;UsC50B3D,WAAS,MAAM,a;UACf,kBAAY,GAAZ,C;UACA,kBAAY,GAAZ,C;UACA,kBAAY,GAAZ,C;UACA,kBAAY,GAAZ,C;UACA,yBAAmB,CAAnB,C;UAhCsC,oCExFd,IFwFc,EExFV,IFwFU,EExFN,IFwFM,EExFF,IFwFE,EExFE,EFwFF,EExFM,EFwFN,CAiCtC,CAAQ,GAAR,EAAa,2CAAb,C;UAIA,eAAU,CAAV,QAAkB,aAAlB,Q;YACI,cAAY,MAAI,I;YAtCkB,oCExFd,IFwFc,EExFV,IFwFU,EExFN,IFwFM,EExFF,IFwFE,EExFE,EFwFF,EExFM,EFwFN,CAwClC,CAAQ,OAAR,EAAe,0BAxCmH,4BAc1H,sBAd0H,CAwCnH,qDAAf,C;;;UAvCU,OEzF0B,E;UFyFT,OEzFa,E;UF8DE,oBA4BtC,CAAM,KAAN,C;UEjGI,K;aASA,C;UFoGA,sBATJ,CAAK,IAAL,EAAS,IAAT,EAAa,KAAb,C;UA/BsC,oBAgCtC,CAAM,IAAN,C;UAjCsC,kBAkCtC,CAAM,IAAN,C;UE7FI,K;;;IF2DkC,kBAqC9C,CAAM,KAAN,C;IAKA,OAAO,G;EACX,C;EAEA,+B;IAAc,mB;MAAA,MAAkB,gB;IAAoE,KnB/FhG,CmB+FsF,GnB/FtF,C;ImB+FsF,U;G;2GAC1F,yB;IAAA,+D;IAAA,oD;IAAA,sC;MAAqB,mB;QAAA,MAAkB,qB;MAAc,uB;QAAA,0B;MAAiF,GAAW,kB;MAA6B,KnBhG1K,CmBgGkI,GnBhGlI,C;MmBgGkI,U;K;GAAtI,C;uHAEA,yB;IAAA,6B;ItC60BA,iB;IsCj0BiB,+D;MAAA,uB;QACT,kBAAQ,C;QACR,kBAAQ,C;QA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;IACA,kD;IACA,gD;G;;EAFA,oC;IAAA,oB;IAAA,4B;G;;EACA,sC;IAAA,oB;IAAA,8B;G;;EACA,qC;IAAA,oB;IAAA,6B;G;;;;;;EAHJ,0B;IAAA,8F;G;;EAAA,+B;IAAA,a;MAAA,Y;QAAA,iC;MAAA,c;QAAA,mC;MAAA,a;QAAA,kC;MAAA,QAAA,yE;;G;;ECAA,iC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,+B;IAAA,kC;K;IACI,kD;IACA,kD;IACA,kD;IAEA,gC;G;;EAJA,sC;IAAA,qB;IAAA,8B;G;;EACA,sC;IAAA,qB;IAAA,8B;G;;EACA,sC;IAAA,qB;IAAA,8B;G;EAEA,8B;IAAA,kC;IACI,cAAa,4B;G;;;;;;;EADjB,0C;IAAA,qB;IAAA,yC;MAAA,wB;KAAA,kC;G;;;;;;EALJ,2B;IAAA,iG;G;;EAAA,gC;IAAA,a;MAAA,a;QAAA,mC;MAAA,a;QAAA,mC;MAAA,a;QAAA,mC;MAAA,QAAA,0E;;G;;ET8LiB,iE;IAAA,uB;MACT,kBAAQ,C;MACR,kBAAQ,C;MACZ,W;IAAA,C;G;EAImB,mI;IAAA,uB;MAEP,iC;MAAA,iD;MAAA,mC;MAAA,mC;MAAA,mC;MAAA,mC;MACA,oB;MACA,2D;MACA,oBAAQ,iB;MACR,oBAAQ,iB;MAGZ,kBAAQ,C;MACR,kBAAQ,C;MACZ,W;IAAA,C;G;EAlBS,iE;IAAA,uB;MACT,kBAAQ,C;MACR,kBAAQ,C;MACZ,W;IAAA,C;G;EAImB,mI;IAAA,uB;MAEP,iC;MAAA,iD;MAAA,mC;MAAA,mC;MAAA,mC;MAAA,mC;MACA,oB;MACA,2D;MACA,oBAAQ,iB;MACR,oBAAQ,iB;MAGZ,kBAAQ,C;MACR,kBAAQ,C;MACZ,W;IAAA,C;G;EA7E0C,kC;IAAC,W;EAAA,C;EAoBT,6G;IAAA,6B;MAAuB,SAAS,Y;MAAT,SAAa,Y;MAAb,SAAiB,U;MAAjB,SAAqB,U;MT9E1E,SAAU,IS8E4E,K;MT7EtF,QAAQ,KAAK,E;MACb,QS4EsF,KT5E9E,GS4E8E,K;MT3EtF,QAAQ,IAAI,EAAJ,GS2E8E,K;MAAiB,ITzEnG,IAAI,EAAJ,GAAS,IAAI,EAAb,G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AAR,EAAe,0BA9C2G,4BUyBrE,kCVzBqE,CA8C3G,2CAAf,C;;;UA7CU,OE5FiB,E;UF4FA,OE5FI,E;UFuEW,oBAsBtC,CAAM,KAAN,C;UElGI,K;aAOA,C;UACI,WQiHZ,IRjHqB,KAAK,gBAAM,YAAN,EAAM,oBAAN,U;UACd,WQgHZ,IRhHqB,KAAK,gBAAM,YAAN,EAAM,oBAAN,U;UACd,WQ+GZ,IR/GqB,KAAK,gBAAM,aAAN,EAAM,qBAAN,W;UACd,WQ8GZ,IR9GqB,KAAK,gBAAM,aAAN,EAAM,qBAAN,W;UACd,SQ6GZ,IR7GqB,KAAK,gBAAM,aAAN,EAAM,qBAAN,W;UACd,SQ4GZ,IR5GqB,KAAK,gBAAM,aAAN,EAAM,qBAAN,W;UFwFtB,YAAU,eAAM,kBAAS,IAAT,EAAa,IAAb,EEvFA,IFuFA,EEvFI,IFuFJ,CAAN,GAAiC,eAAM,kBEvFjC,IFuFiC,EEvF7B,IFuF6B,EEvFzB,IFuFyB,EEvFrB,IFuFqB,CAAvC,GAAkE,eAAM,kBEvF1D,IFuF0D,EEvFtD,IFuFsD,EEvFlD,EFuFkD,EEvF9C,EFuF8C,C;UAClF,mBAAqB,YAAJ,KAAI,C;UA0B7B,oBtC60BgD,MAAW,KsC70BrC,YtC60BqC,EsC70BzB,EtC60ByB,C;UsC50B3D,WAAS,MAAM,a;UACf,kBAAY,GAAZ,C;UACA,kBAAY,GAAZ,C;UACA,kBAAY,GAAZ,C;UACA,kBAAY,GAAZ,C;UACA,yBAAmB,CAAnB,C;UAhCsC,oCExFd,IFwFc,EExFV,IFwFU,EExFN,IFwFM,EExFF,IFwFE,EExFE,EFwFF,EExFM,EFwFN,CAiCtC,CAAQ,GAAR,EAAa,2CAAb,C;UAIA,eAAU,CAAV,QAAkB,aAAlB,Q;YACI,cAAY,MAAI,I;YAtCkB,oCExFd,IFwFc,EExFV,IFwFU,EExFN,IFwFM,EExFF,IFwFE,EExFE,EFwFF,EExFM,EFwFN,CAwClC,CAAQ,OAAR,EAAe,0BAxCmH,4BUmB7E,kCVnB6E,CAwCnH,qDAAf,C;;;UAvCU,OEzF0B,E;UFyFT,OEzFa,E;UF8DE,oBA4BtC,CAAM,KAAN,C;UEjGI,K;aASA,C;UQyG6C,kCVdjD,CAAK,I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"}