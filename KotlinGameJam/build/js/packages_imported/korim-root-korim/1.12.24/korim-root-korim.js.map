{"version":3,"file":"korim-root-korim.js","sources":["util/Standard.kt","kotlin/math.kt","util/Preconditions.kt","../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/lang/Assert.kt","../../../../../kmem/src/commonMain/kotlin/com/soywiz/kmem/ArrayCopy.kt","generated/_ArraysJs.kt","../../../../../kmem/src/commonMain/kotlin/com/soywiz/kmem/ArrayFill.kt","generated/_Collections.kt","collections/Collections.kt","../../../../../kds/src/commonMain/kotlin/com/soywiz/kds/_Delegates.kt","../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/vector/VectorBuilder.kt","generated/_UArrays.kt","kotlin/UByte.kt","generated/_Strings.kt","kotlin/text/char.kt","text/Strings.kt","collections/Maps.kt","../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/Measure.kt","../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/TimeSpan.kt","text/StringBuilder.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/font/TtfFont.kt","arrayUtils.kt","../../../../../kmem/src/commonMain/kotlin/com/soywiz/kmem/Numbers.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/format/DXT.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/format/GIF.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/format/ICO.kt","kotlin/Comparator.kt","../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/stream/SyncStream.kt","util/Result.kt","../../../../../common/src/CancellableContinuation.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/Korim.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/annotation/KorimExperimental.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/annotation/KorimInternal.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/bitmap/Bitmap.kt","util/Lazy.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/bitmap/Bitmap1.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/bitmap/Bitmap16.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/bitmap/Bitmap2.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/bitmap/Bitmap32.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/bitmap/Bitmap4.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/bitmap/Bitmap8.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/bitmap/BitmapIndexed.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/bitmap/BitmapChannel.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/bitmap/BitmapExt.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/bitmap/BitmapSlice.kt","../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/Point.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/bitmap/Bitmaps.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/bitmap/DistanceBitmap.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/bitmap/NativeImage.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/vector/Context2d.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/bitmap/NinePatchBitmap32.kt","collections/MutableCollections.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/bitmap/PSNR.kt","generated/_Arrays.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/bitmap/atlas/Atlas.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/bitmap/effect/Blur.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/bitmap/effect/DropShadow.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/bitmap/effect/Glow.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/color/ARGB.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/color/BGRA.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/color/CMYK.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/color/ColorFormat.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/color/ColorMatrix.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/color/ColorSwizzle.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/color/ColorTransform.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/color/Colors.kt","kotlin/text/string.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/color/PaletteColorFormat.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/color/RGB.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/color/RGBA.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/color/RGBA_16.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/color/RGBAd.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/color/RGBAf.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/color/Vector3DExt.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/color/YCbCr.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/color/YUVA.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/font/BitmapFont.kt","../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/Rectangle.kt","../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/dynamic/KDynamic.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/font/CharacterSet.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/font/DefaultTtfFont.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/font/Font.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/font/FontOrigin.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/font/FontRegistry.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/font/GlyphPath.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/font/Metrics.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/font/NativeSystemFontProvider.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/font/SystemFont.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/font/TextRenderer.kt","../../../../../kds/src/commonMain/kotlin/com/soywiz/kds/iterators/_FastArrayIterators.kt","../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/Matrix.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/font/VectorFont.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/format/BMP.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/format/DDS.kt","kotlin/kotlin.kt","comparisons/Comparisons.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/format/ImageData.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/format/ImageFormat.kt","../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/lang/Exceptions.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/format/ImageFormats.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/format/ImageFrame.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/format/ImageInfo.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/format/KRA.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/format/KorioExt.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/format/NativeImageFormatProvider.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/vector/renderer/Renderer.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/format/PNG.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/format/PSD.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/format/RegisteredImageFormats.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/format/SVG.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/format/TGA.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/internal/ClampExt.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/internal/MathExt.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/qr/QR.kt","../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/shape/Shape2d.kt","../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/bezier/Bezier.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/vector/Bitmap32Context2d.kt","../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/vector/VectorPath.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/vector/CompositeOperation.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/vector/paint/Paint.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/vector/CycleMethod.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/vector/Drawable.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/vector/GraphicsPath.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/vector/HorizontalAlign.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/vector/LineScaleMode.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/vector/Shape.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/vector/ShapeBuilder.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/vector/ShapeRasterizerMethod.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/vector/VerticalAlign.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/vector/chart/Chart.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/vector/chart/ChartBars.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/vector/filler/Filler.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/vector/format/SVG.kt","../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/util/StrReader.kt","../../../../../kds/src/commonMain/kotlin/com/soywiz/kds/_Extensions.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/vector/rasterizer/Rasterizer.kt","../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/segment/IntSegmentSet.kt","../../../../../korim/src/jsMain/kotlin/com/soywiz/korim/format/HtmlCanvas.kt","../../../../../korim/src/jsMain/kotlin/com/soywiz/korim/format/HtmlImage.kt","org.w3c/org.khronos.webgl.kt","../../../../../korim/src/jsMain/kotlin/com/soywiz/korim/format/NativeImageFormatProviderJs.kt","org.w3c/org.w3c.files.kt","coroutines/Continuation.kt","org.w3c/org.w3c.dom.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/internal/KorimVersion.kt","../../../../../korim/src/jsMain/kotlin/com/soywiz/korim/font/NativeSystemFontProviderFallback.kt"],"sourcesContent":["/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StandardKt\")\npackage kotlin\n\nimport kotlin.contracts.*\n\n/**\n * An exception is thrown to indicate that a method body remains to be implemented.\n */\npublic class NotImplementedError(message: String = \"An operation is not implemented.\") : Error(message)\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n */\n\n@kotlin.internal.InlineOnly\npublic inline fun TODO(): Nothing = throw NotImplementedError()\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n *\n * @param reason a string explaining why the implementation is missing.\n */\n@kotlin.internal.InlineOnly\npublic inline fun TODO(reason: String): Nothing = throw NotImplementedError(\"An operation is not implemented: $reason\")\n\n\n\n/**\n * Calls the specified function [block] and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <R> run(block: () -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.run(block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with the given [receiver] as its receiver and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#with).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> with(receiver: T, block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return receiver.block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns `this` value.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#apply).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> T.apply(block: T.() -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block()\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns `this` value.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#also).\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.also(block: (T) -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block(this)\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#let).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.let(block: (T) -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block(this)\n}\n\n/**\n * Returns `this` value if it satisfies the given [predicate] or `null`, if it doesn't.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeIf(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (predicate(this)) this else null\n}\n\n/**\n * Returns `this` value if it _does not_ satisfy the given [predicate] or `null`, if it does.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeUnless(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (!predicate(this)) this else null\n}\n\n/**\n * Executes the given function [action] specified number of [times].\n *\n * A zero-based index of current iteration is passed as a parameter to [action].\n *\n * @sample samples.misc.ControlFlow.repeat\n */\n@kotlin.internal.InlineOnly\npublic inline fun repeat(times: Int, action: (Int) -> Unit) {\n    contract { callsInPlace(action) }\n\n    for (index in 0 until times) {\n        action(index)\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n@file:Suppress(\"DEPRECATION\", \"DEPRECATION_ERROR\")\npackage kotlin.math\n\n\nimport kotlin.internal.InlineOnly\nimport kotlin.js.Math as nativeMath\n\n\n// region ================ Double Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sin(x: Double): Double = nativeMath.sin(x)\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cos(x: Double): Double = nativeMath.cos(x)\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tan(x: Double): Double = nativeMath.tan(x)\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asin(x: Double): Double = nativeMath.asin(x)\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acos(x: Double): Double = nativeMath.acos(x)\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan(x: Double): Double = nativeMath.atan(x)\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan2(y: Double, x: Double): Double = nativeMath.atan2(y, x)\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sinh(x: Double): Double = nativeMath.sinh(x)\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cosh(x: Double): Double = nativeMath.cosh(x)\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tanh(x: Double): Double = nativeMath.tanh(x)\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asinh(x: Double): Double = nativeMath.asinh(x)\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acosh(x: Double): Double = nativeMath.acosh(x)\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atanh(x: Double): Double = nativeMath.atanh(x)\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun hypot(x: Double, y: Double): Double = nativeMath.hypot(x, y)\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sqrt(x: Double): Double = nativeMath.sqrt(x)\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun exp(x: Double): Double = nativeMath.exp(x)\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun expm1(x: Double): Double = nativeMath.expm1(x)\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\npublic actual fun log(x: Double, base: Double): Double {\n    if (base <= 0.0 || base == 1.0) return Double.NaN\n    return nativeMath.log(x) / nativeMath.log(base)\n}\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln(x: Double): Double = nativeMath.log(x)\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log10(x: Double): Double = nativeMath.log10(x)\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log2(x: Double): Double = nativeMath.log2(x)\n\n/**\n * Computes `ln(x + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln1p(x: Double): Double = nativeMath.log1p(x)\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest double value that is greater than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ceil(x: Double): Double = nativeMath.ceil(x).unsafeCast<Double>() // TODO: Remove unsafe cast after removing public js.math\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest double value that is smaller than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun floor(x: Double): Double = nativeMath.floor(x).unsafeCast<Double>()\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun truncate(x: Double): Double = nativeMath.trunc(x)\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun round(x: Double): Double {\n    if (x % 0.5 != 0.0) {\n        return nativeMath.round(x).unsafeCast<Double>()\n    }\n    val floor = floor(x)\n    return if (floor % 2 == 0.0) floor else ceil(x)\n}\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Double]\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun abs(x: Double): Double = nativeMath.abs(x)\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sign(x: Double): Double = nativeMath.sign(x)\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Double, b: Double): Double = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Double, b: Double): Double = nativeMath.max(a, b)\n\n// extensions\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.pow(x: Double): Double = nativeMath.pow(this, x)\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.pow(n: Int): Double = nativeMath.pow(this, n.toDouble())\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Double.absoluteValue: Double get() = nativeMath.abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Double.sign: Double get() = nativeMath.sign(this)\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.withSign(sign: Int): Double = this.withSign(sign.toDouble())\n\n/**\n * Returns the ulp (unit in the last place) of this value.\n *\n * An ulp is a positive distance between this value and the next nearest [Double] value larger in magnitude.\n *\n * Special Cases:\n *   - `NaN.ulp` is `NaN`\n *   - `x.ulp` is `+Inf` when `x` is `+Inf` or `-Inf`\n *   - `0.0.ulp` is `Double.MIN_VALUE`\n */\n@SinceKotlin(\"1.2\")\npublic actual val Double.ulp: Double get() = when {\n    this < 0 -> (-this).ulp\n    this.isNaN() || this == Double.POSITIVE_INFINITY -> this\n    this == Double.MAX_VALUE -> this - this.nextDown()\n    else -> this.nextUp() - this\n}\n\n/**\n * Returns the [Double] value nearest to this value in direction of positive infinity.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextUp(): Double = when {\n    this.isNaN() || this == Double.POSITIVE_INFINITY -> this\n    this == 0.0 -> Double.MIN_VALUE\n    else -> Double.fromBits(this.toRawBits() + if (this > 0) 1 else -1)\n}\n\n/**\n * Returns the [Double] value nearest to this value in direction of negative infinity.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextDown(): Double = when {\n    this.isNaN() || this == Double.NEGATIVE_INFINITY -> this\n    this == 0.0 -> -Double.MIN_VALUE\n    else -> Double.fromBits(this.toRawBits() + if (this > 0) -1 else 1)\n}\n\n\n/**\n * Returns the [Double] value nearest to this value in direction from this value towards the value [to].\n *\n * Special cases:\n *   - `x.nextTowards(y)` is `NaN` if either `x` or `y` are `NaN`\n *   - `x.nextTowards(x) == x`\n *\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextTowards(to: Double): Double = when {\n    this.isNaN() || to.isNaN() -> Double.NaN\n    to == this -> to\n    to > this -> this.nextUp()\n    else /* to < this */ -> this.nextDown()\n}\n\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.roundToInt(): Int = when {\n    isNaN() -> throw IllegalArgumentException(\"Cannot round NaN value.\")\n    this > Int.MAX_VALUE -> Int.MAX_VALUE\n    this < Int.MIN_VALUE -> Int.MIN_VALUE\n    else -> nativeMath.round(this).unsafeCast<Double>().toInt()\n}\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.roundToLong(): Long = when {\n    isNaN() -> throw IllegalArgumentException(\"Cannot round NaN value.\")\n    this > Long.MAX_VALUE -> Long.MAX_VALUE\n    this < Long.MIN_VALUE -> Long.MIN_VALUE\n    else -> nativeMath.round(this).unsafeCast<Double>().toLong()\n}\n\n// endregion\n\n\n\n// region ================ Float Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sin(x: Float): Float = nativeMath.sin(x.toDouble()).toFloat()\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cos(x: Float): Float = nativeMath.cos(x.toDouble()).toFloat()\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tan(x: Float): Float = nativeMath.tan(x.toDouble()).toFloat()\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asin(x: Float): Float = nativeMath.asin(x.toDouble()).toFloat()\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acos(x: Float): Float = nativeMath.acos(x.toDouble()).toFloat()\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan(x: Float): Float = nativeMath.atan(x.toDouble()).toFloat()\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan2(y: Float, x: Float): Float = nativeMath.atan2(y.toDouble(), x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sinh(x: Float): Float = nativeMath.sinh(x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cosh(x: Float): Float = nativeMath.cosh(x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tanh(x: Float): Float = nativeMath.tanh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asinh(x: Float): Float = nativeMath.asinh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acosh(x: Float): Float = nativeMath.acosh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atanh(x: Float): Float = nativeMath.atanh(x.toDouble()).toFloat()\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun hypot(x: Float, y: Float): Float = nativeMath.hypot(x.toDouble(), y.toDouble()).toFloat()\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sqrt(x: Float): Float = nativeMath.sqrt(x.toDouble()).toFloat()\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun exp(x: Float): Float = nativeMath.exp(x.toDouble()).toFloat()\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun expm1(x: Float): Float = nativeMath.expm1(x.toDouble()).toFloat()\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log(x: Float, base: Float): Float = log(x.toDouble(), base.toDouble()).toFloat()\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln(x: Float): Float = nativeMath.log(x.toDouble()).toFloat()\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log10(x: Float): Float = nativeMath.log10(x.toDouble()).toFloat()\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log2(x: Float): Float = nativeMath.log2(x.toDouble()).toFloat()\n\n/**\n * Computes `ln(a + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln1p(x: Float): Float = nativeMath.log1p(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest Float value that is greater than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ceil(x: Float): Float = nativeMath.ceil(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest Float value that is smaller than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun floor(x: Float): Float = nativeMath.floor(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun truncate(x: Float): Float = truncate(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun round(x: Float): Float = round(x.toDouble()).toFloat()\n\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Float]\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun abs(x: Float): Float = nativeMath.abs(x.toDouble()).toFloat()\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sign(x: Float): Float = nativeMath.sign(x.toDouble()).toFloat()\n\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Float, b: Float): Float = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Float, b: Float): Float = nativeMath.max(a, b)\n\n// extensions\n\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.pow(x: Float): Float = nativeMath.pow(this.toDouble(), x.toDouble()).toFloat()\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.pow(n: Int): Float = nativeMath.pow(this.toDouble(), n.toDouble()).toFloat()\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Float.absoluteValue: Float get() = nativeMath.abs(this.toDouble()).toFloat()\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Float.sign: Float get() = nativeMath.sign(this.toDouble()).toFloat()\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n *\n * If [sign] is `NaN` the sign of the result is undefined.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.withSign(sign: Float): Float = this.toDouble().withSign(sign.toDouble()).toFloat()\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.withSign(sign: Int): Float = this.toDouble().withSign(sign.toDouble()).toFloat()\n\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.roundToInt(): Int = toDouble().roundToInt()\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.roundToLong(): Long = toDouble().roundToLong()\n\n\n// endregion\n\n// region ================ Integer Math ========================================\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Int.MIN_VALUE)` is `Int.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Int]\n */\n// TODO: remove manual 'or' when KT-19290 is fixed\n@SinceKotlin(\"1.2\")\npublic actual fun abs(n: Int): Int = if (n < 0) (-n or 0) else n\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Int, b: Int): Int = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Int, b: Int): Int = nativeMath.max(a, b)\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Int.MIN_VALUE.absoluteValue` is `Int.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Int.absoluteValue: Int get() = abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic actual val Int.sign: Int get() = when {\n    this < 0 -> -1\n    this > 0 -> 1\n    else -> 0\n}\n\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Long.MIN_VALUE)` is `Long.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Long]\n */\n@SinceKotlin(\"1.2\")\npublic actual fun abs(n: Long): Long = if (n < 0) -n else n\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun min(a: Long, b: Long): Long = if (a <= b) a else b\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun max(a: Long, b: Long): Long = if (a >= b) a else b\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Long.MIN_VALUE.absoluteValue` is `Long.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Long.absoluteValue: Long get() = abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic actual val Long.sign: Int get() = when {\n    this < 0 -> -1\n    this > 0 -> 1\n    else -> 0\n}\n\n\n// endregion\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"PreconditionsKt\")\n\npackage kotlin\n\nimport kotlin.contracts.contract\n\n/**\n * Throws an [IllegalArgumentException] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun require(value: Boolean): Unit {\n    contract {\n        returns() implies value\n    }\n    require(value) { \"Failed requirement.\" }\n}\n\n/**\n * Throws an [IllegalArgumentException] with the result of calling [lazyMessage] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun require(value: Boolean, lazyMessage: () -> Any): Unit {\n    contract {\n        returns() implies value\n    }\n    if (!value) {\n        val message = lazyMessage()\n        throw IllegalArgumentException(message.toString())\n    }\n}\n\n/**\n * Throws an [IllegalArgumentException] if the [value] is null. Otherwise returns the not null value.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> requireNotNull(value: T?): T {\n    contract {\n        returns() implies (value != null)\n    }\n    return requireNotNull(value) { \"Required value was null.\" }\n}\n\n/**\n * Throws an [IllegalArgumentException] with the result of calling [lazyMessage] if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> requireNotNull(value: T?, lazyMessage: () -> Any): T {\n    contract {\n        returns() implies (value != null)\n    }\n\n    if (value == null) {\n        val message = lazyMessage()\n        throw IllegalArgumentException(message.toString())\n    } else {\n        return value\n    }\n}\n\n/**\n * Throws an [IllegalStateException] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun check(value: Boolean): Unit {\n    contract {\n        returns() implies value\n    }\n    check(value) { \"Check failed.\" }\n}\n\n/**\n * Throws an [IllegalStateException] with the result of calling [lazyMessage] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun check(value: Boolean, lazyMessage: () -> Any): Unit {\n    contract {\n        returns() implies value\n    }\n    if (!value) {\n        val message = lazyMessage()\n        throw IllegalStateException(message.toString())\n    }\n}\n\n/**\n * Throws an [IllegalStateException] if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> checkNotNull(value: T?): T {\n    contract {\n        returns() implies (value != null)\n    }\n    return checkNotNull(value) { \"Required value was null.\" }\n}\n\n/**\n * Throws an [IllegalStateException] with the result of calling [lazyMessage]  if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> checkNotNull(value: T?, lazyMessage: () -> Any): T {\n    contract {\n        returns() implies (value != null)\n    }\n\n    if (value == null) {\n        val message = lazyMessage()\n        throw IllegalStateException(message.toString())\n    } else {\n        return value\n    }\n}\n\n\n/**\n * Throws an [IllegalStateException] with the given [message].\n *\n * @sample samples.misc.Preconditions.failWithError\n */\n@kotlin.internal.InlineOnly\npublic inline fun error(message: Any): Nothing = throw IllegalStateException(message.toString())\n",null,null,"/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\nimport primitiveArrayConcat\nimport withType\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun <T> Array<out T>.elementAt(index: Int): T {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun ByteArray.elementAt(index: Int): Byte {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun ShortArray.elementAt(index: Int): Short {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun IntArray.elementAt(index: Int): Int {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun LongArray.elementAt(index: Int): Long {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun FloatArray.elementAt(index: Int): Float {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun DoubleArray.elementAt(index: Int): Double {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun BooleanArray.elementAt(index: Int): Boolean {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun CharArray.elementAt(index: Int): Char {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic actual fun <T> Array<out T>.asList(): List<T> {\n    return ArrayList<T>(this.unsafeCast<Array<Any?>>())\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun ByteArray.asList(): List<Byte> {\n    return this.unsafeCast<Array<Byte>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun ShortArray.asList(): List<Short> {\n    return this.unsafeCast<Array<Short>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun IntArray.asList(): List<Int> {\n    return this.unsafeCast<Array<Int>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun LongArray.asList(): List<Long> {\n    return this.unsafeCast<Array<Long>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun FloatArray.asList(): List<Float> {\n    return this.unsafeCast<Array<Float>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun DoubleArray.asList(): List<Double> {\n    return this.unsafeCast<Array<Double>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun BooleanArray.asList(): List<Boolean> {\n    return this.unsafeCast<Array<Boolean>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic actual fun CharArray.asList(): List<Char> {\n    return object : AbstractList<Char>(), RandomAccess {\n        override val size: Int get() = this@asList.size\n        override fun isEmpty(): Boolean = this@asList.isEmpty()\n        override fun contains(element: Char): Boolean = this@asList.contains(element)\n        override fun get(index: Int): Char {\n            AbstractList.checkElementIndex(index, size)\n            return this@asList[index]\n        }\n        override fun indexOf(element: Char): Int {\n            if ((element as Any?) !is Char) return -1\n            return this@asList.indexOf(element)\n        }\n        override fun lastIndexOf(element: Char): Int {\n            if ((element as Any?) !is Char) return -1\n            return this@asList.lastIndexOf(element)\n        }\n    }\n}\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayDeepEquals\")\npublic actual infix fun <T> Array<out T>.contentDeepEquals(other: Array<out T>): Boolean {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayDeepHashCode\")\npublic actual fun <T> Array<out T>.contentDeepHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayDeepToString\")\npublic actual fun <T> Array<out T>.contentDeepToString(): String {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun <T> Array<out T>.contentEquals(other: Array<out T>): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun ByteArray.contentEquals(other: ByteArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun ShortArray.contentEquals(other: ShortArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun IntArray.contentEquals(other: IntArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun LongArray.contentEquals(other: LongArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun FloatArray.contentEquals(other: FloatArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun DoubleArray.contentEquals(other: DoubleArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun BooleanArray.contentEquals(other: BooleanArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun CharArray.contentEquals(other: CharArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun <T> Array<out T>.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun ByteArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun ShortArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun IntArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun LongArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun FloatArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun DoubleArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun BooleanArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun CharArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun <T> Array<out T>.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun ByteArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun ShortArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun IntArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun LongArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun FloatArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun DoubleArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun BooleanArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun CharArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun <T> Array<out T>.copyInto(destination: Array<T>, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): Array<T> {\n    arrayCopy(this, destination, destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun ByteArray.copyInto(destination: ByteArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ByteArray {\n    arrayCopy(this.unsafeCast<Array<Byte>>(), destination.unsafeCast<Array<Byte>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun ShortArray.copyInto(destination: ShortArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ShortArray {\n    arrayCopy(this.unsafeCast<Array<Short>>(), destination.unsafeCast<Array<Short>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun IntArray.copyInto(destination: IntArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): IntArray {\n    arrayCopy(this.unsafeCast<Array<Int>>(), destination.unsafeCast<Array<Int>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun LongArray.copyInto(destination: LongArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): LongArray {\n    arrayCopy(this.unsafeCast<Array<Long>>(), destination.unsafeCast<Array<Long>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun FloatArray.copyInto(destination: FloatArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): FloatArray {\n    arrayCopy(this.unsafeCast<Array<Float>>(), destination.unsafeCast<Array<Float>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun DoubleArray.copyInto(destination: DoubleArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): DoubleArray {\n    arrayCopy(this.unsafeCast<Array<Double>>(), destination.unsafeCast<Array<Double>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun BooleanArray.copyInto(destination: BooleanArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): BooleanArray {\n    arrayCopy(this.unsafeCast<Array<Boolean>>(), destination.unsafeCast<Array<Boolean>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun CharArray.copyInto(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): CharArray {\n    arrayCopy(this.unsafeCast<Array<Char>>(), destination.unsafeCast<Array<Char>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline fun <T> Array<out T>.copyOf(): Array<T> {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun ByteArray.copyOf(): ByteArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun ShortArray.copyOf(): ShortArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun IntArray.copyOf(): IntArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun LongArray.copyOf(): LongArray {\n    return withType(\"LongArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun FloatArray.copyOf(): FloatArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun DoubleArray.copyOf(): DoubleArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun BooleanArray.copyOf(): BooleanArray {\n    return withType(\"BooleanArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun CharArray.copyOf(): CharArray {\n    return withType(\"CharArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun ByteArray.copyOf(newSize: Int): ByteArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, ByteArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun ShortArray.copyOf(newSize: Int): ShortArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, ShortArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun IntArray.copyOf(newSize: Int): IntArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, IntArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun LongArray.copyOf(newSize: Int): LongArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"LongArray\", arrayCopyResize(this, newSize, 0L))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun FloatArray.copyOf(newSize: Int): FloatArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, FloatArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun DoubleArray.copyOf(newSize: Int): DoubleArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, DoubleArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `false` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `false` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun BooleanArray.copyOf(newSize: Int): BooleanArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"BooleanArray\", arrayCopyResize(this, newSize, false))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with null char (`\\u0000`) values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with null char (`\\u0000`) values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun CharArray.copyOf(newSize: Int): CharArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"CharArray\", fillFrom(this, CharArray(newSize)))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `null` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `null` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizingCopyOf\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual fun <T> Array<out T>.copyOf(newSize: Int): Array<T?> {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return arrayCopyResize(this, newSize, null)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual fun <T> Array<out T>.copyOfRange(fromIndex: Int, toIndex: Int): Array<T> {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun ByteArray.copyOfRange(fromIndex: Int, toIndex: Int): ByteArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun ShortArray.copyOfRange(fromIndex: Int, toIndex: Int): ShortArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun IntArray.copyOfRange(fromIndex: Int, toIndex: Int): IntArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun LongArray.copyOfRange(fromIndex: Int, toIndex: Int): LongArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"LongArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun FloatArray.copyOfRange(fromIndex: Int, toIndex: Int): FloatArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun DoubleArray.copyOfRange(fromIndex: Int, toIndex: Int): DoubleArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun BooleanArray.copyOfRange(fromIndex: Int, toIndex: Int): BooleanArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"BooleanArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun CharArray.copyOfRange(fromIndex: Int, toIndex: Int): CharArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"CharArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun <T> Array<T>.fill(element: T, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ByteArray.fill(element: Byte, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ShortArray.fill(element: Short, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun IntArray.fill(element: Int, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun LongArray.fill(element: Long, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun FloatArray.fill(element: Float, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun DoubleArray.fill(element: Double, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun BooleanArray.fill(element: Boolean, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun CharArray.fill(element: Char, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline operator fun <T> Array<out T>.plus(element: T): Array<T> {\n    return this.asDynamic().concat(arrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ByteArray.plus(element: Byte): ByteArray {\n    return plus(byteArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ShortArray.plus(element: Short): ShortArray {\n    return plus(shortArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun IntArray.plus(element: Int): IntArray {\n    return plus(intArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun LongArray.plus(element: Long): LongArray {\n    return plus(longArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun FloatArray.plus(element: Float): FloatArray {\n    return plus(floatArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun DoubleArray.plus(element: Double): DoubleArray {\n    return plus(doubleArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun BooleanArray.plus(element: Boolean): BooleanArray {\n    return plus(booleanArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun CharArray.plus(element: Char): CharArray {\n    return plus(charArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual operator fun <T> Array<out T>.plus(elements: Collection<T>): Array<T> {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun ByteArray.plus(elements: Collection<Byte>): ByteArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun ShortArray.plus(elements: Collection<Short>): ShortArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun IntArray.plus(elements: Collection<Int>): IntArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun LongArray.plus(elements: Collection<Long>): LongArray {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun FloatArray.plus(elements: Collection<Float>): FloatArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun DoubleArray.plus(elements: Collection<Double>): DoubleArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun BooleanArray.plus(elements: Collection<Boolean>): BooleanArray {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun CharArray.plus(elements: Collection<Char>): CharArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline operator fun <T> Array<out T>.plus(elements: Array<out T>): Array<T> {\n    return this.asDynamic().concat(elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ByteArray.plus(elements: ByteArray): ByteArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ShortArray.plus(elements: ShortArray): ShortArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun IntArray.plus(elements: IntArray): IntArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun LongArray.plus(elements: LongArray): LongArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun FloatArray.plus(elements: FloatArray): FloatArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun DoubleArray.plus(elements: DoubleArray): DoubleArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun BooleanArray.plus(elements: BooleanArray): BooleanArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun CharArray.plus(elements: CharArray): CharArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline fun <T> Array<out T>.plusElement(element: T): Array<T> {\n    return this.asDynamic().concat(arrayOf(element))\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun IntArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic actual fun LongArray.sort(): Unit {\n    if (size > 1) sort { a: Long, b: Long -> a.compareTo(b) }\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun ByteArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun ShortArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun DoubleArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun FloatArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun CharArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place according to the natural order of its elements.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @sample samples.collections.Arrays.Sorting.sortArrayOfComparable\n */\npublic actual fun <T : Comparable<T>> Array<out T>.sort(): Unit {\n    if (size > 1) sortArray(this)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sort(comparison: (a: T, b: T) -> Int): Unit {\n    if (size > 1) sortArrayWith(this, comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sort(noinline comparison: (a: Byte, b: Byte) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sort(noinline comparison: (a: Short, b: Short) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sort(noinline comparison: (a: Int, b: Int) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sort(noinline comparison: (a: Long, b: Long) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sort(noinline comparison: (a: Float, b: Float) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sort(noinline comparison: (a: Double, b: Double) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sort(noinline comparison: (a: Char, b: Char) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T> Array<out T>.sortWith(comparator: Comparator<in T>): Unit {\n    if (size > 1) sortArrayWith(this, comparator)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun ByteArray.toTypedArray(): Array<Byte> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun ShortArray.toTypedArray(): Array<Short> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun IntArray.toTypedArray(): Array<Int> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun LongArray.toTypedArray(): Array<Long> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun FloatArray.toTypedArray(): Array<Float> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun DoubleArray.toTypedArray(): Array<Double> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun BooleanArray.toTypedArray(): Array<Boolean> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun CharArray.toTypedArray(): Array<Char> {\n    return Array(size) { index -> this[index] }\n}\n\n",null,"/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns 1st *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 1.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 2.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 3.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 4.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 5.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the collection.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.contains(element: T): Boolean {\n    if (this is Collection)\n        return contains(element)\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic fun <T> Iterable<T>.elementAt(index: Int): T {\n    if (this is List)\n        return get(index)\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"Collection doesn't contain element at index $index.\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAt(index: Int): T {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\npublic fun <T> Iterable<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    if (this is List)\n        return this.getOrElse(index, defaultValue)\n    if (index < 0)\n        return defaultValue(index)\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\npublic fun <T> Iterable<T>.elementAtOrNull(index: Int): T? {\n    if (this is List)\n        return this.getOrNull(index)\n    if (index < 0)\n        return null\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.first(): T {\n    when (this) {\n        is List -> return this.first()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.firstOrNull(): T? {\n    when (this) {\n        is List -> {\n            if (isEmpty())\n                return null\n            else\n                return this[0]\n        }\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns the first element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Iterable<T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n */\npublic fun <T> List<T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.indexOf(element: T): Int {\n    if (this is List) return this.indexOf(element)\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.indexOf(element: T): Int {\n    return indexOf(element)\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (predicate(iterator.previous())) {\n            return iterator.nextIndex()\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.last(): T {\n    when (this) {\n        is List -> return this.last()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.last(predicate: (T) -> Boolean): T {\n    var last: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return last as T\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> List<T>.last(predicate: (T) -> Boolean): T {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"List contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.lastIndexOf(element: T): Int {\n    if (this is List) return this.lastIndexOf(element)\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns last index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.lastIndexOf(element: T): Int {\n    return lastIndexOf(element)\n}\n\n/**\n * Returns the last element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.lastOrNull(): T? {\n    when (this) {\n        is List -> return if (isEmpty()) null else this[size - 1]\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> Iterable<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    var last: T? = null\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n        }\n    }\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> List<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this collection.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.random(): T {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this collection using the specified source of randomness.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Collection<T>.random(random: Random): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Collection is empty.\")\n    return elementAt(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this collection, or `null` if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.randomOrNull(): T? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this collection using the specified source of randomness, or `null` if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <T> Collection<T>.randomOrNull(random: Random): T? {\n    if (isEmpty())\n        return null\n    return elementAt(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.single(): T {\n    when (this) {\n        is List -> return this.single()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            val single = iterator.next()\n            if (iterator.hasNext())\n                throw IllegalArgumentException(\"Collection has more than one element.\")\n            return single\n        }\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"List is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"List has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Iterable<T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Collection contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns single element, or `null` if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.singleOrNull(): T? {\n    when (this) {\n        is List -> return if (size == 1) this[0] else null\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            val single = iterator.next()\n            if (iterator.hasNext())\n                return null\n            return single\n        }\n    }\n}\n\n/**\n * Returns single element, or `null` if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Iterable<T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Iterable<T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return toList()\n    val list: ArrayList<T>\n    if (this is Collection<*>) {\n        val resultSize = size - n\n        if (resultSize <= 0)\n            return emptyList()\n        if (resultSize == 1)\n            return listOf(last())\n        list = ArrayList<T>(resultSize)\n        if (this is List<T>) {\n            if (this is RandomAccess) {\n                for (index in n until size)\n                    list.add(this[index])\n            } else {\n                for (item in listIterator(n))\n                    list.add(item)\n            }\n            return list\n        }\n    }\n    else {\n        list = ArrayList<T>()\n    }\n    var count = 0\n    for (item in this) {\n        if (count >= n) list.add(item) else ++count\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> List<T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> List<T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            if (!predicate(iterator.previous())) {\n                return take(iterator.nextIndex() + 1)\n            }\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Iterable<T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Iterable<T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T> Iterable<T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n */\npublic inline fun <reified R> Iterable<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Iterable<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Iterable<T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n * \n * @sample samples.collections.Collections.Filtering.filterNotNull\n */\npublic fun <T : Any> Iterable<T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n */\npublic fun <C : MutableCollection<in T>, T : Any> Iterable<T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> List<T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return this.subList(indices.start, indices.endInclusive + 1).toList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> List<T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Iterable<T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (this is Collection<T>) {\n        if (n >= size) return toList()\n        if (n == 1) return listOf(first())\n    }\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> List<T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(last())\n    val list = ArrayList<T>(n)\n    if (this is RandomAccess) {\n        for (index in size - n until size)\n            list.add(this[index])\n    } else {\n        for (item in listIterator(size - n))\n            list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> List<T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (isEmpty())\n        return emptyList()\n    val iterator = listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (!predicate(iterator.previous())) {\n            iterator.next()\n            val expectedSize = size - iterator.nextIndex()\n            if (expectedSize == 0) return emptyList()\n            return ArrayList<T>(expectedSize).apply {\n                while (iterator.hasNext())\n                    add(iterator.next())\n            }\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Iterable<T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the list in-place.\n */\npublic expect fun <T> MutableList<T>.reverse(): Unit\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Iterable<T>.reversed(): List<T> {\n    if (this is Collection && size <= 1) return toList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Sorts elements in the list in-place according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> MutableList<T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sorted(): List<T> {\n    if (this is Collection) {\n        if (size <= 1) return this.toList()\n        @Suppress(\"UNCHECKED_CAST\")\n        return (toTypedArray<Comparable<T>>() as Array<T>).apply { sort() }.asList()\n    }\n    return toMutableList().apply { sort() }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Iterable<T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    if (this is Collection) {\n       if (size <= 1) return this.toList()\n       @Suppress(\"UNCHECKED_CAST\")\n       return (toTypedArray<Any?>() as Array<T>).apply { sortWith(comparator) }.asList()\n    }\n    return toMutableList().apply { sortWith(comparator) }\n}\n\n/**\n * Returns an array of Boolean containing all of the elements of this collection.\n */\npublic fun Collection<Boolean>.toBooleanArray(): BooleanArray {\n    val result = BooleanArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this collection.\n */\npublic fun Collection<Byte>.toByteArray(): ByteArray {\n    val result = ByteArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Char containing all of the elements of this collection.\n */\npublic fun Collection<Char>.toCharArray(): CharArray {\n    val result = CharArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Double containing all of the elements of this collection.\n */\npublic fun Collection<Double>.toDoubleArray(): DoubleArray {\n    val result = DoubleArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Float containing all of the elements of this collection.\n */\npublic fun Collection<Float>.toFloatArray(): FloatArray {\n    val result = FloatArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Int containing all of the elements of this collection.\n */\npublic fun Collection<Int>.toIntArray(): IntArray {\n    val result = IntArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Long containing all of the elements of this collection.\n */\npublic fun Collection<Long>.toLongArray(): LongArray {\n    val result = LongArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Short containing all of the elements of this collection.\n */\npublic fun Collection<Short>.toShortArray(): ShortArray {\n    val result = ShortArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associate\n */\npublic inline fun <T, K, V> Iterable<T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given collection indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateBy\n */\npublic inline fun <T, K> Iterable<T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateByWithValueTransform\n */\npublic inline fun <T, K, V> Iterable<T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given collection\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateByTo\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateByToWithValueTransform\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateTo\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are elements from the given collection and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V> Iterable<K>.associateWith(valueSelector: (K) -> V): Map<K, V> {\n    val result = LinkedHashMap<K, V>(mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given collection,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V, M : MutableMap<in K, in V>> Iterable<K>.associateWithTo(destination: M, valueSelector: (K) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Iterable<T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun <T> Iterable<T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(collectionSizeOrDefault(12))))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Iterable<T>.toList(): List<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyList()\n            1 -> listOf(if (this is List) get(0) else iterator().next())\n            else -> this.toMutableList()\n        }\n    }\n    return this.toMutableList().optimizeReadOnlyList()\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Iterable<T>.toMutableList(): MutableList<T> {\n    if (this is Collection<T>)\n        return this.toMutableList()\n    return toCollection(ArrayList<T>())\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Collection<T>.toMutableList(): MutableList<T> {\n    return ArrayList(this)\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toSet(): Set<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptySet()\n            1 -> setOf(if (this is List) this[0] else iterator().next())\n            else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n        }\n    }\n    return toCollection(LinkedHashSet<T>()).optimizeReadOnlySet()\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original collection.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <T, R> Iterable<T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original collection, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Iterable<T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Iterable<T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a collection to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Iterable<T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <T, R> Iterable<T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Iterable<T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(checkIndexOverflow(index++), item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original collection.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original collection\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original collection\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original collection\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun <T> Iterable<T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given collection.\n * \n * The elements in the resulting list are in the same order as they were in the source collection.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun <T> Iterable<T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given collection\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source collection.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <T, K> Iterable<T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this collection and the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun <T> Iterable<T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this collection and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic infix fun <T> Iterable<T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toMutableSet(): MutableSet<T> {\n    return when (this) {\n        is Collection<T> -> LinkedHashSet(this)\n        else -> toCollection(LinkedHashSet<T>())\n    }\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original collection.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun <T> Iterable<T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Iterable<T>.all(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if collection has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Iterable<T>.any(): Boolean {\n    if (this is Collection) return !isEmpty()\n    return iterator().hasNext()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Iterable<T>.any(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return false\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this collection.\n */\npublic fun <T> Iterable<T>.count(): Int {\n    if (this is Collection) return size\n    var count = 0\n    for (element in this) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Returns the number of elements in this collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.count(predicate: (T) -> Boolean): Int {\n    if (this is Collection && isEmpty()) return 0\n    var count = 0\n    for (element in this) if (predicate(element)) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <T, R> Iterable<T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Iterable<T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(checkIndexOverflow(index++), accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            accumulator = operation(iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            val index = iterator.previousIndex()\n            accumulator = operation(index, iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\n@kotlin.internal.HidesMembers\npublic inline fun <T> Iterable<T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun <T> Iterable<T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(checkIndexOverflow(index++), item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.max(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.max(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Iterable<T>.max(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxElem = iterator.next()\n    if (!iterator.hasNext()) return maxElem\n    var maxValue = selector(maxElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    } while (iterator.hasNext())\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Iterable<T>.maxWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.min(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.min(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Iterable<T>.min(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minElem = iterator.next()\n    if (!iterator.hasNext()) return minElem\n    var minValue = selector(minElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    } while (iterator.hasNext())\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Iterable<T>.minWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the collection has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Iterable<T>.none(): Boolean {\n    if (this is Collection) return isEmpty()\n    return !iterator().hasNext()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Iterable<T>.none(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each element and returns the collection itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, C : Iterable<T>> C.onEach(action: (T) -> Unit): C {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Iterable<T>.reduce(operation: (acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Iterable<T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the collection is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Iterable<T>.reduceOrNull(operation: (acc: S, T) -> S): S? {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return null\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> List<T>.reduceRight(operation: (T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> List<T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        val index = iterator.previousIndex()\n        accumulator = operation(index, iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the list is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> List<T>.reduceRightOrNull(operation: (T, acc: S) -> S): S? {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        return null\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <T, R> Iterable<T>.scan(initial: R, operation: (acc: R, T) -> R): List<R> {\n    val estimatedSize = collectionSizeOrDefault(9)\n    if (estimatedSize == 0) return listOf(initial)\n    val result = ArrayList<R>(estimatedSize + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original collection and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <T, R> Iterable<T>.scanIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    val estimatedSize = collectionSizeOrDefault(9)\n    if (estimatedSize == 0) return listOf(initial)\n    val result = ArrayList<R>(estimatedSize + 1).apply { add(initial) }\n    var index = 0\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(index++, accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this collection.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and the element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Iterable<T>.scanReduce(operation: (acc: S, T) -> S): List<S> {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return emptyList()\n    var accumulator: S = iterator.next()\n    val result = ArrayList<S>(collectionSizeOrDefault(10)).apply { add(accumulator) }\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original collection and current accumulator value that starts with the first element of this collection.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Iterable<T>.scanReduceIndexed(operation: (index: Int, acc: S, T) -> S): List<S> {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return emptyList()\n    var accumulator: S = iterator.next()\n    val result = ArrayList<S>(collectionSizeOrDefault(10)).apply { add(accumulator) }\n    var index = 1\n    while (iterator.hasNext()) {\n        accumulator = operation(index++, accumulator, iterator.next())\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Iterable<T?>.requireNoNulls(): Iterable<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Iterable<T>\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> List<T?>.requireNoNulls(): List<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as List<T>\n}\n\n/**\n * Splits this collection into a list of lists each not exceeding the given [size].\n * \n * The last list in the resulting list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.chunked(size: Int): List<List<T>> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this collection into several lists each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return list of results of the [transform] applied to an each list.\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.chunked(size: Int, transform: (List<T>) -> R): List<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\npublic operator fun <T> Iterable<T>.minus(element: T): List<T> {\n    val result = ArrayList<T>(collectionSizeOrDefault(10))\n    var removed = false\n    return this.filterTo(result) { if (!removed && it == element) { removed = true; false } else true }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] array.\n * \n * The [elements] array may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Array<out T>): List<T> {\n    if (elements.isEmpty()) return this.toList()\n    val other = elements.toHashSet()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] collection.\n * \n * The [elements] collection may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Iterable<T>): List<T> {\n    val other = elements.convertToSetForSetOperationWith(this)\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] sequence.\n * \n * The [elements] sequence may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Sequence<T>): List<T> {\n    val other = elements.toHashSet()\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minusElement(element: T): List<T> {\n    return minus(element)\n}\n\n/**\n * Splits the original collection into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Iterables.Operations.partition\n */\npublic inline fun <T> Iterable<T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Iterable<T>.plus(element: T): List<T> {\n    if (this is Collection) return this.plus(element)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Collection<T>.plus(element: T): List<T> {\n    val result = ArrayList<T>(size + 1)\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Array<out T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Collection<T>.plus(elements: Array<out T>): List<T> {\n    val result = ArrayList<T>(this.size + elements.size)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Iterable<T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Collection<T>.plus(elements: Iterable<T>): List<T> {\n    if (elements is Collection) {\n        val result = ArrayList<T>(this.size + elements.size)\n        result.addAll(this)\n        result.addAll(elements)\n        return result\n    } else {\n        val result = ArrayList<T>(this)\n        result.addAll(elements)\n        return result\n    }\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Collection<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>(this.size + 10)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list of snapshots of the window of the given [size]\n * sliding along this collection with the given [step], where each\n * snapshot is a list.\n * \n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): List<List<T>> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val resultCapacity = thisSize / step + if (thisSize % step == 0) 0 else 1\n        val result = ArrayList<List<T>>(resultCapacity)\n        var index = 0\n        while (index in 0 until thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (windowSize < size && !partialWindows) break\n            result.add(List(windowSize) { this[it + index] })\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<List<T>>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = false).forEach {\n        result.add(it)\n    }\n    return result\n}\n\n/**\n * Returns a list of results of applying the given [transform] function to\n * an each list representing a view over the window of the given [size]\n * sliding along this collection with the given [step].\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (List<T>) -> R): List<R> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val resultCapacity = thisSize / step + if (thisSize % step == 0) 0 else 1\n        val result = ArrayList<R>(resultCapacity)\n        val window = MovingSubList(this)\n        var index = 0\n        while (index in 0 until thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (!partialWindows && windowSize < size) break\n            window.move(index, index + windowSize)\n            result.add(transform(window))\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<R>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = true).forEach {\n        result.add(transform(it))\n    }\n    return result\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = other.size\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in this) {\n        if (i >= arraySize) break\n        list.add(transform(element, other[i++]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] collection with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val first = iterator()\n    val second = other.iterator()\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), other.collectionSizeOrDefault(10)))\n    while (first.hasNext() && second.hasNext()) {\n        list.add(transform(first.next(), second.next()))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs of each two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.zipWithNext(): List<Pair<T, T>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to an each pair of two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic inline fun <T, R> Iterable<T>.zipWithNext(transform: (a: T, b: T) -> R): List<R> {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return emptyList()\n    val result = mutableListOf<R>()\n    var current = iterator.next()\n    while (iterator.hasNext()) {\n        val next = iterator.next()\n        result.add(transform(current, next))\n        current = next\n    }\n    return result\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Iterable<T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Iterable<T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Returns this collection as an [Iterable].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.asIterable(): Iterable<T> {\n    return this\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original collection returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromCollection\n */\npublic fun <T> Iterable<T>.asSequence(): Sequence<T> {\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Iterable<Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Iterable<Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Iterable<Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Iterable<Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Iterable<Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Iterable<Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Iterable<Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Iterable<Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Iterable<Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Iterable<Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Iterable<Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Iterable<Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n@file:UseExperimental(kotlin.experimental.ExperimentalTypeInference::class)\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\n\ninternal object EmptyIterator : ListIterator<Nothing> {\n    override fun hasNext(): Boolean = false\n    override fun hasPrevious(): Boolean = false\n    override fun nextIndex(): Int = 0\n    override fun previousIndex(): Int = -1\n    override fun next(): Nothing = throw NoSuchElementException()\n    override fun previous(): Nothing = throw NoSuchElementException()\n}\n\ninternal object EmptyList : List<Nothing>, Serializable, RandomAccess {\n    private const val serialVersionUID: Long = -7390468764508069838L\n\n    override fun equals(other: Any?): Boolean = other is List<*> && other.isEmpty()\n    override fun hashCode(): Int = 1\n    override fun toString(): String = \"[]\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n    override fun contains(element: Nothing): Boolean = false\n    override fun containsAll(elements: Collection<Nothing>): Boolean = elements.isEmpty()\n\n    override fun get(index: Int): Nothing = throw IndexOutOfBoundsException(\"Empty list doesn't contain element at index $index.\")\n    override fun indexOf(element: Nothing): Int = -1\n    override fun lastIndexOf(element: Nothing): Int = -1\n\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n    override fun listIterator(): ListIterator<Nothing> = EmptyIterator\n    override fun listIterator(index: Int): ListIterator<Nothing> {\n        if (index != 0) throw IndexOutOfBoundsException(\"Index: $index\")\n        return EmptyIterator\n    }\n\n    override fun subList(fromIndex: Int, toIndex: Int): List<Nothing> {\n        if (fromIndex == 0 && toIndex == 0) return this\n        throw IndexOutOfBoundsException(\"fromIndex: $fromIndex, toIndex: $toIndex\")\n    }\n\n    private fun readResolve(): Any = EmptyList\n}\n\ninternal fun <T> Array<out T>.asCollection(): Collection<T> = ArrayAsCollection(this, isVarargs = false)\n\nprivate class ArrayAsCollection<T>(val values: Array<out T>, val isVarargs: Boolean) : Collection<T> {\n    override val size: Int get() = values.size\n    override fun isEmpty(): Boolean = values.isEmpty()\n    override fun contains(element: T): Boolean = values.contains(element)\n    override fun containsAll(elements: Collection<T>): Boolean = elements.all { contains(it) }\n    override fun iterator(): Iterator<T> = values.iterator()\n    // override hidden toArray implementation to prevent copying of values array\n    public fun toArray(): Array<out Any?> = values.copyToArrayOfAny(isVarargs)\n}\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\npublic fun <T> emptyList(): List<T> = EmptyList\n\n/**\n * Returns a new read-only list of given elements.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.readOnlyList\n */\npublic fun <T> listOf(vararg elements: T): List<T> = if (elements.size > 0) elements.asList() else emptyList()\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> listOf(): List<T> = emptyList()\n\n/**\n * Returns an empty new [MutableList].\n * @sample samples.collections.Collections.Lists.emptyMutableList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> mutableListOf(): MutableList<T> = ArrayList()\n\n/**\n * Returns an empty new [ArrayList].\n * @sample samples.collections.Collections.Lists.emptyArrayList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> arrayListOf(): ArrayList<T> = ArrayList()\n\n/**\n * Returns a new [MutableList] with the given elements.\n * @sample samples.collections.Collections.Lists.mutableList\n */\npublic fun <T> mutableListOf(vararg elements: T): MutableList<T> =\n    if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new [ArrayList] with the given elements.\n * @sample samples.collections.Collections.Lists.arrayList\n */\npublic fun <T> arrayListOf(vararg elements: T): ArrayList<T> =\n    if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new read-only list either of single given element, if it is not null, or empty list if the element is null. The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(element: T?): List<T> = if (element != null) listOf(element) else emptyList()\n\n/**\n * Returns a new read-only list only of those given elements, that are not null.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(vararg elements: T?): List<T> = elements.filterNotNull()\n\n/**\n * Creates a new read-only list with the specified [size], where each element is calculated by calling the specified\n * [init] function.\n *\n * The function [init] is called for each list element sequentially starting from the first one.\n * It should return the value for a list element given its index.\n *\n * @sample samples.collections.Collections.Lists.readOnlyListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> List(size: Int, init: (index: Int) -> T): List<T> = MutableList(size, init)\n\n/**\n * Creates a new mutable list with the specified [size], where each element is calculated by calling the specified\n * [init] function.\n *\n * The function [init] is called for each list element sequentially starting from the first one.\n * It should return the value for a list element given its index.\n *\n * @sample samples.collections.Collections.Lists.mutableListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList(size: Int, init: (index: Int) -> T): MutableList<T> {\n    val list = ArrayList<T>(size)\n    repeat(size) { index -> list.add(init(index)) }\n    return list\n}\n\n/**\n * Builds a new read-only [List] by populating a [MutableList] using the given [builderAction]\n * and returning a read-only list with the same elements.\n *\n * The list passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * @sample samples.collections.Builders.Lists.buildListSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <E> buildList(@BuilderInference builderAction: MutableList<E>.() -> Unit): List<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return ArrayList<E>().apply(builderAction)\n}\n\n/**\n * Builds a new read-only [List] by populating a [MutableList] using the given [builderAction]\n * and returning a read-only list with the same elements.\n *\n * The list passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * [capacity] is used to hint the expected number of elements added in the [builderAction].\n *\n * @throws IllegalArgumentException if the given [capacity] is negative.\n *\n * @sample samples.collections.Builders.Lists.buildListSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <E> buildList(capacity: Int, @BuilderInference builderAction: MutableList<E>.() -> Unit): List<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    checkBuilderCapacity(capacity)\n    return ArrayList<E>(capacity).apply(builderAction)\n}\n\n\n/**\n * Returns an [IntRange] of the valid indices for this collection.\n * @sample samples.collections.Collections.Collections.indicesOfCollection\n */\npublic val Collection<*>.indices: IntRange\n    get() = 0..size - 1\n\n/**\n * Returns the index of the last item in the list or -1 if the list is empty.\n *\n * @sample samples.collections.Collections.Lists.lastIndexOfList\n */\npublic val <T> List<T>.lastIndex: Int\n    get() = this.size - 1\n\n/**\n * Returns `true` if the collection is not empty.\n * @sample samples.collections.Collections.Collections.collectionIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns `true` if this nullable collection is either null or empty.\n * @sample samples.collections.Collections.Collections.collectionIsNullOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || this.isEmpty()\n}\n\n/**\n * Returns this Collection if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Collections.collectionOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.orEmpty(): Collection<T> = this ?: emptyList()\n\n/**\n * Returns this List if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Lists.listOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>?.orEmpty(): List<T> = this ?: emptyList()\n\n/**\n * Returns this collection if it's not empty\n * or the result of calling [defaultValue] function if the collection is empty.\n *\n * @sample samples.collections.Collections.Collections.collectionIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifEmpty(defaultValue: () -> R): R where C : Collection<*>, C : R =\n    if (isEmpty()) defaultValue() else this\n\n\n/**\n * Checks if all elements in the specified collection are contained in this collection.\n *\n * Allows to overcome type-safety restriction of `containsAll` that requires to pass a collection of type `Collection<E>`.\n * @sample samples.collections.Collections.Collections.collectionContainsAll\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> Collection<T>.containsAll(elements: Collection<T>): Boolean = this.containsAll(elements)\n\ninternal fun <T> List<T>.optimizeReadOnlyList() = when (size) {\n    0 -> emptyList()\n    1 -> listOf(this[0])\n    else -> this\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of its elements,\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchOnComparable\n * @sample samples.collections.Collections.Lists.binarySearchWithBoundaries\n */\npublic fun <T : Comparable<T>> List<T?>.binarySearch(element: T?, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = compareValues(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the specified [comparator],\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted according to the specified [comparator].\n * @sample samples.collections.Collections.Lists.binarySearchWithComparator\n */\npublic fun <T> List<T>.binarySearch(element: T, comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparator.compare(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for an element having the key returned by the specified [selector] function\n * equal to the provided [key] value using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of keys of its elements.\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements with the specified [key], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element with the specified [key], if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchByKey\n */\npublic inline fun <T, K : Comparable<K>> List<T>.binarySearchBy(\n    key: K?,\n    fromIndex: Int = 0,\n    toIndex: Int = size,\n    crossinline selector: (T) -> K?\n): Int =\n    binarySearch(fromIndex, toIndex) { compareValues(selector(it), key) }\n\n// do not introduce this overload --- too rare\n//public fun <T, K> List<T>.binarySearchBy(key: K, comparator: Comparator<K>, fromIndex: Int = 0, toIndex: Int = size(), selector: (T) -> K): Int =\n//        binarySearch(fromIndex, toIndex) { comparator.compare(selector(it), key) }\n\n\n/**\n * Searches this list or its range for an element for which the given [comparison] function returns zero using the binary search algorithm.\n *\n * The list is expected to be sorted so that the signs of the [comparison] function's return values ascend on the list elements,\n * i.e. negative values come before zero and zeroes come before positive values.\n * Otherwise, the result is undefined.\n *\n * If the list contains multiple elements for which [comparison] returns zero, there is no guarantee which one will be found.\n *\n * @param comparison function that returns zero when called on the list element being searched.\n * On the elements coming before the target element, the function must return negative values;\n * on the elements coming after the target element, the function must return positive values.\n *\n * @return the index of the found element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchWithComparisonFunction\n */\npublic fun <T> List<T>.binarySearch(fromIndex: Int = 0, toIndex: Int = size, comparison: (T) -> Int): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparison(midVal)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Checks that `from` and `to` are in\n * the range of [0..size] and throws an appropriate exception, if they aren't.\n */\nprivate fun rangeCheck(size: Int, fromIndex: Int, toIndex: Int) {\n    when {\n        fromIndex > toIndex -> throw IllegalArgumentException(\"fromIndex ($fromIndex) is greater than toIndex ($toIndex).\")\n        fromIndex < 0 -> throw IndexOutOfBoundsException(\"fromIndex ($fromIndex) is less than zero.\")\n        toIndex > size -> throw IndexOutOfBoundsException(\"toIndex ($toIndex) is greater than size ($size).\")\n    }\n}\n\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal expect fun checkIndexOverflow(index: Int): Int\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal expect fun checkCountOverflow(count: Int): Int\n\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun throwIndexOverflow() { throw ArithmeticException(\"Index overflow has happened.\") }\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun throwCountOverflow() { throw ArithmeticException(\"Count overflow has happened.\") }\n\n",null,null,"/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"UArraysKt\")\n@file:kotlin.jvm.JvmPackageName(\"kotlin.collections.unsigned\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UIntArray.component1(): UInt {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun ULongArray.component1(): ULong {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UByteArray.component1(): UByte {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UShortArray.component1(): UShort {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UIntArray.component2(): UInt {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun ULongArray.component2(): ULong {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UByteArray.component2(): UByte {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UShortArray.component2(): UShort {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UIntArray.component3(): UInt {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun ULongArray.component3(): ULong {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UByteArray.component3(): UByte {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UShortArray.component3(): UShort {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UIntArray.component4(): UInt {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun ULongArray.component4(): ULong {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UByteArray.component4(): UByte {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UShortArray.component4(): UShort {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UIntArray.component5(): UInt {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun ULongArray.component5(): ULong {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UByteArray.component5(): UByte {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UShortArray.component5(): UShort {\n    return get(4)\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic expect fun UIntArray.elementAt(index: Int): UInt\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic expect fun ULongArray.elementAt(index: Int): ULong\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic expect fun UByteArray.elementAt(index: Int): UByte\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic expect fun UShortArray.elementAt(index: Int): UShort\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.elementAtOrElse(index: Int, defaultValue: (Int) -> UInt): UInt {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.elementAtOrElse(index: Int, defaultValue: (Int) -> ULong): ULong {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.elementAtOrElse(index: Int, defaultValue: (Int) -> UByte): UByte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.elementAtOrElse(index: Int, defaultValue: (Int) -> UShort): UShort {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.elementAtOrNull(index: Int): UInt? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.elementAtOrNull(index: Int): ULong? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.elementAtOrNull(index: Int): UByte? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.elementAtOrNull(index: Int): UShort? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.find(predicate: (UInt) -> Boolean): UInt? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.find(predicate: (ULong) -> Boolean): ULong? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.find(predicate: (UByte) -> Boolean): UByte? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.find(predicate: (UShort) -> Boolean): UShort? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.findLast(predicate: (UInt) -> Boolean): UInt? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.findLast(predicate: (ULong) -> Boolean): ULong? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.findLast(predicate: (UByte) -> Boolean): UByte? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.findLast(predicate: (UShort) -> Boolean): UShort? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.first(): UInt {\n    return storage.first().toUInt()\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.first(): ULong {\n    return storage.first().toULong()\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.first(): UByte {\n    return storage.first().toUByte()\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.first(): UShort {\n    return storage.first().toUShort()\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.first(predicate: (UInt) -> Boolean): UInt {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.first(predicate: (ULong) -> Boolean): ULong {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.first(predicate: (UByte) -> Boolean): UByte {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.first(predicate: (UShort) -> Boolean): UShort {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.firstOrNull(): UInt? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.firstOrNull(): ULong? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.firstOrNull(): UByte? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.firstOrNull(): UShort? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.firstOrNull(predicate: (UInt) -> Boolean): UInt? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.firstOrNull(predicate: (ULong) -> Boolean): ULong? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.firstOrNull(predicate: (UByte) -> Boolean): UByte? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.firstOrNull(predicate: (UShort) -> Boolean): UShort? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.getOrElse(index: Int, defaultValue: (Int) -> UInt): UInt {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.getOrElse(index: Int, defaultValue: (Int) -> ULong): ULong {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.getOrElse(index: Int, defaultValue: (Int) -> UByte): UByte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.getOrElse(index: Int, defaultValue: (Int) -> UShort): UShort {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.getOrNull(index: Int): UInt? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.getOrNull(index: Int): ULong? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.getOrNull(index: Int): UByte? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.getOrNull(index: Int): UShort? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.indexOf(element: UInt): Int {\n    return storage.indexOf(element.toInt())\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.indexOf(element: ULong): Int {\n    return storage.indexOf(element.toLong())\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.indexOf(element: UByte): Int {\n    return storage.indexOf(element.toByte())\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.indexOf(element: UShort): Int {\n    return storage.indexOf(element.toShort())\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.indexOfFirst(predicate: (UInt) -> Boolean): Int {\n    return storage.indexOfFirst { predicate(it.toUInt()) }\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.indexOfFirst(predicate: (ULong) -> Boolean): Int {\n    return storage.indexOfFirst { predicate(it.toULong()) }\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.indexOfFirst(predicate: (UByte) -> Boolean): Int {\n    return storage.indexOfFirst { predicate(it.toUByte()) }\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.indexOfFirst(predicate: (UShort) -> Boolean): Int {\n    return storage.indexOfFirst { predicate(it.toUShort()) }\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.indexOfLast(predicate: (UInt) -> Boolean): Int {\n    return storage.indexOfLast { predicate(it.toUInt()) }\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.indexOfLast(predicate: (ULong) -> Boolean): Int {\n    return storage.indexOfLast { predicate(it.toULong()) }\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.indexOfLast(predicate: (UByte) -> Boolean): Int {\n    return storage.indexOfLast { predicate(it.toUByte()) }\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.indexOfLast(predicate: (UShort) -> Boolean): Int {\n    return storage.indexOfLast { predicate(it.toUShort()) }\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.last(): UInt {\n    return storage.last().toUInt()\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.last(): ULong {\n    return storage.last().toULong()\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.last(): UByte {\n    return storage.last().toUByte()\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.last(): UShort {\n    return storage.last().toUShort()\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.last(predicate: (UInt) -> Boolean): UInt {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.last(predicate: (ULong) -> Boolean): ULong {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.last(predicate: (UByte) -> Boolean): UByte {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.last(predicate: (UShort) -> Boolean): UShort {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.lastIndexOf(element: UInt): Int {\n    return storage.lastIndexOf(element.toInt())\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.lastIndexOf(element: ULong): Int {\n    return storage.lastIndexOf(element.toLong())\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.lastIndexOf(element: UByte): Int {\n    return storage.lastIndexOf(element.toByte())\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.lastIndexOf(element: UShort): Int {\n    return storage.lastIndexOf(element.toShort())\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.lastOrNull(): UInt? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.lastOrNull(): ULong? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.lastOrNull(): UByte? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.lastOrNull(): UShort? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.lastOrNull(predicate: (UInt) -> Boolean): UInt? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.lastOrNull(predicate: (ULong) -> Boolean): ULong? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.lastOrNull(predicate: (UByte) -> Boolean): UByte? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.lastOrNull(predicate: (UShort) -> Boolean): UShort? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.random(): UInt {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.random(): ULong {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.random(): UByte {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.random(): UShort {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.random(random: Random): UInt {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.random(random: Random): ULong {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.random(random: Random): UByte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.random(random: Random): UShort {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.randomOrNull(): UInt? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.randomOrNull(): ULong? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.randomOrNull(): UByte? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.randomOrNull(): UShort? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\npublic fun UIntArray.randomOrNull(random: Random): UInt? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\npublic fun ULongArray.randomOrNull(random: Random): ULong? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\npublic fun UByteArray.randomOrNull(random: Random): UByte? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\npublic fun UShortArray.randomOrNull(random: Random): UShort? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.single(): UInt {\n    return storage.single().toUInt()\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.single(): ULong {\n    return storage.single().toULong()\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.single(): UByte {\n    return storage.single().toUByte()\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.single(): UShort {\n    return storage.single().toUShort()\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.single(predicate: (UInt) -> Boolean): UInt {\n    var single: UInt? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as UInt\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.single(predicate: (ULong) -> Boolean): ULong {\n    var single: ULong? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as ULong\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.single(predicate: (UByte) -> Boolean): UByte {\n    var single: UByte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as UByte\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.single(predicate: (UShort) -> Boolean): UShort {\n    var single: UShort? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as UShort\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.singleOrNull(): UInt? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.singleOrNull(): ULong? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.singleOrNull(): UByte? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.singleOrNull(): UShort? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.singleOrNull(predicate: (UInt) -> Boolean): UInt? {\n    var single: UInt? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.singleOrNull(predicate: (ULong) -> Boolean): ULong? {\n    var single: ULong? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.singleOrNull(predicate: (UByte) -> Boolean): UByte? {\n    var single: UByte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.singleOrNull(predicate: (UShort) -> Boolean): UShort? {\n    var single: UShort? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.drop(n: Int): List<UInt> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.drop(n: Int): List<ULong> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.drop(n: Int): List<UByte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.drop(n: Int): List<UShort> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.dropLast(n: Int): List<UInt> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.dropLast(n: Int): List<ULong> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.dropLast(n: Int): List<UByte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.dropLast(n: Int): List<UShort> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.dropLastWhile(predicate: (UInt) -> Boolean): List<UInt> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.dropLastWhile(predicate: (ULong) -> Boolean): List<ULong> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.dropLastWhile(predicate: (UByte) -> Boolean): List<UByte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.dropLastWhile(predicate: (UShort) -> Boolean): List<UShort> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.dropWhile(predicate: (UInt) -> Boolean): List<UInt> {\n    var yielding = false\n    val list = ArrayList<UInt>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.dropWhile(predicate: (ULong) -> Boolean): List<ULong> {\n    var yielding = false\n    val list = ArrayList<ULong>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.dropWhile(predicate: (UByte) -> Boolean): List<UByte> {\n    var yielding = false\n    val list = ArrayList<UByte>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.dropWhile(predicate: (UShort) -> Boolean): List<UShort> {\n    var yielding = false\n    val list = ArrayList<UShort>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.filter(predicate: (UInt) -> Boolean): List<UInt> {\n    return filterTo(ArrayList<UInt>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.filter(predicate: (ULong) -> Boolean): List<ULong> {\n    return filterTo(ArrayList<ULong>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.filter(predicate: (UByte) -> Boolean): List<UByte> {\n    return filterTo(ArrayList<UByte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.filter(predicate: (UShort) -> Boolean): List<UShort> {\n    return filterTo(ArrayList<UShort>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.filterIndexed(predicate: (index: Int, UInt) -> Boolean): List<UInt> {\n    return filterIndexedTo(ArrayList<UInt>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.filterIndexed(predicate: (index: Int, ULong) -> Boolean): List<ULong> {\n    return filterIndexedTo(ArrayList<ULong>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.filterIndexed(predicate: (index: Int, UByte) -> Boolean): List<UByte> {\n    return filterIndexedTo(ArrayList<UByte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.filterIndexed(predicate: (index: Int, UShort) -> Boolean): List<UShort> {\n    return filterIndexedTo(ArrayList<UShort>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <C : MutableCollection<in UInt>> UIntArray.filterIndexedTo(destination: C, predicate: (index: Int, UInt) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <C : MutableCollection<in ULong>> ULongArray.filterIndexedTo(destination: C, predicate: (index: Int, ULong) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <C : MutableCollection<in UByte>> UByteArray.filterIndexedTo(destination: C, predicate: (index: Int, UByte) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <C : MutableCollection<in UShort>> UShortArray.filterIndexedTo(destination: C, predicate: (index: Int, UShort) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.filterNot(predicate: (UInt) -> Boolean): List<UInt> {\n    return filterNotTo(ArrayList<UInt>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.filterNot(predicate: (ULong) -> Boolean): List<ULong> {\n    return filterNotTo(ArrayList<ULong>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.filterNot(predicate: (UByte) -> Boolean): List<UByte> {\n    return filterNotTo(ArrayList<UByte>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.filterNot(predicate: (UShort) -> Boolean): List<UShort> {\n    return filterNotTo(ArrayList<UShort>(), predicate)\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <C : MutableCollection<in UInt>> UIntArray.filterNotTo(destination: C, predicate: (UInt) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <C : MutableCollection<in ULong>> ULongArray.filterNotTo(destination: C, predicate: (ULong) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <C : MutableCollection<in UByte>> UByteArray.filterNotTo(destination: C, predicate: (UByte) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <C : MutableCollection<in UShort>> UShortArray.filterNotTo(destination: C, predicate: (UShort) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <C : MutableCollection<in UInt>> UIntArray.filterTo(destination: C, predicate: (UInt) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <C : MutableCollection<in ULong>> ULongArray.filterTo(destination: C, predicate: (ULong) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <C : MutableCollection<in UByte>> UByteArray.filterTo(destination: C, predicate: (UByte) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <C : MutableCollection<in UShort>> UShortArray.filterTo(destination: C, predicate: (UShort) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.slice(indices: IntRange): List<UInt> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.slice(indices: IntRange): List<ULong> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.slice(indices: IntRange): List<UByte> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.slice(indices: IntRange): List<UShort> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.slice(indices: Iterable<Int>): List<UInt> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<UInt>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.slice(indices: Iterable<Int>): List<ULong> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<ULong>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.slice(indices: Iterable<Int>): List<UByte> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<UByte>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.slice(indices: Iterable<Int>): List<UShort> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<UShort>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.sliceArray(indices: Collection<Int>): UIntArray {\n    return UIntArray(storage.sliceArray(indices))\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.sliceArray(indices: Collection<Int>): ULongArray {\n    return ULongArray(storage.sliceArray(indices))\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.sliceArray(indices: Collection<Int>): UByteArray {\n    return UByteArray(storage.sliceArray(indices))\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.sliceArray(indices: Collection<Int>): UShortArray {\n    return UShortArray(storage.sliceArray(indices))\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.sliceArray(indices: IntRange): UIntArray {\n    return UIntArray(storage.sliceArray(indices))\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.sliceArray(indices: IntRange): ULongArray {\n    return ULongArray(storage.sliceArray(indices))\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.sliceArray(indices: IntRange): UByteArray {\n    return UByteArray(storage.sliceArray(indices))\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.sliceArray(indices: IntRange): UShortArray {\n    return UShortArray(storage.sliceArray(indices))\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.take(n: Int): List<UInt> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<UInt>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.take(n: Int): List<ULong> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<ULong>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.take(n: Int): List<UByte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<UByte>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.take(n: Int): List<UShort> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<UShort>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.takeLast(n: Int): List<UInt> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<UInt>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.takeLast(n: Int): List<ULong> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<ULong>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.takeLast(n: Int): List<UByte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<UByte>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.takeLast(n: Int): List<UShort> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<UShort>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.takeLastWhile(predicate: (UInt) -> Boolean): List<UInt> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.takeLastWhile(predicate: (ULong) -> Boolean): List<ULong> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.takeLastWhile(predicate: (UByte) -> Boolean): List<UByte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.takeLastWhile(predicate: (UShort) -> Boolean): List<UShort> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.takeWhile(predicate: (UInt) -> Boolean): List<UInt> {\n    val list = ArrayList<UInt>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.takeWhile(predicate: (ULong) -> Boolean): List<ULong> {\n    val list = ArrayList<ULong>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.takeWhile(predicate: (UByte) -> Boolean): List<UByte> {\n    val list = ArrayList<UByte>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.takeWhile(predicate: (UShort) -> Boolean): List<UShort> {\n    val list = ArrayList<UShort>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the array in-place.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.reverse(): Unit {\n    storage.reverse()\n}\n\n/**\n * Reverses elements in the array in-place.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.reverse(): Unit {\n    storage.reverse()\n}\n\n/**\n * Reverses elements in the array in-place.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.reverse(): Unit {\n    storage.reverse()\n}\n\n/**\n * Reverses elements in the array in-place.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.reverse(): Unit {\n    storage.reverse()\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.reversed(): List<UInt> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.reversed(): List<ULong> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.reversed(): List<UByte> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.reversed(): List<UShort> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.reversedArray(): UIntArray {\n    return UIntArray(storage.reversedArray())\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.reversedArray(): ULongArray {\n    return ULongArray(storage.reversedArray())\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.reversedArray(): UByteArray {\n    return UByteArray(storage.reversedArray())\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.reversedArray(): UShortArray {\n    return UShortArray(storage.reversedArray())\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.sorted(): List<UInt> {\n    return copyOf().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.sorted(): List<ULong> {\n    return copyOf().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.sorted(): List<UByte> {\n    return copyOf().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.sorted(): List<UShort> {\n    return copyOf().apply { sort() }.asList()\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.sortedArray(): UIntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.sortedArray(): ULongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.sortedArray(): UByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.sortedArray(): UShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.sortedArrayDescending(): UIntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.sortedArrayDescending(): ULongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.sortedArrayDescending(): UByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.sortedArrayDescending(): UShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.sortedDescending(): List<UInt> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.sortedDescending(): List<ULong> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.sortedDescending(): List<UByte> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.sortedDescending(): List<UShort> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns an array of type [ByteArray], which is a view of this array where each element is a signed reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.asByteArray(): ByteArray {\n    return storage\n}\n\n/**\n * Returns an array of type [IntArray], which is a view of this array where each element is a signed reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.asIntArray(): IntArray {\n    return storage\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic expect fun UIntArray.asList(): List<UInt>\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic expect fun ULongArray.asList(): List<ULong>\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic expect fun UByteArray.asList(): List<UByte>\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic expect fun UShortArray.asList(): List<UShort>\n\n/**\n * Returns an array of type [LongArray], which is a view of this array where each element is a signed reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.asLongArray(): LongArray {\n    return storage\n}\n\n/**\n * Returns an array of type [ShortArray], which is a view of this array where each element is a signed reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.asShortArray(): ShortArray {\n    return storage\n}\n\n/**\n * Returns an array of type [UByteArray], which is a view of this array where each element is an unsigned reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.asUByteArray(): UByteArray {\n    return UByteArray(this)\n}\n\n/**\n * Returns an array of type [UIntArray], which is a view of this array where each element is an unsigned reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.asUIntArray(): UIntArray {\n    return UIntArray(this)\n}\n\n/**\n * Returns an array of type [ULongArray], which is a view of this array where each element is an unsigned reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.asULongArray(): ULongArray {\n    return ULongArray(this)\n}\n\n/**\n * Returns an array of type [UShortArray], which is a view of this array where each element is an unsigned reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.asUShortArray(): UShortArray {\n    return UShortArray(this)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic infix fun UIntArray.contentEquals(other: UIntArray): Boolean {\n    return storage.contentEquals(other.storage)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic infix fun ULongArray.contentEquals(other: ULongArray): Boolean {\n    return storage.contentEquals(other.storage)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic infix fun UByteArray.contentEquals(other: UByteArray): Boolean {\n    return storage.contentEquals(other.storage)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic infix fun UShortArray.contentEquals(other: UShortArray): Boolean {\n    return storage.contentEquals(other.storage)\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.contentHashCode(): Int {\n    return storage.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.contentHashCode(): Int {\n    return storage.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.contentHashCode(): Int {\n    return storage.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.contentHashCode(): Int {\n    return storage.contentHashCode()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.contentToString(): String {\n    return joinToString(\", \", \"[\", \"]\")\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.contentToString(): String {\n    return joinToString(\", \", \"[\", \"]\")\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.contentToString(): String {\n    return joinToString(\", \", \"[\", \"]\")\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.contentToString(): String {\n    return joinToString(\", \", \"[\", \"]\")\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.copyInto(destination: UIntArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): UIntArray {\n    storage.copyInto(destination.storage, destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.copyInto(destination: ULongArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ULongArray {\n    storage.copyInto(destination.storage, destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.copyInto(destination: UByteArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): UByteArray {\n    storage.copyInto(destination.storage, destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.copyInto(destination: UShortArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): UShortArray {\n    storage.copyInto(destination.storage, destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.copyOf(): UIntArray {\n    return UIntArray(storage.copyOf())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.copyOf(): ULongArray {\n    return ULongArray(storage.copyOf())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.copyOf(): UByteArray {\n    return UByteArray(storage.copyOf())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.copyOf(): UShortArray {\n    return UShortArray(storage.copyOf())\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.copyOf(newSize: Int): UIntArray {\n    return UIntArray(storage.copyOf(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.copyOf(newSize: Int): ULongArray {\n    return ULongArray(storage.copyOf(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.copyOf(newSize: Int): UByteArray {\n    return UByteArray(storage.copyOf(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.copyOf(newSize: Int): UShortArray {\n    return UShortArray(storage.copyOf(newSize))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.copyOfRange(fromIndex: Int, toIndex: Int): UIntArray {\n    return UIntArray(storage.copyOfRange(fromIndex, toIndex))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.copyOfRange(fromIndex: Int, toIndex: Int): ULongArray {\n    return ULongArray(storage.copyOfRange(fromIndex, toIndex))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.copyOfRange(fromIndex: Int, toIndex: Int): UByteArray {\n    return UByteArray(storage.copyOfRange(fromIndex, toIndex))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.copyOfRange(fromIndex: Int, toIndex: Int): UShortArray {\n    return UShortArray(storage.copyOfRange(fromIndex, toIndex))\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.fill(element: UInt, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    storage.fill(element.toInt(), fromIndex, toIndex)\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.fill(element: ULong, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    storage.fill(element.toLong(), fromIndex, toIndex)\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.fill(element: UByte, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    storage.fill(element.toByte(), fromIndex, toIndex)\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.fill(element: UShort, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    storage.fill(element.toShort(), fromIndex, toIndex)\n}\n\n/**\n * Returns the range of valid indices for the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic inline val UIntArray.indices: IntRange\n    get() = storage.indices\n\n/**\n * Returns the range of valid indices for the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic inline val ULongArray.indices: IntRange\n    get() = storage.indices\n\n/**\n * Returns the range of valid indices for the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic inline val UByteArray.indices: IntRange\n    get() = storage.indices\n\n/**\n * Returns the range of valid indices for the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic inline val UShortArray.indices: IntRange\n    get() = storage.indices\n\n/**\n * Returns the last valid index for the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic inline val UIntArray.lastIndex: Int\n    get() = storage.lastIndex\n\n/**\n * Returns the last valid index for the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic inline val ULongArray.lastIndex: Int\n    get() = storage.lastIndex\n\n/**\n * Returns the last valid index for the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic inline val UByteArray.lastIndex: Int\n    get() = storage.lastIndex\n\n/**\n * Returns the last valid index for the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic inline val UShortArray.lastIndex: Int\n    get() = storage.lastIndex\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UIntArray.plus(element: UInt): UIntArray {\n    return UIntArray(storage + element.toInt())\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun ULongArray.plus(element: ULong): ULongArray {\n    return ULongArray(storage + element.toLong())\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UByteArray.plus(element: UByte): UByteArray {\n    return UByteArray(storage + element.toByte())\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UShortArray.plus(element: UShort): UShortArray {\n    return UShortArray(storage + element.toShort())\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic operator fun UIntArray.plus(elements: Collection<UInt>): UIntArray {\n    var index = size\n    val result = storage.copyOf(size + elements.size)\n    for (element in elements) result[index++] = element.toInt()\n    return UIntArray(result)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic operator fun ULongArray.plus(elements: Collection<ULong>): ULongArray {\n    var index = size\n    val result = storage.copyOf(size + elements.size)\n    for (element in elements) result[index++] = element.toLong()\n    return ULongArray(result)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic operator fun UByteArray.plus(elements: Collection<UByte>): UByteArray {\n    var index = size\n    val result = storage.copyOf(size + elements.size)\n    for (element in elements) result[index++] = element.toByte()\n    return UByteArray(result)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic operator fun UShortArray.plus(elements: Collection<UShort>): UShortArray {\n    var index = size\n    val result = storage.copyOf(size + elements.size)\n    for (element in elements) result[index++] = element.toShort()\n    return UShortArray(result)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UIntArray.plus(elements: UIntArray): UIntArray {\n    return UIntArray(storage + elements.storage)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun ULongArray.plus(elements: ULongArray): ULongArray {\n    return ULongArray(storage + elements.storage)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UByteArray.plus(elements: UByteArray): UByteArray {\n    return UByteArray(storage + elements.storage)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UShortArray.plus(elements: UShortArray): UShortArray {\n    return UShortArray(storage + elements.storage)\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.sort(): Unit {\n    if (size > 1) sortArray(this)\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.sort(): Unit {\n    if (size > 1) sortArray(this)\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.sort(): Unit {\n    if (size > 1) sortArray(this)\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.sort(): Unit {\n    if (size > 1) sortArray(this)\n}\n\n/**\n * Returns an array of type [ByteArray], which is a copy of this array where each element is a signed reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.toByteArray(): ByteArray {\n    return storage.copyOf()\n}\n\n/**\n * Returns an array of type [IntArray], which is a copy of this array where each element is a signed reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.toIntArray(): IntArray {\n    return storage.copyOf()\n}\n\n/**\n * Returns an array of type [LongArray], which is a copy of this array where each element is a signed reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.toLongArray(): LongArray {\n    return storage.copyOf()\n}\n\n/**\n * Returns an array of type [ShortArray], which is a copy of this array where each element is a signed reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.toShortArray(): ShortArray {\n    return storage.copyOf()\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.toTypedArray(): Array<UInt> {\n    return Array(size) { index -> this[index] }\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.toTypedArray(): Array<ULong> {\n    return Array(size) { index -> this[index] }\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.toTypedArray(): Array<UByte> {\n    return Array(size) { index -> this[index] }\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.toTypedArray(): Array<UShort> {\n    return Array(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of UByte containing all of the elements of this generic array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun Array<out UByte>.toUByteArray(): UByteArray {\n    return UByteArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of type [UByteArray], which is a copy of this array where each element is an unsigned reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.toUByteArray(): UByteArray {\n    return UByteArray(this.copyOf())\n}\n\n/**\n * Returns an array of UInt containing all of the elements of this generic array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun Array<out UInt>.toUIntArray(): UIntArray {\n    return UIntArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of type [UIntArray], which is a copy of this array where each element is an unsigned reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.toUIntArray(): UIntArray {\n    return UIntArray(this.copyOf())\n}\n\n/**\n * Returns an array of ULong containing all of the elements of this generic array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun Array<out ULong>.toULongArray(): ULongArray {\n    return ULongArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of type [ULongArray], which is a copy of this array where each element is an unsigned reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.toULongArray(): ULongArray {\n    return ULongArray(this.copyOf())\n}\n\n/**\n * Returns an array of UShort containing all of the elements of this generic array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun Array<out UShort>.toUShortArray(): UShortArray {\n    return UShortArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of type [UShortArray], which is a copy of this array where each element is an unsigned reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.toUShortArray(): UShortArray {\n    return UShortArray(this.copyOf())\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UIntArray.flatMap(transform: (UInt) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> ULongArray.flatMap(transform: (ULong) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UByteArray.flatMap(transform: (UByte) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UShortArray.flatMap(transform: (UShort) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> UIntArray.flatMapTo(destination: C, transform: (UInt) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> ULongArray.flatMapTo(destination: C, transform: (ULong) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> UByteArray.flatMapTo(destination: C, transform: (UByte) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> UShortArray.flatMapTo(destination: C, transform: (UShort) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K> UIntArray.groupBy(keySelector: (UInt) -> K): Map<K, List<UInt>> {\n    return groupByTo(LinkedHashMap<K, MutableList<UInt>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K> ULongArray.groupBy(keySelector: (ULong) -> K): Map<K, List<ULong>> {\n    return groupByTo(LinkedHashMap<K, MutableList<ULong>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K> UByteArray.groupBy(keySelector: (UByte) -> K): Map<K, List<UByte>> {\n    return groupByTo(LinkedHashMap<K, MutableList<UByte>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K> UShortArray.groupBy(keySelector: (UShort) -> K): Map<K, List<UShort>> {\n    return groupByTo(LinkedHashMap<K, MutableList<UShort>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> UIntArray.groupBy(keySelector: (UInt) -> K, valueTransform: (UInt) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> ULongArray.groupBy(keySelector: (ULong) -> K, valueTransform: (ULong) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> UByteArray.groupBy(keySelector: (UByte) -> K, valueTransform: (UByte) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> UShortArray.groupBy(keySelector: (UShort) -> K, valueTransform: (UShort) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K, M : MutableMap<in K, MutableList<UInt>>> UIntArray.groupByTo(destination: M, keySelector: (UInt) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<UInt>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K, M : MutableMap<in K, MutableList<ULong>>> ULongArray.groupByTo(destination: M, keySelector: (ULong) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<ULong>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K, M : MutableMap<in K, MutableList<UByte>>> UByteArray.groupByTo(destination: M, keySelector: (UByte) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<UByte>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K, M : MutableMap<in K, MutableList<UShort>>> UShortArray.groupByTo(destination: M, keySelector: (UShort) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<UShort>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> UIntArray.groupByTo(destination: M, keySelector: (UInt) -> K, valueTransform: (UInt) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ULongArray.groupByTo(destination: M, keySelector: (ULong) -> K, valueTransform: (ULong) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> UByteArray.groupByTo(destination: M, keySelector: (UByte) -> K, valueTransform: (UByte) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> UShortArray.groupByTo(destination: M, keySelector: (UShort) -> K, valueTransform: (UShort) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UIntArray.map(transform: (UInt) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> ULongArray.map(transform: (ULong) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UByteArray.map(transform: (UByte) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UShortArray.map(transform: (UShort) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UIntArray.mapIndexed(transform: (index: Int, UInt) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> ULongArray.mapIndexed(transform: (index: Int, ULong) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UByteArray.mapIndexed(transform: (index: Int, UByte) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UShortArray.mapIndexed(transform: (index: Int, UShort) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> UIntArray.mapIndexedTo(destination: C, transform: (index: Int, UInt) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> ULongArray.mapIndexedTo(destination: C, transform: (index: Int, ULong) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> UByteArray.mapIndexedTo(destination: C, transform: (index: Int, UByte) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> UShortArray.mapIndexedTo(destination: C, transform: (index: Int, UShort) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> UIntArray.mapTo(destination: C, transform: (UInt) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> ULongArray.mapTo(destination: C, transform: (ULong) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> UByteArray.mapTo(destination: C, transform: (UByte) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> UShortArray.mapTo(destination: C, transform: (UShort) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.withIndex(): Iterable<IndexedValue<UInt>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.withIndex(): Iterable<IndexedValue<ULong>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.withIndex(): Iterable<IndexedValue<UByte>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.withIndex(): Iterable<IndexedValue<UShort>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.all(predicate: (UInt) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.all(predicate: (ULong) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.all(predicate: (UByte) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.all(predicate: (UShort) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.any(): Boolean {\n    return storage.any()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.any(): Boolean {\n    return storage.any()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.any(): Boolean {\n    return storage.any()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.any(): Boolean {\n    return storage.any()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.any(predicate: (UInt) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.any(predicate: (ULong) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.any(predicate: (UByte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.any(predicate: (UShort) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.count(predicate: (UInt) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.count(predicate: (ULong) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.count(predicate: (UByte) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.count(predicate: (UShort) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UIntArray.fold(initial: R, operation: (acc: R, UInt) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> ULongArray.fold(initial: R, operation: (acc: R, ULong) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UByteArray.fold(initial: R, operation: (acc: R, UByte) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UShortArray.fold(initial: R, operation: (acc: R, UShort) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UIntArray.foldIndexed(initial: R, operation: (index: Int, acc: R, UInt) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> ULongArray.foldIndexed(initial: R, operation: (index: Int, acc: R, ULong) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UByteArray.foldIndexed(initial: R, operation: (index: Int, acc: R, UByte) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UShortArray.foldIndexed(initial: R, operation: (index: Int, acc: R, UShort) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UIntArray.foldRight(initial: R, operation: (UInt, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> ULongArray.foldRight(initial: R, operation: (ULong, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UByteArray.foldRight(initial: R, operation: (UByte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UShortArray.foldRight(initial: R, operation: (UShort, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UIntArray.foldRightIndexed(initial: R, operation: (index: Int, UInt, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> ULongArray.foldRightIndexed(initial: R, operation: (index: Int, ULong, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UByteArray.foldRightIndexed(initial: R, operation: (index: Int, UByte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UShortArray.foldRightIndexed(initial: R, operation: (index: Int, UShort, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.forEach(action: (UInt) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.forEach(action: (ULong) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.forEach(action: (UByte) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.forEach(action: (UShort) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.forEachIndexed(action: (index: Int, UInt) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.forEachIndexed(action: (index: Int, ULong) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.forEachIndexed(action: (index: Int, UByte) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.forEachIndexed(action: (index: Int, UShort) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.max(): UInt? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.max(): ULong? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.max(): UByte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.max(): UShort? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> UIntArray.maxBy(selector: (UInt) -> R): UInt? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ULongArray.maxBy(selector: (ULong) -> R): ULong? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> UByteArray.maxBy(selector: (UByte) -> R): UByte? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> UShortArray.maxBy(selector: (UShort) -> R): UShort? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.maxWith(comparator: Comparator<in UInt>): UInt? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.maxWith(comparator: Comparator<in ULong>): ULong? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.maxWith(comparator: Comparator<in UByte>): UByte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.maxWith(comparator: Comparator<in UShort>): UShort? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.min(): UInt? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.min(): ULong? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.min(): UByte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.min(): UShort? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> UIntArray.minBy(selector: (UInt) -> R): UInt? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ULongArray.minBy(selector: (ULong) -> R): ULong? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> UByteArray.minBy(selector: (UByte) -> R): UByte? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> UShortArray.minBy(selector: (UShort) -> R): UShort? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.minWith(comparator: Comparator<in UInt>): UInt? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.minWith(comparator: Comparator<in ULong>): ULong? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.minWith(comparator: Comparator<in UByte>): UByte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.minWith(comparator: Comparator<in UShort>): UShort? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.none(predicate: (UInt) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.none(predicate: (ULong) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.none(predicate: (UByte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.none(predicate: (UShort) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.reduce(operation: (acc: UInt, UInt) -> UInt): UInt {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.reduce(operation: (acc: ULong, ULong) -> ULong): ULong {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.reduce(operation: (acc: UByte, UByte) -> UByte): UByte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.reduce(operation: (acc: UShort, UShort) -> UShort): UShort {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.reduceIndexed(operation: (index: Int, acc: UInt, UInt) -> UInt): UInt {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.reduceIndexed(operation: (index: Int, acc: ULong, ULong) -> ULong): ULong {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.reduceIndexed(operation: (index: Int, acc: UByte, UByte) -> UByte): UByte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.reduceIndexed(operation: (index: Int, acc: UShort, UShort) -> UShort): UShort {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.reduceOrNull(operation: (acc: UInt, UInt) -> UInt): UInt? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.reduceOrNull(operation: (acc: ULong, ULong) -> ULong): ULong? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.reduceOrNull(operation: (acc: UByte, UByte) -> UByte): UByte? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.reduceOrNull(operation: (acc: UShort, UShort) -> UShort): UShort? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.reduceRight(operation: (UInt, acc: UInt) -> UInt): UInt {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.reduceRight(operation: (ULong, acc: ULong) -> ULong): ULong {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.reduceRight(operation: (UByte, acc: UByte) -> UByte): UByte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.reduceRight(operation: (UShort, acc: UShort) -> UShort): UShort {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.reduceRightIndexed(operation: (index: Int, UInt, acc: UInt) -> UInt): UInt {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.reduceRightIndexed(operation: (index: Int, ULong, acc: ULong) -> ULong): ULong {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.reduceRightIndexed(operation: (index: Int, UByte, acc: UByte) -> UByte): UByte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.reduceRightIndexed(operation: (index: Int, UShort, acc: UShort) -> UShort): UShort {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.reduceRightOrNull(operation: (UInt, acc: UInt) -> UInt): UInt? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.reduceRightOrNull(operation: (ULong, acc: ULong) -> ULong): ULong? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.reduceRightOrNull(operation: (UByte, acc: UByte) -> UByte): UByte? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.reduceRightOrNull(operation: (UShort, acc: UShort) -> UShort): UShort? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UIntArray.scan(initial: R, operation: (acc: R, UInt) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> ULongArray.scan(initial: R, operation: (acc: R, ULong) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UByteArray.scan(initial: R, operation: (acc: R, UByte) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UShortArray.scan(initial: R, operation: (acc: R, UShort) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UIntArray.scanIndexed(initial: R, operation: (index: Int, acc: R, UInt) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> ULongArray.scanIndexed(initial: R, operation: (index: Int, acc: R, ULong) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UByteArray.scanIndexed(initial: R, operation: (index: Int, acc: R, UByte) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UShortArray.scanIndexed(initial: R, operation: (index: Int, acc: R, UShort) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.scanReduce(operation: (acc: UInt, UInt) -> UInt): List<UInt> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<UInt>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.scanReduce(operation: (acc: ULong, ULong) -> ULong): List<ULong> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<ULong>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.scanReduce(operation: (acc: UByte, UByte) -> UByte): List<UByte> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<UByte>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.scanReduce(operation: (acc: UShort, UShort) -> UShort): List<UShort> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<UShort>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.scanReduceIndexed(operation: (index: Int, acc: UInt, UInt) -> UInt): List<UInt> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<UInt>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.scanReduceIndexed(operation: (index: Int, acc: ULong, ULong) -> ULong): List<ULong> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<ULong>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.scanReduceIndexed(operation: (index: Int, acc: UByte, UByte) -> UByte): List<UByte> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<UByte>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.scanReduceIndexed(operation: (index: Int, acc: UShort, UShort) -> UShort): List<UShort> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<UShort>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.sumBy(selector: (UInt) -> UInt): UInt {\n    var sum: UInt = 0u\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.sumBy(selector: (ULong) -> UInt): UInt {\n    var sum: UInt = 0u\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.sumBy(selector: (UByte) -> UInt): UInt {\n    var sum: UInt = 0u\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.sumBy(selector: (UShort) -> UInt): UInt {\n    var sum: UInt = 0u\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.sumByDouble(selector: (UInt) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.sumByDouble(selector: (ULong) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.sumByDouble(selector: (UByte) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.sumByDouble(selector: (UShort) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic infix fun <R> UIntArray.zip(other: Array<out R>): List<Pair<UInt, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic infix fun <R> ULongArray.zip(other: Array<out R>): List<Pair<ULong, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic infix fun <R> UByteArray.zip(other: Array<out R>): List<Pair<UByte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic infix fun <R> UShortArray.zip(other: Array<out R>): List<Pair<UShort, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, V> UIntArray.zip(other: Array<out R>, transform: (a: UInt, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, V> ULongArray.zip(other: Array<out R>, transform: (a: ULong, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, V> UByteArray.zip(other: Array<out R>, transform: (a: UByte, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, V> UShortArray.zip(other: Array<out R>, transform: (a: UShort, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic infix fun <R> UIntArray.zip(other: Iterable<R>): List<Pair<UInt, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic infix fun <R> ULongArray.zip(other: Iterable<R>): List<Pair<ULong, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic infix fun <R> UByteArray.zip(other: Iterable<R>): List<Pair<UByte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic infix fun <R> UShortArray.zip(other: Iterable<R>): List<Pair<UShort, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, V> UIntArray.zip(other: Iterable<R>, transform: (a: UInt, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, V> ULongArray.zip(other: Iterable<R>, transform: (a: ULong, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, V> UByteArray.zip(other: Iterable<R>, transform: (a: UByte, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, V> UShortArray.zip(other: Iterable<R>, transform: (a: UShort, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic infix fun UIntArray.zip(other: UIntArray): List<Pair<UInt, UInt>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic infix fun ULongArray.zip(other: ULongArray): List<Pair<ULong, ULong>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic infix fun UByteArray.zip(other: UByteArray): List<Pair<UByte, UByte>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic infix fun UShortArray.zip(other: UShortArray): List<Pair<UShort, UShort>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <V> UIntArray.zip(other: UIntArray, transform: (a: UInt, b: UInt) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <V> ULongArray.zip(other: ULongArray, transform: (a: ULong, b: ULong) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <V> UByteArray.zip(other: UByteArray, transform: (a: UByte, b: UByte) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <V> UShortArray.zip(other: UShortArray, transform: (a: UShort, b: UShort) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun Array<out UInt>.sum(): UInt {\n    var sum: UInt = 0u\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun Array<out ULong>.sum(): ULong {\n    var sum: ULong = 0uL\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfUByte\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun Array<out UByte>.sum(): UInt {\n    var sum: UInt = 0u\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfUShort\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun Array<out UShort>.sum(): UInt {\n    var sum: UInt = 0u\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.sum(): UInt {\n    return storage.sum().toUInt()\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.sum(): ULong {\n    return storage.sum().toULong()\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.sum(): UInt {\n    return sumBy { it.toUInt() }\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.sum(): UInt {\n    return sumBy { it.toUInt() }\n}\n\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin\n\nimport kotlin.experimental.*\n\n@Suppress(\"NON_PUBLIC_PRIMARY_CONSTRUCTOR_OF_INLINE_CLASS\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic inline class UByte @PublishedApi internal constructor(@PublishedApi internal val data: Byte) : Comparable<UByte> {\n\n    companion object {\n        /**\n         * A constant holding the minimum value an instance of UByte can have.\n         */\n        public const val MIN_VALUE: UByte = UByte(0)\n\n        /**\n         * A constant holding the maximum value an instance of UByte can have.\n         */\n        public const val MAX_VALUE: UByte = UByte(-1)\n\n        /**\n         * The number of bytes used to represent an instance of UByte in a binary form.\n         */\n        public const val SIZE_BYTES: Int = 1\n\n        /**\n         * The number of bits used to represent an instance of UByte in a binary form.\n         */\n        public const val SIZE_BITS: Int = 8\n    }\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    @Suppress(\"OVERRIDE_BY_INLINE\")\n    public override inline operator fun compareTo(other: UByte): Int = this.toInt().compareTo(other.toInt())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UShort): Int = this.toInt().compareTo(other.toInt())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UInt): Int = this.toUInt().compareTo(other)\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: ULong): Int = this.toULong().compareTo(other)\n\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UByte): UInt = this.toUInt().plus(other.toUInt())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UShort): UInt = this.toUInt().plus(other.toUInt())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UInt): UInt = this.toUInt().plus(other)\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: ULong): ULong = this.toULong().plus(other)\n\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UByte): UInt = this.toUInt().minus(other.toUInt())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UShort): UInt = this.toUInt().minus(other.toUInt())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UInt): UInt = this.toUInt().minus(other)\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: ULong): ULong = this.toULong().minus(other)\n\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UByte): UInt = this.toUInt().times(other.toUInt())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UShort): UInt = this.toUInt().times(other.toUInt())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UInt): UInt = this.toUInt().times(other)\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: ULong): ULong = this.toULong().times(other)\n\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UByte): UInt = this.toUInt().div(other.toUInt())\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UShort): UInt = this.toUInt().div(other.toUInt())\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UInt): UInt = this.toUInt().div(other)\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: ULong): ULong = this.toULong().div(other)\n\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UByte): UInt = this.toUInt().rem(other.toUInt())\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UShort): UInt = this.toUInt().rem(other.toUInt())\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UInt): UInt = this.toUInt().rem(other)\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: ULong): ULong = this.toULong().rem(other)\n\n    /** Increments this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun inc(): UByte = UByte(data.inc())\n    /** Decrements this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun dec(): UByte = UByte(data.dec())\n\n    /** Creates a range from this value to the specified [other] value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rangeTo(other: UByte): UIntRange = UIntRange(this.toUInt(), other.toUInt())\n\n    /** Performs a bitwise AND operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun and(other: UByte): UByte = UByte(this.data and other.data)\n    /** Performs a bitwise OR operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun or(other: UByte): UByte = UByte(this.data or other.data)\n    /** Performs a bitwise XOR operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun xor(other: UByte): UByte = UByte(this.data xor other.data)\n    /** Inverts the bits in this value. */\n    @kotlin.internal.InlineOnly\n    public inline fun inv(): UByte = UByte(data.inv())\n\n    /**\n     * Converts this [UByte] value to [Byte].\n     *\n     * If this value is less than or equals to [Byte.MAX_VALUE], the resulting `Byte` value represents\n     * the same numerical value as this `UByte`. Otherwise the result is negative.\n     *\n     * The resulting `Byte` value has the same binary representation as this `UByte` value.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toByte(): Byte = data\n    /**\n     * Converts this [UByte] value to [Short].\n     *\n     * The resulting `Short` value represents the same numerical value as this `UByte`.\n     *\n     * The least significant 8 bits of the resulting `Short` value are the same as the bits of this `UByte` value,\n     * whereas the most significant 8 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toShort(): Short = data.toShort() and 0xFF\n    /**\n     * Converts this [UByte] value to [Int].\n     *\n     * The resulting `Int` value represents the same numerical value as this `UByte`.\n     *\n     * The least significant 8 bits of the resulting `Int` value are the same as the bits of this `UByte` value,\n     * whereas the most significant 24 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toInt(): Int = data.toInt() and 0xFF\n    /**\n     * Converts this [UByte] value to [Long].\n     *\n     * The resulting `Long` value represents the same numerical value as this `UByte`.\n     *\n     * The least significant 8 bits of the resulting `Long` value are the same as the bits of this `UByte` value,\n     * whereas the most significant 56 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toLong(): Long = data.toLong() and 0xFF\n\n    /** Returns this value. */\n    @kotlin.internal.InlineOnly\n    public inline fun toUByte(): UByte = this\n    /**\n     * Converts this [UByte] value to [UShort].\n     *\n     * The resulting `UShort` value represents the same numerical value as this `UByte`.\n     *\n     * The least significant 8 bits of the resulting `UShort` value are the same as the bits of this `UByte` value,\n     * whereas the most significant 8 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toUShort(): UShort = UShort(data.toShort() and 0xFF)\n    /**\n     * Converts this [UByte] value to [UInt].\n     *\n     * The resulting `UInt` value represents the same numerical value as this `UByte`.\n     *\n     * The least significant 8 bits of the resulting `UInt` value are the same as the bits of this `UByte` value,\n     * whereas the most significant 24 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toUInt(): UInt = UInt(data.toInt() and 0xFF)\n    /**\n     * Converts this [UByte] value to [ULong].\n     *\n     * The resulting `ULong` value represents the same numerical value as this `UByte`.\n     *\n     * The least significant 8 bits of the resulting `ULong` value are the same as the bits of this `UByte` value,\n     * whereas the most significant 56 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toULong(): ULong = ULong(data.toLong() and 0xFF)\n\n    /**\n     * Converts this [UByte] value to [Float].\n     *\n     * The resulting `Float` value represents the same numerical value as this `UByte`.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toFloat(): Float = this.toInt().toFloat()\n    /**\n     * Converts this [UByte] value to [Double].\n     *\n     * The resulting `Double` value represents the same numerical value as this `UByte`.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toDouble(): Double = this.toInt().toDouble()\n\n    public override fun toString(): String = toInt().toString()\n\n}\n\n/**\n * Converts this [Byte] value to [UByte].\n *\n * If this value is positive, the resulting `UByte` value represents the same numerical value as this `Byte`.\n *\n * The resulting `UByte` value has the same binary representation as this `Byte` value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Byte.toUByte(): UByte = UByte(this)\n/**\n * Converts this [Short] value to [UByte].\n *\n * If this value is positive and less than or equals to [UByte.MAX_VALUE], the resulting `UByte` value represents\n * the same numerical value as this `Short`.\n *\n * The resulting `UByte` value is represented by the least significant 8 bits of this `Short` value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Short.toUByte(): UByte = UByte(this.toByte())\n/**\n * Converts this [Int] value to [UByte].\n *\n * If this value is positive and less than or equals to [UByte.MAX_VALUE], the resulting `UByte` value represents\n * the same numerical value as this `Int`.\n *\n * The resulting `UByte` value is represented by the least significant 8 bits of this `Int` value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Int.toUByte(): UByte = UByte(this.toByte())\n/**\n * Converts this [Long] value to [UByte].\n *\n * If this value is positive and less than or equals to [UByte.MAX_VALUE], the resulting `UByte` value represents\n * the same numerical value as this `Long`.\n *\n * The resulting `UByte` value is represented by the least significant 8 bits of this `Long` value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Long.toUByte(): UByte = UByte(this.toByte())\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\n\n/**\n * Returns a character at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this char sequence.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun CharSequence.elementAt(index: Int): Char\n\n/**\n * Returns a character at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this char sequence.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.elementAtOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns a character at the given [index] or `null` if the [index] is out of bounds of this char sequence.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.elementAtOrNull(index: Int): Char? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first character matching the given [predicate], or `null` if no such character was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.find(predicate: (Char) -> Boolean): Char? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last character matching the given [predicate], or `null` if no such character was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.findLast(predicate: (Char) -> Boolean): Char? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first character.\n * @throws [NoSuchElementException] if the char sequence is empty.\n */\npublic fun CharSequence.first(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Char sequence is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first character matching the given [predicate].\n * @throws [NoSuchElementException] if no such character is found.\n */\npublic inline fun CharSequence.first(predicate: (Char) -> Boolean): Char {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Char sequence contains no character matching the predicate.\")\n}\n\n/**\n * Returns the first character, or `null` if the char sequence is empty.\n */\npublic fun CharSequence.firstOrNull(): Char? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first character matching the given [predicate], or `null` if character was not found.\n */\npublic inline fun CharSequence.firstOrNull(predicate: (Char) -> Boolean): Char? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns a character at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this char sequence.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.getOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns a character at the given [index] or `null` if the [index] is out of bounds of this char sequence.\n */\npublic fun CharSequence.getOrNull(index: Int): Char? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns index of the first character matching the given [predicate], or -1 if the char sequence does not contain such character.\n */\npublic inline fun CharSequence.indexOfFirst(predicate: (Char) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last character matching the given [predicate], or -1 if the char sequence does not contain such character.\n */\npublic inline fun CharSequence.indexOfLast(predicate: (Char) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last character.\n * @throws [NoSuchElementException] if the char sequence is empty.\n */\npublic fun CharSequence.last(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Char sequence is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last character matching the given [predicate].\n * @throws [NoSuchElementException] if no such character is found.\n */\npublic inline fun CharSequence.last(predicate: (Char) -> Boolean): Char {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Char sequence contains no character matching the predicate.\")\n}\n\n/**\n * Returns the last character, or `null` if the char sequence is empty.\n */\npublic fun CharSequence.lastOrNull(): Char? {\n    return if (isEmpty()) null else this[length - 1]\n}\n\n/**\n * Returns the last character matching the given [predicate], or `null` if no such character was found.\n */\npublic inline fun CharSequence.lastOrNull(predicate: (Char) -> Boolean): Char? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random character from this char sequence.\n * \n * @throws NoSuchElementException if this char sequence is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.random(): Char {\n    return random(Random)\n}\n\n/**\n * Returns a random character from this char sequence using the specified source of randomness.\n * \n * @throws NoSuchElementException if this char sequence is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun CharSequence.random(random: Random): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Char sequence is empty.\")\n    return get(random.nextInt(length))\n}\n\n/**\n * Returns a random character from this char sequence, or `null` if this char sequence is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.randomOrNull(): Char? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random character from this char sequence using the specified source of randomness, or `null` if this char sequence is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun CharSequence.randomOrNull(random: Random): Char? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(length))\n}\n\n/**\n * Returns the single character, or throws an exception if the char sequence is empty or has more than one character.\n */\npublic fun CharSequence.single(): Char {\n    return when (length) {\n        0 -> throw NoSuchElementException(\"Char sequence is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Char sequence has more than one element.\")\n    }\n}\n\n/**\n * Returns the single character matching the given [predicate], or throws exception if there is no or more than one matching character.\n */\npublic inline fun CharSequence.single(predicate: (Char) -> Boolean): Char {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Char sequence contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Char sequence contains no character matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Char\n}\n\n/**\n * Returns single character, or `null` if the char sequence is empty or has more than one character.\n */\npublic fun CharSequence.singleOrNull(): Char? {\n    return if (length == 1) this[0] else null\n}\n\n/**\n * Returns the single character matching the given [predicate], or `null` if character was not found or more than one character was found.\n */\npublic inline fun CharSequence.singleOrNull(predicate: (Char) -> Boolean): Char? {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a subsequence of this char sequence with the first [n] characters removed.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.drop\n */\npublic fun CharSequence.drop(n: Int): CharSequence {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return subSequence(n.coerceAtMost(length), length)\n}\n\n/**\n * Returns a string with the first [n] characters removed.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.drop\n */\npublic fun String.drop(n: Int): String {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return substring(n.coerceAtMost(length))\n}\n\n/**\n * Returns a subsequence of this char sequence with the last [n] characters removed.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.drop\n */\npublic fun CharSequence.dropLast(n: Int): CharSequence {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return take((length - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a string with the last [n] characters removed.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.drop\n */\npublic fun String.dropLast(n: Int): String {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return take((length - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a subsequence of this char sequence containing all characters except last characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.drop\n */\npublic inline fun CharSequence.dropLastWhile(predicate: (Char) -> Boolean): CharSequence {\n    for (index in lastIndex downTo 0)\n        if (!predicate(this[index]))\n            return subSequence(0, index + 1)\n    return \"\"\n}\n\n/**\n * Returns a string containing all characters except last characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.drop\n */\npublic inline fun String.dropLastWhile(predicate: (Char) -> Boolean): String {\n    for (index in lastIndex downTo 0)\n        if (!predicate(this[index]))\n            return substring(0, index + 1)\n    return \"\"\n}\n\n/**\n * Returns a subsequence of this char sequence containing all characters except first characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.drop\n */\npublic inline fun CharSequence.dropWhile(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices)\n        if (!predicate(this[index]))\n            return subSequence(index, length)\n    return \"\"\n}\n\n/**\n * Returns a string containing all characters except first characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.drop\n */\npublic inline fun String.dropWhile(predicate: (Char) -> Boolean): String {\n    for (index in this.indices)\n        if (!predicate(this[index]))\n            return substring(index)\n    return \"\"\n}\n\n/**\n * Returns a char sequence containing only those characters from the original char sequence that match the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun CharSequence.filter(predicate: (Char) -> Boolean): CharSequence {\n    return filterTo(StringBuilder(), predicate)\n}\n\n/**\n * Returns a string containing only those characters from the original string that match the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun String.filter(predicate: (Char) -> Boolean): String {\n    return filterTo(StringBuilder(), predicate).toString()\n}\n\n/**\n * Returns a char sequence containing only those characters from the original char sequence that match the given [predicate].\n * @param [predicate] function that takes the index of a character and the character itself\n * and returns the result of predicate evaluation on the character.\n */\npublic inline fun CharSequence.filterIndexed(predicate: (index: Int, Char) -> Boolean): CharSequence {\n    return filterIndexedTo(StringBuilder(), predicate)\n}\n\n/**\n * Returns a string containing only those characters from the original string that match the given [predicate].\n * @param [predicate] function that takes the index of a character and the character itself\n * and returns the result of predicate evaluation on the character.\n */\npublic inline fun String.filterIndexed(predicate: (index: Int, Char) -> Boolean): String {\n    return filterIndexedTo(StringBuilder(), predicate).toString()\n}\n\n/**\n * Appends all characters matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of a character and the character itself\n * and returns the result of predicate evaluation on the character.\n */\npublic inline fun <C : Appendable> CharSequence.filterIndexedTo(destination: C, predicate: (index: Int, Char) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.append(element)\n    }\n    return destination\n}\n\n/**\n * Returns a char sequence containing only those characters from the original char sequence that do not match the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun CharSequence.filterNot(predicate: (Char) -> Boolean): CharSequence {\n    return filterNotTo(StringBuilder(), predicate)\n}\n\n/**\n * Returns a string containing only those characters from the original string that do not match the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun String.filterNot(predicate: (Char) -> Boolean): String {\n    return filterNotTo(StringBuilder(), predicate).toString()\n}\n\n/**\n * Appends all characters not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : Appendable> CharSequence.filterNotTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.append(element)\n    return destination\n}\n\n/**\n * Appends all characters matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : Appendable> CharSequence.filterTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (index in 0 until length) {\n        val element = get(index)\n        if (predicate(element)) destination.append(element)\n    }\n    return destination\n}\n\n/**\n * Returns a char sequence containing characters of the original char sequence at the specified range of [indices].\n */\npublic fun CharSequence.slice(indices: IntRange): CharSequence {\n    if (indices.isEmpty()) return \"\"\n    return subSequence(indices)\n}\n\n/**\n * Returns a string containing characters of the original string at the specified range of [indices].\n */\npublic fun String.slice(indices: IntRange): String {\n    if (indices.isEmpty()) return \"\"\n    return substring(indices)\n}\n\n/**\n * Returns a char sequence containing characters of the original char sequence at specified [indices].\n */\npublic fun CharSequence.slice(indices: Iterable<Int>): CharSequence {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return \"\"\n    val result = StringBuilder(size)\n    for (i in indices) {\n        result.append(get(i))\n    }\n    return result\n}\n\n/**\n * Returns a string containing characters of the original string at specified [indices].\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.slice(indices: Iterable<Int>): String {\n    return (this as CharSequence).slice(indices).toString()\n}\n\n/**\n * Returns a subsequence of this char sequence containing the first [n] characters from this char sequence, or the entire char sequence if this char sequence is shorter.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.take\n */\npublic fun CharSequence.take(n: Int): CharSequence {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return subSequence(0, n.coerceAtMost(length))\n}\n\n/**\n * Returns a string containing the first [n] characters from this string, or the entire string if this string is shorter.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.take\n */\npublic fun String.take(n: Int): String {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return substring(0, n.coerceAtMost(length))\n}\n\n/**\n * Returns a subsequence of this char sequence containing the last [n] characters from this char sequence, or the entire char sequence if this char sequence is shorter.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.take\n */\npublic fun CharSequence.takeLast(n: Int): CharSequence {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    val length = length\n    return subSequence(length - n.coerceAtMost(length), length)\n}\n\n/**\n * Returns a string containing the last [n] characters from this string, or the entire string if this string is shorter.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.take\n */\npublic fun String.takeLast(n: Int): String {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    val length = length\n    return substring(length - n.coerceAtMost(length))\n}\n\n/**\n * Returns a subsequence of this char sequence containing last characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.take\n */\npublic inline fun CharSequence.takeLastWhile(predicate: (Char) -> Boolean): CharSequence {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return subSequence(index + 1, length)\n        }\n    }\n    return subSequence(0, length)\n}\n\n/**\n * Returns a string containing last characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.take\n */\npublic inline fun String.takeLastWhile(predicate: (Char) -> Boolean): String {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return substring(index + 1)\n        }\n    }\n    return this\n}\n\n/**\n * Returns a subsequence of this char sequence containing the first characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.take\n */\npublic inline fun CharSequence.takeWhile(predicate: (Char) -> Boolean): CharSequence {\n    for (index in 0 until length)\n        if (!predicate(get(index))) {\n            return subSequence(0, index)\n        }\n    return subSequence(0, length)\n}\n\n/**\n * Returns a string containing the first characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.take\n */\npublic inline fun String.takeWhile(predicate: (Char) -> Boolean): String {\n    for (index in 0 until length)\n        if (!predicate(get(index))) {\n            return substring(0, index)\n        }\n    return this\n}\n\n/**\n * Returns a char sequence with characters in reversed order.\n */\npublic fun CharSequence.reversed(): CharSequence {\n    return StringBuilder(this).reverse()\n}\n\n/**\n * Returns a string with characters in reversed order.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.reversed(): String {\n    return (this as CharSequence).reversed().toString()\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to characters of the given char sequence.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original char sequence.\n * \n * @sample samples.text.Strings.associate\n */\npublic inline fun <K, V> CharSequence.associate(transform: (Char) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(length).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the characters from the given char sequence indexed by the key\n * returned from [keySelector] function applied to each character.\n * \n * If any two characters would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original char sequence.\n * \n * @sample samples.text.Strings.associateBy\n */\npublic inline fun <K> CharSequence.associateBy(keySelector: (Char) -> K): Map<K, Char> {\n    val capacity = mapCapacity(length).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Char>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to characters of the given char sequence.\n * \n * If any two characters would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original char sequence.\n * \n * @sample samples.text.Strings.associateByWithValueTransform\n */\npublic inline fun <K, V> CharSequence.associateBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, V> {\n    val capacity = mapCapacity(length).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each character of the given char sequence\n * and value is the character itself.\n * \n * If any two characters would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.text.Strings.associateByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Char>> CharSequence.associateByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to characters of the given char sequence.\n * \n * If any two characters would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.text.Strings.associateByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharSequence.associateByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each character of the given char sequence.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.text.Strings.associateTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharSequence.associateTo(destination: M, transform: (Char) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are characters from the given char sequence and values are\n * produced by the [valueSelector] function applied to each character.\n * \n * If any two characters are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original char sequence.\n * \n * @sample samples.text.Strings.associateWith\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <V> CharSequence.associateWith(valueSelector: (Char) -> V): Map<Char, V> {\n    val result = LinkedHashMap<Char, V>(mapCapacity(length).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each character of the given char sequence,\n * where key is the character itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two characters are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.text.Strings.associateWithTo\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <V, M : MutableMap<in Char, in V>> CharSequence.associateWithTo(destination: M, valueSelector: (Char) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all characters to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Char>> CharSequence.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all characters.\n */\npublic fun CharSequence.toHashSet(): HashSet<Char> {\n    return toCollection(HashSet<Char>(mapCapacity(length)))\n}\n\n/**\n * Returns a [List] containing all characters.\n */\npublic fun CharSequence.toList(): List<Char> {\n    return when (length) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [MutableList] filled with all characters of this char sequence.\n */\npublic fun CharSequence.toMutableList(): MutableList<Char> {\n    return toCollection(ArrayList<Char>(length))\n}\n\n/**\n * Returns a [Set] of all characters.\n * \n * The returned set preserves the element iteration order of the original char sequence.\n */\npublic fun CharSequence.toSet(): Set<Char> {\n    return when (length) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Char>(mapCapacity(length)))\n    }\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each character of original char sequence.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> CharSequence.flatMap(transform: (Char) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each character of original char sequence, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharSequence.flatMapTo(destination: C, transform: (Char) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups characters of the original char sequence by the key returned by the given [keySelector] function\n * applied to each character and returns a map where each group key is associated with a list of corresponding characters.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original char sequence.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> CharSequence.groupBy(keySelector: (Char) -> K): Map<K, List<Char>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Char>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each character of the original char sequence\n * by the key returned by the given [keySelector] function applied to the character\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original char sequence.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> CharSequence.groupBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups characters of the original char sequence by the key returned by the given [keySelector] function\n * applied to each character and puts to the [destination] map each group key associated with a list of corresponding characters.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Char>>> CharSequence.groupByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Char>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each character of the original char sequence\n * by the key returned by the given [keySelector] function applied to the character\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> CharSequence.groupByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a char sequence to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each character.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <K> CharSequence.groupingBy(crossinline keySelector: (Char) -> K): Grouping<Char, K> {\n    return object : Grouping<Char, K> {\n        override fun sourceIterator(): Iterator<Char> = this@groupingBy.iterator()\n        override fun keyOf(element: Char): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each character in the original char sequence.\n * \n * @sample samples.text.Strings.map\n */\npublic inline fun <R> CharSequence.map(transform: (Char) -> R): List<R> {\n    return mapTo(ArrayList<R>(length), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each character and its index in the original char sequence.\n * @param [transform] function that takes the index of a character and the character itself\n * and returns the result of the transform applied to the character.\n */\npublic inline fun <R> CharSequence.mapIndexed(transform: (index: Int, Char) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(length), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each character and its index in the original char sequence.\n * @param [transform] function that takes the index of a character and the character itself\n * and returns the result of the transform applied to the character.\n */\npublic inline fun <R : Any> CharSequence.mapIndexedNotNull(transform: (index: Int, Char) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each character and its index in the original char sequence\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of a character and the character itself\n * and returns the result of the transform applied to the character.\n */\npublic inline fun <R : Any, C : MutableCollection<in R>> CharSequence.mapIndexedNotNullTo(destination: C, transform: (index: Int, Char) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each character and its index in the original char sequence\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of a character and the character itself\n * and returns the result of the transform applied to the character.\n */\npublic inline fun <R, C : MutableCollection<in R>> CharSequence.mapIndexedTo(destination: C, transform: (index: Int, Char) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each character in the original char sequence.\n */\npublic inline fun <R : Any> CharSequence.mapNotNull(transform: (Char) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each character in the original char sequence\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <R : Any, C : MutableCollection<in R>> CharSequence.mapNotNullTo(destination: C, transform: (Char) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each character of the original char sequence\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharSequence.mapTo(destination: C, transform: (Char) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each character of the original char sequence\n * into an [IndexedValue] containing the index of that character and the character itself.\n */\npublic fun CharSequence.withIndex(): Iterable<IndexedValue<Char>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns `true` if all characters match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun CharSequence.all(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if char sequence has at least one character.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun CharSequence.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if at least one character matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun CharSequence.any(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the length of this char sequence.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.count(): Int {\n    return length\n}\n\n/**\n * Returns the number of characters matching the given [predicate].\n */\npublic inline fun CharSequence.count(predicate: (Char) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each character.\n */\npublic inline fun <R> CharSequence.fold(initial: R, operation: (acc: R, Char) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each character with its index in the original char sequence.\n * @param [operation] function that takes the index of a character, current accumulator value\n * and the character itself, and calculates the next accumulator value.\n */\npublic inline fun <R> CharSequence.foldIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each character and current accumulator value.\n */\npublic inline fun <R> CharSequence.foldRight(initial: R, operation: (Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each character with its index in the original char sequence and current accumulator value.\n * @param [operation] function that takes the index of a character, the character itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> CharSequence.foldRightIndexed(initial: R, operation: (index: Int, Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each character.\n */\npublic inline fun CharSequence.forEach(action: (Char) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each character, providing sequential index with the character.\n * @param [action] function that takes the index of a character and the character itself\n * and performs the desired action on the character.\n */\npublic inline fun CharSequence.forEachIndexed(action: (index: Int, Char) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Returns the largest character or `null` if there are no characters.\n */\npublic fun CharSequence.max(): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first character yielding the largest value of the given function or `null` if there are no characters.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> CharSequence.maxBy(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first character having the largest value according to the provided [comparator] or `null` if there are no characters.\n */\npublic fun CharSequence.maxWith(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest character or `null` if there are no characters.\n */\npublic fun CharSequence.min(): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first character yielding the smallest value of the given function or `null` if there are no characters.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> CharSequence.minBy(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first character having the smallest value according to the provided [comparator] or `null` if there are no characters.\n */\npublic fun CharSequence.minWith(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the char sequence has no characters.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun CharSequence.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if no characters match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun CharSequence.none(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each character and returns the char sequence itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <S : CharSequence> S.onEach(action: (Char) -> Unit): S {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Accumulates value starting with the first character and applying [operation] from left to right to current accumulator value and each character.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun CharSequence.reduce(operation: (acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty char sequence can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first character and applying [operation] from left to right\n * to current accumulator value and each character with its index in the original char sequence.\n * @param [operation] function that takes the index of a character, current accumulator value\n * and the character itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun CharSequence.reduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty char sequence can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first character and applying [operation] from left to right to current accumulator value and each character. Returns null if the char sequence is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun CharSequence.reduceOrNull(operation: (acc: Char, Char) -> Char): Char? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last character and applying [operation] from right to left to each character and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun CharSequence.reduceRight(operation: (Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty char sequence can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last character and applying [operation] from right to left\n * to each character with its index in the original char sequence and current accumulator value.\n * @param [operation] function that takes the index of a character, the character itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun CharSequence.reduceRightIndexed(operation: (index: Int, Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty char sequence can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last character and applying [operation] from right to left to each character and current accumulator value. Returns null if the char sequence is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun CharSequence.reduceRightOrNull(operation: (Char, acc: Char) -> Char): Char? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each character and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and a character, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <R> CharSequence.scan(initial: R, operation: (acc: R, Char) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(length + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each character, its index in the original char sequence and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of a character, current accumulator value\n * and the character itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <R> CharSequence.scanIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(length + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each character and current accumulator value that starts with the first character of this char sequence.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and a character, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun CharSequence.scanReduce(operation: (acc: Char, Char) -> Char): List<Char> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Char>(length).apply { add(accumulator) }\n    for (index in 1 until length) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each character, its index in the original char sequence and current accumulator value that starts with the first character of this char sequence.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of a character, current accumulator value\n * and the character itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun CharSequence.scanReduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): List<Char> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Char>(length).apply { add(accumulator) }\n    for (index in 1 until length) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each character in the char sequence.\n */\npublic inline fun CharSequence.sumBy(selector: (Char) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each character in the char sequence.\n */\npublic inline fun CharSequence.sumByDouble(selector: (Char) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Splits this char sequence into a list of strings each not exceeding the given [size].\n * \n * The last string in the resulting list may have less characters than the given [size].\n * \n * @param size the number of elements to take in each string, must be positive and can be greater than the number of elements in this char sequence.\n * \n * @sample samples.text.Strings.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun CharSequence.chunked(size: Int): List<String> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this char sequence into several char sequences each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return list of results of the [transform] applied to an each char sequence.\n * \n * Note that the char sequence passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last char sequence may have less characters than the given [size].\n * \n * @param size the number of elements to take in each char sequence, must be positive and can be greater than the number of elements in this char sequence.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <R> CharSequence.chunked(size: Int, transform: (CharSequence) -> R): List<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Splits this char sequence into a sequence of strings each not exceeding the given [size].\n * \n * The last string in the resulting sequence may have less characters than the given [size].\n * \n * @param size the number of elements to take in each string, must be positive and can be greater than the number of elements in this char sequence.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun CharSequence.chunkedSequence(size: Int): Sequence<String> {\n    return chunkedSequence(size) { it.toString() }\n}\n\n/**\n * Splits this char sequence into several char sequences each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return sequence of results of the [transform] applied to an each char sequence.\n * \n * Note that the char sequence passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last char sequence may have less characters than the given [size].\n * \n * @param size the number of elements to take in each char sequence, must be positive and can be greater than the number of elements in this char sequence.\n * \n * @sample samples.text.Strings.chunkedTransformToSequence\n */\n@SinceKotlin(\"1.2\")\npublic fun <R> CharSequence.chunkedSequence(size: Int, transform: (CharSequence) -> R): Sequence<R> {\n    return windowedSequence(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Splits the original char sequence into pair of char sequences,\n * where *first* char sequence contains characters for which [predicate] yielded `true`,\n * while *second* char sequence contains characters for which [predicate] yielded `false`.\n * \n * @sample samples.text.Strings.partition\n */\npublic inline fun CharSequence.partition(predicate: (Char) -> Boolean): Pair<CharSequence, CharSequence> {\n    val first = StringBuilder()\n    val second = StringBuilder()\n    for (element in this) {\n        if (predicate(element)) {\n            first.append(element)\n        } else {\n            second.append(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original string into pair of strings,\n * where *first* string contains characters for which [predicate] yielded `true`,\n * while *second* string contains characters for which [predicate] yielded `false`.\n * \n * @sample samples.text.Strings.partition\n */\npublic inline fun String.partition(predicate: (Char) -> Boolean): Pair<String, String> {\n    val first = StringBuilder()\n    val second = StringBuilder()\n    for (element in this) {\n        if (predicate(element)) {\n            first.append(element)\n        } else {\n            second.append(element)\n        }\n    }\n    return Pair(first.toString(), second.toString())\n}\n\n/**\n * Returns a list of snapshots of the window of the given [size]\n * sliding along this char sequence with the given [step], where each\n * snapshot is a string.\n * \n * Several last strings may have less characters than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this char sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun CharSequence.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): List<String> {\n    return windowed(size, step, partialWindows) { it.toString() }\n}\n\n/**\n * Returns a list of results of applying the given [transform] function to\n * an each char sequence representing a view over the window of the given [size]\n * sliding along this char sequence with the given [step].\n * \n * Note that the char sequence passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last char sequences may have less characters than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this char sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <R> CharSequence.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (CharSequence) -> R): List<R> {\n    checkWindowSizeStep(size, step)\n    val thisSize = this.length\n    val resultCapacity = thisSize / step + if (thisSize % step == 0) 0 else 1\n    val result = ArrayList<R>(resultCapacity)\n    var index = 0\n    while (index in 0 until thisSize) {\n        val end = index + size\n        val coercedEnd = if (end < 0 || end > thisSize) { if (partialWindows) thisSize else break } else end\n        result.add(transform(subSequence(index, coercedEnd)))\n        index += step\n    }\n    return result\n}\n\n/**\n * Returns a sequence of snapshots of the window of the given [size]\n * sliding along this char sequence with the given [step], where each\n * snapshot is a string.\n * \n * Several last strings may have less characters than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this char sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun CharSequence.windowedSequence(size: Int, step: Int = 1, partialWindows: Boolean = false): Sequence<String> {\n    return windowedSequence(size, step, partialWindows) { it.toString() }\n}\n\n/**\n * Returns a sequence of results of applying the given [transform] function to\n * an each char sequence representing a view over the window of the given [size]\n * sliding along this char sequence with the given [step].\n * \n * Note that the char sequence passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last char sequences may have less characters than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this char sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <R> CharSequence.windowedSequence(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (CharSequence) -> R): Sequence<R> {\n    checkWindowSizeStep(size, step)\n    val windows = (if (partialWindows) indices else 0 until length - size + 1) step step\n    return windows.asSequence().map { index ->\n        val end = index + size\n        val coercedEnd = if (end < 0 || end > length) length else end\n        transform(subSequence(index, coercedEnd))\n    }\n}\n\n/**\n * Returns a list of pairs built from the characters of `this` and the [other] char sequences with the same index\n * The returned list has length of the shortest char sequence.\n * \n * @sample samples.text.Strings.zip\n */\npublic infix fun CharSequence.zip(other: CharSequence): List<Pair<Char, Char>> {\n    return zip(other) { c1, c2 -> c1 to c2 }\n}\n\n/**\n * Returns a list of values built from the characters of `this` and the [other] char sequences with the same index\n * using the provided [transform] function applied to each pair of characters.\n * The returned list has length of the shortest char sequence.\n * \n * @sample samples.text.Strings.zipWithTransform\n */\npublic inline fun <V> CharSequence.zip(other: CharSequence, transform: (a: Char, b: Char) -> V): List<V> {\n    val length = minOf(this.length, other.length)\n    val list = ArrayList<V>(length)\n    for (i in 0 until length) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs of each two adjacent characters in this char sequence.\n * \n * The returned list is empty if this char sequence contains less than two characters.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun CharSequence.zipWithNext(): List<Pair<Char, Char>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to an each pair of two adjacent characters in this char sequence.\n * \n * The returned list is empty if this char sequence contains less than two characters.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic inline fun <R> CharSequence.zipWithNext(transform: (a: Char, b: Char) -> R): List<R> {\n    val size = length - 1\n    if (size < 1) return emptyList()\n    val result = ArrayList<R>(size)\n    for (index in 0 until size) {\n        result.add(transform(this[index], this[index + 1]))\n    }\n    return result\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original char sequence returning its characters when being iterated.\n */\npublic fun CharSequence.asIterable(): Iterable<Char> {\n    if (this is String && isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original char sequence returning its characters when being iterated.\n */\npublic fun CharSequence.asSequence(): Sequence<Char> {\n    if (this is String && isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\n// actually \\s is enough to match all whitespace, but \\xA0 added because of different regexp behavior of Rhino used in Selenium tests\npublic actual fun Char.isWhitespace(): Boolean = toString().matches(\"[\\\\s\\\\xA0]\")\n\n@kotlin.internal.InlineOnly\npublic actual inline fun Char.toLowerCase(): Char = js(\"String.fromCharCode\")(toInt()).toLowerCase().charCodeAt(0).unsafeCast<Int>().toChar()\n\n@kotlin.internal.InlineOnly\npublic actual inline fun Char.toUpperCase(): Char = js(\"String.fromCharCode\")(toInt()).toUpperCase().charCodeAt(0).unsafeCast<Int>().toChar()\n\n/**\n * Returns `true` if this character is a Unicode high-surrogate code unit (also known as leading-surrogate code unit).\n */\npublic actual fun Char.isHighSurrogate(): Boolean = this in Char.MIN_HIGH_SURROGATE..Char.MAX_HIGH_SURROGATE\n\n/**\n * Returns `true` if this character is a Unicode low-surrogate code unit (also known as trailing-surrogate code unit).\n */\npublic actual fun Char.isLowSurrogate(): Boolean = this in Char.MIN_LOW_SURROGATE..Char.MAX_LOW_SURROGATE\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\nimport kotlin.contracts.contract\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trim(predicate: (Char) -> Boolean): CharSequence {\n    var startIndex = 0\n    var endIndex = length - 1\n    var startFound = false\n\n    while (startIndex <= endIndex) {\n        val index = if (!startFound) startIndex else endIndex\n        val match = predicate(this[index])\n\n        if (!startFound) {\n            if (!match)\n                startFound = true\n            else\n                startIndex += 1\n        } else {\n            if (!match)\n                break\n            else\n                endIndex -= 1\n        }\n    }\n\n    return subSequence(startIndex, endIndex + 1)\n}\n\n/**\n * Returns a string having leading and trailing characters matching the [predicate] removed.\n */\npublic inline fun String.trim(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trim(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trimStart(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices)\n        if (!predicate(this[index]))\n            return subSequence(index, length)\n\n    return \"\"\n}\n\n/**\n * Returns a string having leading characters matching the [predicate] removed.\n */\npublic inline fun String.trimStart(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trimStart(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having trailing characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trimEnd(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices.reversed())\n        if (!predicate(this[index]))\n            return subSequence(0, index + 1)\n\n    return \"\"\n}\n\n/**\n * Returns a string having trailing characters matching the [predicate] removed.\n */\npublic inline fun String.trimEnd(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trimEnd(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing characters from the [chars] array removed.\n */\npublic fun CharSequence.trim(vararg chars: Char): CharSequence = trim { it in chars }\n\n/**\n * Returns a string having leading and trailing characters from the [chars] array removed.\n */\npublic fun String.trim(vararg chars: Char): String = trim { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having leading characters from the [chars] array removed.\n */\npublic fun CharSequence.trimStart(vararg chars: Char): CharSequence = trimStart { it in chars }\n\n/**\n * Returns a string having leading characters from the [chars] array removed.\n */\npublic fun String.trimStart(vararg chars: Char): String = trimStart { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having trailing characters from the [chars] array removed.\n */\npublic fun CharSequence.trimEnd(vararg chars: Char): CharSequence = trimEnd { it in chars }\n\n/**\n * Returns a string having trailing characters from the [chars] array removed.\n */\npublic fun String.trimEnd(vararg chars: Char): String = trimEnd { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing whitespace removed.\n */\npublic fun CharSequence.trim(): CharSequence = trim(Char::isWhitespace)\n\n/**\n * Returns a string having leading and trailing whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trim(): String = (this as CharSequence).trim().toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading whitespace removed.\n */\npublic fun CharSequence.trimStart(): CharSequence = trimStart(Char::isWhitespace)\n\n/**\n * Returns a string having leading whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trimStart(): String = (this as CharSequence).trimStart().toString()\n\n/**\n * Returns a sub sequence of this char sequence having trailing whitespace removed.\n */\npublic fun CharSequence.trimEnd(): CharSequence = trimEnd(Char::isWhitespace)\n\n/**\n * Returns a string having trailing whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trimEnd(): String = (this as CharSequence).trimEnd().toString()\n\n/**\n * Returns a char sequence with content of this char sequence padded at the beginning\n * to the specified [length] with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a char sequence of length at least [length] consisting of `this` char sequence prepended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padStart\n */\npublic fun CharSequence.padStart(length: Int, padChar: Char = ' '): CharSequence {\n    if (length < 0)\n        throw IllegalArgumentException(\"Desired length $length is less than zero.\")\n    if (length <= this.length)\n        return this.subSequence(0, this.length)\n\n    val sb = StringBuilder(length)\n    for (i in 1..(length - this.length))\n        sb.append(padChar)\n    sb.append(this)\n    return sb\n}\n\n/**\n * Pads the string to the specified [length] at the beginning with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a string of length at least [length] consisting of `this` string prepended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padStart\n */\npublic fun String.padStart(length: Int, padChar: Char = ' '): String =\n    (this as CharSequence).padStart(length, padChar).toString()\n\n/**\n * Returns a char sequence with content of this char sequence padded at the end\n * to the specified [length] with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a char sequence of length at least [length] consisting of `this` char sequence appended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padEnd\n */\npublic fun CharSequence.padEnd(length: Int, padChar: Char = ' '): CharSequence {\n    if (length < 0)\n        throw IllegalArgumentException(\"Desired length $length is less than zero.\")\n    if (length <= this.length)\n        return this.subSequence(0, this.length)\n\n    val sb = StringBuilder(length)\n    sb.append(this)\n    for (i in 1..(length - this.length))\n        sb.append(padChar)\n    return sb\n}\n\n/**\n * Pads the string to the specified [length] at the end with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a string of length at least [length] consisting of `this` string appended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padEnd\n */\npublic fun String.padEnd(length: Int, padChar: Char = ' '): String =\n    (this as CharSequence).padEnd(length, padChar).toString()\n\n/**\n * Returns `true` if this nullable char sequence is either `null` or empty.\n *\n * @sample samples.text.Strings.stringIsNullOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || this.length == 0\n}\n\n/**\n * Returns `true` if this char sequence is empty (contains no characters).\n *\n * @sample samples.text.Strings.stringIsEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isEmpty(): Boolean = length == 0\n\n/**\n * Returns `true` if this char sequence is not empty.\n *\n * @sample samples.text.Strings.stringIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isNotEmpty(): Boolean = length > 0\n\n// implemented differently in JVM and JS\n//public fun String.isBlank(): Boolean = length() == 0 || all { it.isWhitespace() }\n\n\n/**\n * Returns `true` if this char sequence is not empty and contains some characters except of whitespace characters.\n *\n * @sample samples.text.Strings.stringIsNotBlank\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isNotBlank(): Boolean = !isBlank()\n\n/**\n * Returns `true` if this nullable char sequence is either `null` or empty or consists solely of whitespace characters.\n *\n * @sample samples.text.Strings.stringIsNullOrBlank\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence?.isNullOrBlank(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrBlank != null)\n    }\n\n    return this == null || this.isBlank()\n}\n\n/**\n * Iterator for characters of the given char sequence.\n */\npublic operator fun CharSequence.iterator(): CharIterator = object : CharIterator() {\n    private var index = 0\n\n    public override fun nextChar(): Char = get(index++)\n\n    public override fun hasNext(): Boolean = index < length\n}\n\n/** Returns the string if it is not `null`, or the empty string otherwise. */\n@kotlin.internal.InlineOnly\npublic inline fun String?.orEmpty(): String = this ?: \"\"\n\n/**\n * Returns this char sequence if it's not empty\n * or the result of calling [defaultValue] function if the char sequence is empty.\n *\n * @sample samples.text.Strings.stringIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifEmpty(defaultValue: () -> R): R where C : CharSequence, C : R =\n    if (isEmpty()) defaultValue() else this\n\n/**\n * Returns this char sequence if it is not empty and doesn't consist solely of whitespace characters,\n * or the result of calling [defaultValue] function otherwise.\n *\n * @sample samples.text.Strings.stringIfBlank\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifBlank(defaultValue: () -> R): R where C : CharSequence, C : R =\n    if (isBlank()) defaultValue() else this\n\n/**\n * Returns the range of valid character indices for this char sequence.\n */\npublic val CharSequence.indices: IntRange\n    get() = 0..length - 1\n\n/**\n * Returns the index of the last character in the char sequence or -1 if it is empty.\n */\npublic val CharSequence.lastIndex: Int\n    get() = this.length - 1\n\n/**\n * Returns `true` if this CharSequence has Unicode surrogate pair at the specified [index].\n */\npublic fun CharSequence.hasSurrogatePairAt(index: Int): Boolean {\n    return index in 0..length - 2\n            && this[index].isHighSurrogate()\n            && this[index + 1].isLowSurrogate()\n}\n\n/**\n * Returns a substring specified by the given [range] of indices.\n */\npublic fun String.substring(range: IntRange): String = substring(range.start, range.endInclusive + 1)\n\n/**\n * Returns a subsequence of this char sequence specified by the given [range] of indices.\n */\npublic fun CharSequence.subSequence(range: IntRange): CharSequence = subSequence(range.start, range.endInclusive + 1)\n\n/**\n * Returns a subsequence of this char sequence.\n *\n * This extension is chosen only for invocation with old-named parameters.\n * Replace parameter names with the same as those of [CharSequence.subSequence].\n */\n@kotlin.internal.InlineOnly\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning\n@Deprecated(\"Use parameters named startIndex and endIndex.\", ReplaceWith(\"subSequence(startIndex = start, endIndex = end)\"))\npublic inline fun String.subSequence(start: Int, end: Int): CharSequence = subSequence(start, end)\n\n/**\n * Returns a substring of chars from a range of this char sequence starting at the [startIndex] and ending right before the [endIndex].\n *\n * @param startIndex the start index (inclusive).\n * @param endIndex the end index (exclusive). If not specified, the length of the char sequence is used.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.substring(startIndex: Int, endIndex: Int = length): String = subSequence(startIndex, endIndex).toString()\n\n/**\n * Returns a substring of chars at indices from the specified [range] of this char sequence.\n */\npublic fun CharSequence.substring(range: IntRange): String = subSequence(range.start, range.endInclusive + 1).toString()\n\n/**\n * Returns a substring before the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBefore(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring before the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBefore(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring after the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfter(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + 1, length)\n}\n\n/**\n * Returns a substring after the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfter(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + delimiter.length, length)\n}\n\n/**\n * Returns a substring before the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBeforeLast(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring before the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBeforeLast(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring after the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfterLast(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + 1, length)\n}\n\n/**\n * Returns a substring after the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfterLast(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + delimiter.length, length)\n}\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given range\n * is replaced with the [replacement] char sequence.\n * @param startIndex the index of the first character to be replaced.\n * @param endIndex the index of the first character after the replacement to keep in the string.\n */\n@UseExperimental(ExperimentalStdlibApi::class)\npublic fun CharSequence.replaceRange(startIndex: Int, endIndex: Int, replacement: CharSequence): CharSequence {\n    if (endIndex < startIndex)\n        throw IndexOutOfBoundsException(\"End index ($endIndex) is less than start index ($startIndex).\")\n    val sb = StringBuilder()\n    sb.appendRange(this, 0, startIndex)\n    sb.append(replacement)\n    sb.appendRange(this, endIndex, length)\n    return sb\n}\n\n/**\n * Replaces the part of the string at the given range with the [replacement] char sequence.\n * @param startIndex the index of the first character to be replaced.\n * @param endIndex the index of the first character after the replacement to keep in the string.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceRange(startIndex: Int, endIndex: Int, replacement: CharSequence): String =\n    (this as CharSequence).replaceRange(startIndex, endIndex, replacement).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given [range]\n * is replaced with the [replacement] char sequence.\n *\n * The end index of the [range] is included in the part to be replaced.\n */\npublic fun CharSequence.replaceRange(range: IntRange, replacement: CharSequence): CharSequence =\n    replaceRange(range.start, range.endInclusive + 1, replacement)\n\n/**\n * Replace the part of string at the given [range] with the [replacement] string.\n *\n * The end index of the [range] is included in the part to be replaced.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceRange(range: IntRange, replacement: CharSequence): String =\n    (this as CharSequence).replaceRange(range, replacement).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given range is removed.\n *\n * @param startIndex the index of the first character to be removed.\n * @param endIndex the index of the first character after the removed part to keep in the string.\n *\n * [endIndex] is not included in the removed part.\n */\n@UseExperimental(ExperimentalStdlibApi::class)\npublic fun CharSequence.removeRange(startIndex: Int, endIndex: Int): CharSequence {\n    if (endIndex < startIndex)\n        throw IndexOutOfBoundsException(\"End index ($endIndex) is less than start index ($startIndex).\")\n\n    if (endIndex == startIndex)\n        return this.subSequence(0, length)\n\n    val sb = StringBuilder(length - (endIndex - startIndex))\n    sb.appendRange(this, 0, startIndex)\n    sb.appendRange(this, endIndex, length)\n    return sb\n}\n\n/**\n * Removes the part of a string at a given range.\n * @param startIndex the index of the first character to be removed.\n * @param endIndex the index of the first character after the removed part to keep in the string.\n *\n *  [endIndex] is not included in the removed part.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.removeRange(startIndex: Int, endIndex: Int): String =\n    (this as CharSequence).removeRange(startIndex, endIndex).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given [range] is removed.\n *\n * The end index of the [range] is included in the removed part.\n */\npublic fun CharSequence.removeRange(range: IntRange): CharSequence = removeRange(range.start, range.endInclusive + 1)\n\n/**\n * Removes the part of a string at the given [range].\n *\n * The end index of the [range] is included in the removed part.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.removeRange(range: IntRange): String =\n    (this as CharSequence).removeRange(range).toString()\n\n/**\n * If this char sequence starts with the given [prefix], returns a new char sequence\n * with the prefix removed. Otherwise, returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removePrefix(prefix: CharSequence): CharSequence {\n    if (startsWith(prefix)) {\n        return subSequence(prefix.length, length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * If this string starts with the given [prefix], returns a copy of this string\n * with the prefix removed. Otherwise, returns this string.\n */\npublic fun String.removePrefix(prefix: CharSequence): String {\n    if (startsWith(prefix)) {\n        return substring(prefix.length)\n    }\n    return this\n}\n\n/**\n * If this char sequence ends with the given [suffix], returns a new char sequence\n * with the suffix removed. Otherwise, returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSuffix(suffix: CharSequence): CharSequence {\n    if (endsWith(suffix)) {\n        return subSequence(0, length - suffix.length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * If this string ends with the given [suffix], returns a copy of this string\n * with the suffix removed. Otherwise, returns this string.\n */\npublic fun String.removeSuffix(suffix: CharSequence): String {\n    if (endsWith(suffix)) {\n        return substring(0, length - suffix.length)\n    }\n    return this\n}\n\n/**\n * When this char sequence starts with the given [prefix] and ends with the given [suffix],\n * returns a new char sequence having both the given [prefix] and [suffix] removed.\n * Otherwise returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSurrounding(prefix: CharSequence, suffix: CharSequence): CharSequence {\n    if ((length >= prefix.length + suffix.length) && startsWith(prefix) && endsWith(suffix)) {\n        return subSequence(prefix.length, length - suffix.length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * Removes from a string both the given [prefix] and [suffix] if and only if\n * it starts with the [prefix] and ends with the [suffix].\n * Otherwise returns this string unchanged.\n */\npublic fun String.removeSurrounding(prefix: CharSequence, suffix: CharSequence): String {\n    if ((length >= prefix.length + suffix.length) && startsWith(prefix) && endsWith(suffix)) {\n        return substring(prefix.length, length - suffix.length)\n    }\n    return this\n}\n\n/**\n * When this char sequence starts with and ends with the given [delimiter],\n * returns a new char sequence having this [delimiter] removed both from the start and end.\n * Otherwise returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSurrounding(delimiter: CharSequence): CharSequence = removeSurrounding(delimiter, delimiter)\n\n/**\n * Removes the given [delimiter] string from both the start and the end of this string\n * if and only if it starts with and ends with the [delimiter].\n * Otherwise returns this string unchanged.\n */\npublic fun String.removeSurrounding(delimiter: CharSequence): String = removeSurrounding(delimiter, delimiter)\n\n/**\n * Replace part of string before the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBefore(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string before the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBefore(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string after the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfter(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + 1, length, replacement)\n}\n\n/**\n * Replace part of string after the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfter(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + delimiter.length, length, replacement)\n}\n\n/**\n * Replace part of string after the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfterLast(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + delimiter.length, length, replacement)\n}\n\n/**\n * Replace part of string after the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfterLast(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + 1, length, replacement)\n}\n\n/**\n * Replace part of string before the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBeforeLast(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string before the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBeforeLast(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n\n// public fun String.replace(oldChar: Char, newChar: Char, ignoreCase: Boolean): String // JVM- and JS-specific\n// public fun String.replace(oldValue: String, newValue: String, ignoreCase: Boolean): String // JVM- and JS-specific\n\n/**\n * Returns a new string obtained by replacing each substring of this char sequence that matches the given regular expression\n * with the given [replacement].\n *\n * The [replacement] can consist of any combination of literal text and $-substitutions. To treat the replacement string\n * literally escape it with the [kotlin.text.Regex.Companion.escapeReplacement] method.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replace(regex: Regex, replacement: String): String = regex.replace(this, replacement)\n\n/**\n * Returns a new string obtained by replacing each substring of this char sequence that matches the given regular expression\n * with the result of the given function [transform] that takes [MatchResult] and returns a string to be used as a\n * replacement for that match.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replace(regex: Regex, noinline transform: (MatchResult) -> CharSequence): String =\n    regex.replace(this, transform)\n\n/**\n * Replaces the first occurrence of the given regular expression [regex] in this char sequence with specified [replacement] expression.\n *\n * @param replacement A replacement expression that can include substitutions. See [Regex.replaceFirst] for details.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replaceFirst(regex: Regex, replacement: String): String = regex.replaceFirst(this, replacement)\n\n\n/**\n * Returns `true` if this char sequence matches the given regular expression.\n */\n@kotlin.internal.InlineOnly\npublic inline infix fun CharSequence.matches(regex: Regex): Boolean = regex.matches(this)\n\n/**\n * Implementation of [regionMatches] for CharSequences.\n * Invoked when it's already known that arguments are not Strings, so that no additional type checks are performed.\n */\ninternal fun CharSequence.regionMatchesImpl(thisOffset: Int, other: CharSequence, otherOffset: Int, length: Int, ignoreCase: Boolean): Boolean {\n    if ((otherOffset < 0) || (thisOffset < 0) || (thisOffset > this.length - length) || (otherOffset > other.length - length)) {\n        return false\n    }\n\n    for (index in 0 until length) {\n        if (!this[thisOffset + index].equals(other[otherOffset + index], ignoreCase))\n            return false\n    }\n    return true\n}\n\n/**\n * Returns `true` if this char sequence starts with the specified character.\n */\npublic fun CharSequence.startsWith(char: Char, ignoreCase: Boolean = false): Boolean =\n    this.length > 0 && this[0].equals(char, ignoreCase)\n\n/**\n * Returns `true` if this char sequence ends with the specified character.\n */\npublic fun CharSequence.endsWith(char: Char, ignoreCase: Boolean = false): Boolean =\n    this.length > 0 && this[lastIndex].equals(char, ignoreCase)\n\n/**\n * Returns `true` if this char sequence starts with the specified prefix.\n */\npublic fun CharSequence.startsWith(prefix: CharSequence, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && prefix is String)\n        return this.startsWith(prefix)\n    else\n        return regionMatchesImpl(0, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if a substring of this char sequence starting at the specified offset [startIndex] starts with the specified prefix.\n */\npublic fun CharSequence.startsWith(prefix: CharSequence, startIndex: Int, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && prefix is String)\n        return this.startsWith(prefix, startIndex)\n    else\n        return regionMatchesImpl(startIndex, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if this char sequence ends with the specified suffix.\n */\npublic fun CharSequence.endsWith(suffix: CharSequence, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && suffix is String)\n        return this.endsWith(suffix)\n    else\n        return regionMatchesImpl(length - suffix.length, suffix, 0, suffix.length, ignoreCase)\n}\n\n\n// common prefix and suffix\n\n/**\n * Returns the longest string `prefix` such that this char sequence and [other] char sequence both start with this prefix,\n * taking care not to split surrogate pairs.\n * If this and [other] have no common prefix, returns the empty string.\n\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @sample samples.text.Strings.commonPrefixWith\n */\npublic fun CharSequence.commonPrefixWith(other: CharSequence, ignoreCase: Boolean = false): String {\n    val shortestLength = minOf(this.length, other.length)\n\n    var i = 0\n    while (i < shortestLength && this[i].equals(other[i], ignoreCase = ignoreCase)) {\n        i++\n    }\n    if (this.hasSurrogatePairAt(i - 1) || other.hasSurrogatePairAt(i - 1)) {\n        i--\n    }\n    return subSequence(0, i).toString()\n}\n\n/**\n * Returns the longest string `suffix` such that this char sequence and [other] char sequence both end with this suffix,\n * taking care not to split surrogate pairs.\n * If this and [other] have no common suffix, returns the empty string.\n\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @sample samples.text.Strings.commonSuffixWith\n */\npublic fun CharSequence.commonSuffixWith(other: CharSequence, ignoreCase: Boolean = false): String {\n    val thisLength = this.length\n    val otherLength = other.length\n    val shortestLength = minOf(thisLength, otherLength)\n\n    var i = 0\n    while (i < shortestLength && this[thisLength - i - 1].equals(other[otherLength - i - 1], ignoreCase = ignoreCase)) {\n        i++\n    }\n    if (this.hasSurrogatePairAt(thisLength - i - 1) || other.hasSurrogatePairAt(otherLength - i - 1)) {\n        i--\n    }\n    return subSequence(thisLength - i, thisLength).toString()\n}\n\n\n// indexOfAny()\n\n/**\n * Finds the index of the first occurrence of any of the specified [chars] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the first occurrence of matched character from [chars] or -1 if none of [chars] are found.\n *\n */\npublic fun CharSequence.indexOfAny(chars: CharArray, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    if (!ignoreCase && chars.size == 1 && this is String) {\n        val char = chars.single()\n        return nativeIndexOf(char, startIndex)\n    }\n\n    for (index in startIndex.coerceAtLeast(0)..lastIndex) {\n        val charAtIndex = get(index)\n        if (chars.any { it.equals(charAtIndex, ignoreCase) })\n            return index\n    }\n    return -1\n}\n\n/**\n * Finds the index of the last occurrence of any of the specified [chars] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the last occurrence of matched character from [chars] or -1 if none of [chars] are found.\n *\n */\npublic fun CharSequence.lastIndexOfAny(chars: CharArray, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    if (!ignoreCase && chars.size == 1 && this is String) {\n        val char = chars.single()\n        return nativeLastIndexOf(char, startIndex)\n    }\n\n\n    for (index in startIndex.coerceAtMost(lastIndex) downTo 0) {\n        val charAtIndex = get(index)\n        if (chars.any { it.equals(charAtIndex, ignoreCase) })\n            return index\n    }\n\n    return -1\n}\n\n\nprivate fun CharSequence.indexOf(other: CharSequence, startIndex: Int, endIndex: Int, ignoreCase: Boolean, last: Boolean = false): Int {\n    val indices = if (!last)\n        startIndex.coerceAtLeast(0)..endIndex.coerceAtMost(length)\n    else\n        startIndex.coerceAtMost(lastIndex) downTo endIndex.coerceAtLeast(0)\n\n    if (this is String && other is String) { // smart cast\n        for (index in indices) {\n            if (other.regionMatches(0, this, index, other.length, ignoreCase))\n                return index\n        }\n    } else {\n        for (index in indices) {\n            if (other.regionMatchesImpl(0, this, index, other.length, ignoreCase))\n                return index\n        }\n    }\n    return -1\n}\n\nprivate fun CharSequence.findAnyOf(strings: Collection<String>, startIndex: Int, ignoreCase: Boolean, last: Boolean): Pair<Int, String>? {\n    if (!ignoreCase && strings.size == 1) {\n        val string = strings.single()\n        val index = if (!last) indexOf(string, startIndex) else lastIndexOf(string, startIndex)\n        return if (index < 0) null else index to string\n    }\n\n    val indices = if (!last) startIndex.coerceAtLeast(0)..length else startIndex.coerceAtMost(lastIndex) downTo 0\n\n    if (this is String) {\n        for (index in indices) {\n            val matchingString = strings.firstOrNull { it.regionMatches(0, this, index, it.length, ignoreCase) }\n            if (matchingString != null)\n                return index to matchingString\n        }\n    } else {\n        for (index in indices) {\n            val matchingString = strings.firstOrNull { it.regionMatchesImpl(0, this, index, it.length, ignoreCase) }\n            if (matchingString != null)\n                return index to matchingString\n        }\n    }\n\n    return null\n}\n\n/**\n * Finds the first occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return A pair of an index of the first occurrence of matched string from [strings] and the string matched\n * or `null` if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.findAnyOf(strings: Collection<String>, startIndex: Int = 0, ignoreCase: Boolean = false): Pair<Int, String>? =\n    findAnyOf(strings, startIndex, ignoreCase, last = false)\n\n/**\n * Finds the last occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return A pair of an index of the last occurrence of matched string from [strings] and the string matched or `null` if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the end toward the beginning of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.findLastAnyOf(strings: Collection<String>, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Pair<Int, String>? =\n    findAnyOf(strings, startIndex, ignoreCase, last = true)\n\n/**\n * Finds the index of the first occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the first occurrence of matched string from [strings] or -1 if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.indexOfAny(strings: Collection<String>, startIndex: Int = 0, ignoreCase: Boolean = false): Int =\n    findAnyOf(strings, startIndex, ignoreCase, last = false)?.first ?: -1\n\n/**\n * Finds the index of the last occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the last occurrence of matched string from [strings] or -1 if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the end toward the beginning of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.lastIndexOfAny(strings: Collection<String>, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int =\n    findAnyOf(strings, startIndex, ignoreCase, last = true)?.first ?: -1\n\n\n// indexOf\n\n/**\n * Returns the index within this string of the first occurrence of the specified character, starting from the specified [startIndex].\n *\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the first occurrence of [char] or -1 if none is found.\n */\npublic fun CharSequence.indexOf(char: Char, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOfAny(charArrayOf(char), startIndex, ignoreCase)\n    else\n        nativeIndexOf(char, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the first occurrence of the specified [string],\n * starting from the specified [startIndex].\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the first occurrence of [string] or `-1` if none is found.\n * @sample samples.text.Strings.indexOf\n */\npublic fun CharSequence.indexOf(string: String, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOf(string, startIndex, length, ignoreCase)\n    else\n        nativeIndexOf(string, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the last occurrence of the specified character,\n * starting from the specified [startIndex].\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the last occurrence of [char] or -1 if none is found.\n */\npublic fun CharSequence.lastIndexOf(char: Char, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        lastIndexOfAny(charArrayOf(char), startIndex, ignoreCase)\n    else\n        nativeLastIndexOf(char, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the last occurrence of the specified [string],\n * starting from the specified [startIndex].\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the last occurrence of [string] or -1 if none is found.\n */\npublic fun CharSequence.lastIndexOf(string: String, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOf(string, startIndex, 0, ignoreCase, last = true)\n    else\n        nativeLastIndexOf(string, startIndex)\n}\n\n/**\n * Returns `true` if this char sequence contains the specified [other] sequence of characters as a substring.\n *\n * @param ignoreCase `true` to ignore character case when comparing strings. By default `false`.\n */\n@Suppress(\"INAPPLICABLE_OPERATOR_MODIFIER\")\npublic operator fun CharSequence.contains(other: CharSequence, ignoreCase: Boolean = false): Boolean =\n    if (other is String)\n        indexOf(other, ignoreCase = ignoreCase) >= 0\n    else\n        indexOf(other, 0, length, ignoreCase) >= 0\n\n\n\n/**\n * Returns `true` if this char sequence contains the specified character [char].\n *\n * @param ignoreCase `true` to ignore character case when comparing characters. By default `false`.\n */\n@Suppress(\"INAPPLICABLE_OPERATOR_MODIFIER\")\npublic operator fun CharSequence.contains(char: Char, ignoreCase: Boolean = false): Boolean =\n    indexOf(char, ignoreCase = ignoreCase) >= 0\n\n/**\n * Returns `true` if this char sequence contains at least one match of the specified regular expression [regex].\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharSequence.contains(regex: Regex): Boolean = regex.containsMatchIn(this)\n\n\n// rangesDelimitedBy\n\n\nprivate class DelimitedRangesSequence(\n    private val input: CharSequence,\n    private val startIndex: Int,\n    private val limit: Int,\n    private val getNextMatch: CharSequence.(currentIndex: Int) -> Pair<Int, Int>?\n) : Sequence<IntRange> {\n\n    override fun iterator(): Iterator<IntRange> = object : Iterator<IntRange> {\n        var nextState: Int = -1 // -1 for unknown, 0 for done, 1 for continue\n        var currentStartIndex: Int = startIndex.coerceIn(0, input.length)\n        var nextSearchIndex: Int = currentStartIndex\n        var nextItem: IntRange? = null\n        var counter: Int = 0\n\n        private fun calcNext() {\n            if (nextSearchIndex < 0) {\n                nextState = 0\n                nextItem = null\n            } else {\n                if (limit > 0 && ++counter >= limit || nextSearchIndex > input.length) {\n                    nextItem = currentStartIndex..input.lastIndex\n                    nextSearchIndex = -1\n                } else {\n                    val match = input.getNextMatch(nextSearchIndex)\n                    if (match == null) {\n                        nextItem = currentStartIndex..input.lastIndex\n                        nextSearchIndex = -1\n                    } else {\n                        val (index, length) = match\n                        nextItem = currentStartIndex until index\n                        currentStartIndex = index + length\n                        nextSearchIndex = currentStartIndex + if (length == 0) 1 else 0\n                    }\n                }\n                nextState = 1\n            }\n        }\n\n        override fun next(): IntRange {\n            if (nextState == -1)\n                calcNext()\n            if (nextState == 0)\n                throw NoSuchElementException()\n            val result = nextItem as IntRange\n            // Clean next to avoid keeping reference on yielded instance\n            nextItem = null\n            nextState = -1\n            return result\n        }\n\n        override fun hasNext(): Boolean {\n            if (nextState == -1)\n                calcNext()\n            return nextState == 1\n        }\n    }\n}\n\n/**\n * Returns a sequence of index ranges of substrings in this char sequence around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param startIndex The index to start searching delimiters from.\n *  No range having its start value less than [startIndex] is returned.\n *  [startIndex] is coerced to be non-negative and not greater than length of this string.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n */\nprivate fun CharSequence.rangesDelimitedBy(delimiters: CharArray, startIndex: Int = 0, ignoreCase: Boolean = false, limit: Int = 0): Sequence<IntRange> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" })\n\n    return DelimitedRangesSequence(this, startIndex, limit, { currentIndex ->\n        indexOfAny(delimiters, currentIndex, ignoreCase = ignoreCase).let { if (it < 0) null else it to 1 }\n    })\n}\n\n\n/**\n * Returns a sequence of index ranges of substrings in this char sequence around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param startIndex The index to start searching delimiters from.\n *  No range having its start value less than [startIndex] is returned.\n *  [startIndex] is coerced to be non-negative and not greater than length of this string.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [delimiters]\n * that matches this string at that position.\n */\nprivate fun CharSequence.rangesDelimitedBy(delimiters: Array<out String>, startIndex: Int = 0, ignoreCase: Boolean = false, limit: Int = 0): Sequence<IntRange> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" } )\n    val delimitersList = delimiters.asList()\n\n    return DelimitedRangesSequence(this, startIndex, limit, { currentIndex -> findAnyOf(delimitersList, currentIndex, ignoreCase = ignoreCase, last = false)?.let { it.first to it.second.length } })\n\n}\n\n\n// split\n\n/**\n * Splits this char sequence to a sequence of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [delimiters]\n * that matches this string at that position.\n */\npublic fun CharSequence.splitToSequence(vararg delimiters: String, ignoreCase: Boolean = false, limit: Int = 0): Sequence<String> =\n    rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).map { substring(it) }\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and matches at each position the first element in [delimiters]\n * that is equal to a delimiter in this instance at that position.\n */\npublic fun CharSequence.split(vararg delimiters: String, ignoreCase: Boolean = false, limit: Int = 0): List<String> {\n    if (delimiters.size == 1) {\n        val delimiter = delimiters[0]\n        if (!delimiter.isEmpty()) {\n            return split(delimiter, ignoreCase, limit)\n        }\n    }\n\n    return rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).asIterable().map { substring(it) }\n}\n\n/**\n * Splits this char sequence to a sequence of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\npublic fun CharSequence.splitToSequence(vararg delimiters: Char, ignoreCase: Boolean = false, limit: Int = 0): Sequence<String> =\n    rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).map { substring(it) }\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\npublic fun CharSequence.split(vararg delimiters: Char, ignoreCase: Boolean = false, limit: Int = 0): List<String> {\n    if (delimiters.size == 1) {\n        return split(delimiters[0].toString(), ignoreCase, limit)\n    }\n\n    return rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).asIterable().map { substring(it) }\n}\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiter].\n * This is specialized version of split which receives single non-empty delimiter and offers better performance\n *\n * @param delimiter String used as delimiter\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\nprivate fun CharSequence.split(delimiter: String, ignoreCase: Boolean, limit: Int): List<String> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" })\n\n    var currentOffset = 0\n    var nextIndex = indexOf(delimiter, currentOffset, ignoreCase)\n    if (nextIndex == -1 || limit == 1) {\n        return listOf(this.toString())\n    }\n\n    val isLimited = limit > 0\n    val result = ArrayList<String>(if (isLimited) limit.coerceAtMost(10) else 10)\n    do {\n        result.add(substring(currentOffset, nextIndex))\n        currentOffset = nextIndex + delimiter.length\n        // Do not search for next occurrence if we're reaching limit\n        if (isLimited && result.size == limit - 1) break\n        nextIndex = indexOf(delimiter, currentOffset, ignoreCase)\n    } while (nextIndex != -1)\n\n    result.add(substring(currentOffset, length))\n    return result\n}\n\n/**\n * Splits this char sequence around matches of the given regular expression.\n *\n * @param limit Non-negative value specifying the maximum number of substrings to return.\n * Zero by default means no limit is set.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.split(regex: Regex, limit: Int = 0): List<String> = regex.split(this, limit)\n\n/**\n * Splits this char sequence to a sequence of lines delimited by any of the following character sequences: CRLF, LF or CR.\n *\n * The lines returned do not include terminating line separators.\n */\npublic fun CharSequence.lineSequence(): Sequence<String> = splitToSequence(\"\\r\\n\", \"\\n\", \"\\r\")\n\n/**\n * Splits this char sequence to a list of lines delimited by any of the following character sequences: CRLF, LF or CR.\n *\n * The lines returned do not include terminating line separators.\n */\npublic fun CharSequence.lines(): List<String> = lineSequence().toList()\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"MapsKt\")\n@file:UseExperimental(kotlin.experimental.ExperimentalTypeInference::class)\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\n\nprivate object EmptyMap : Map<Any?, Nothing>, Serializable {\n    private const val serialVersionUID: Long = 8246714829545688274\n\n    override fun equals(other: Any?): Boolean = other is Map<*, *> && other.isEmpty()\n    override fun hashCode(): Int = 0\n    override fun toString(): String = \"{}\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n\n    override fun containsKey(key: Any?): Boolean = false\n    override fun containsValue(value: Nothing): Boolean = false\n    override fun get(key: Any?): Nothing? = null\n    override val entries: Set<Map.Entry<Any?, Nothing>> get() = EmptySet\n    override val keys: Set<Any?> get() = EmptySet\n    override val values: Collection<Nothing> get() = EmptyList\n\n    private fun readResolve(): Any = EmptyMap\n}\n\n/**\n * Returns an empty read-only map of specified type.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\npublic fun <K, V> emptyMap(): Map<K, V> = @Suppress(\"UNCHECKED_CAST\") (EmptyMap as Map<K, V>)\n\n/**\n * Returns a new read-only map with the specified contents, given as a list of pairs\n * where the first value is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * The returned map is serializable (JVM).\n *\n * @sample samples.collections.Maps.Instantiation.mapFromPairs\n */\npublic fun <K, V> mapOf(vararg pairs: Pair<K, V>): Map<K, V> =\n    if (pairs.size > 0) pairs.toMap(LinkedHashMap(mapCapacity(pairs.size))) else emptyMap()\n\n/**\n * Returns an empty read-only map.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mapOf(): Map<K, V> = emptyMap()\n\n/**\n * Returns an empty new [MutableMap].\n *\n * The returned map preserves the entry iteration order.\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mutableMapOf(): MutableMap<K, V> = LinkedHashMap()\n\n/**\n * Returns a new [MutableMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.mutableMapFromPairs\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\npublic fun <K, V> mutableMapOf(vararg pairs: Pair<K, V>): MutableMap<K, V> =\n    LinkedHashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [HashMap].\n *\n * @sample samples.collections.Maps.Instantiation.emptyHashMap\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> hashMapOf(): HashMap<K, V> = HashMap<K, V>()\n\n/**\n * Returns a new [HashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * @sample samples.collections.Maps.Instantiation.hashMapFromPairs\n */\npublic fun <K, V> hashMapOf(vararg pairs: Pair<K, V>): HashMap<K, V> = HashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [LinkedHashMap].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> linkedMapOf(): LinkedHashMap<K, V> = LinkedHashMap<K, V>()\n\n/**\n * Returns a new [LinkedHashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.linkedMapFromPairs\n */\npublic fun <K, V> linkedMapOf(vararg pairs: Pair<K, V>): LinkedHashMap<K, V> = pairs.toMap(LinkedHashMap(mapCapacity(pairs.size)))\n\n/**\n * Builds a new read-only [Map] by populating a [MutableMap] using the given [builderAction]\n * and returning a read-only map with the same key-value pairs.\n *\n * The map passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * Entries of the map are iterated in the order they were added by the [builderAction].\n *\n * @sample samples.collections.Builders.Maps.buildMapSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> buildMap(@BuilderInference builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return LinkedHashMap<K, V>().apply(builderAction)\n}\n\n/**\n * Builds a new read-only [Map] by populating a [MutableMap] using the given [builderAction]\n * and returning a read-only map with the same key-value pairs.\n *\n * The map passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * [capacity] is used to hint the expected number of pairs added in the [builderAction].\n *\n * Entries of the map are iterated in the order they were added by the [builderAction].\n *\n * @throws IllegalArgumentException if the given [capacity] is negative.\n *\n * @sample samples.collections.Builders.Maps.buildMapSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> buildMap(capacity: Int, @BuilderInference builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    checkBuilderCapacity(capacity)\n    return LinkedHashMap<K, V>(mapCapacity(capacity)).apply(builderAction)\n}\n\n/**\n * Calculate the initial capacity of a map.\n */\n@PublishedApi\ninternal expect fun mapCapacity(expectedSize: Int): Int\n\n/**\n * Checks a collection builder function capacity argument.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@PublishedApi\ninternal expect fun checkBuilderCapacity(capacity: Int)\n\n/**\n * Returns `true` if this map is not empty.\n * @sample samples.collections.Maps.Usage.mapIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns `true` if this nullable map is either null or empty.\n * @sample samples.collections.Maps.Usage.mapIsNullOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || isEmpty()\n}\n\n/**\n * Returns the [Map] if its not `null`, or the empty [Map] otherwise.\n *\n * @sample samples.collections.Maps.Usage.mapOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>?.orEmpty(): Map<K, V> = this ?: emptyMap()\n\n/**\n * Returns this map if it's not empty\n * or the result of calling [defaultValue] function if the map is empty.\n *\n * @sample samples.collections.Maps.Usage.mapIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <M, R> M.ifEmpty(defaultValue: () -> R): R where M : Map<*, *>, M : R =\n    if (isEmpty()) defaultValue() else this\n\n/**\n * Checks if the map contains the given key.\n *\n * This method allows to use the `x in map` syntax for checking whether an object is contained in the map.\n *\n * @sample samples.collections.Maps.Usage.containsKey\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.contains(key: K): Boolean = containsKey(key)\n\n/**\n * Returns the value corresponding to the given [key], or `null` if such a key is not present in the map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.get(key: K): V? =\n    @Suppress(\"UNCHECKED_CAST\") (this as Map<K, V>).get(key)\n\n/**\n * Allows to use the index operator for storing values in a mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.set(key: K, value: V): Unit {\n    put(key, value)\n}\n\n/**\n * Returns `true` if the map contains the specified [key].\n *\n * Allows to overcome type-safety restriction of `containsKey` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K> Map<out K, *>.containsKey(key: K): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as Map<K, *>).containsKey(key)\n\n/**\n * Returns `true` if the map maps one or more keys to the specified [value].\n *\n * Allows to overcome type-safety restriction of `containsValue` that requires to pass a value of type `V`.\n *\n * @sample samples.collections.Maps.Usage.containsValue\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <K, @kotlin.internal.OnlyInputTypes V> Map<K, V>.containsValue(value: V): Boolean = this.containsValue(value)\n\n\n/**\n * Removes the specified key and its corresponding value from this map.\n *\n * @return the previous value associated with the key, or `null` if the key was not present in the map.\n\n * Allows to overcome type-safety restriction of `remove` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K, V> MutableMap<out K, V>.remove(key: K): V? =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableMap<K, V>).remove(key)\n\n/**\n * Returns the key component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component1(): K = key\n\n/**\n * Returns the value component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component2(): V = value\n\n/**\n * Converts entry to [Pair] with key being first component and value being second.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map.Entry<K, V>.toPair(): Pair<K, V> = Pair(key, value)\n\n/**\n * Returns the value for the given key, or the result of the [defaultValue] function if there was no entry for the given key.\n *\n * @sample samples.collections.Maps.Usage.getOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>.getOrElse(key: K, defaultValue: () -> V): V = get(key) ?: defaultValue()\n\n\ninternal inline fun <K, V> Map<K, V>.getOrElseNullable(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    if (value == null && !containsKey(key)) {\n        return defaultValue()\n    } else {\n        @Suppress(\"UNCHECKED_CAST\")\n        return value as V\n    }\n}\n\n/**\n * Returns the value for the given [key] or throws an exception if there is no such key in the map.\n *\n * If the map was created by [withDefault], resorts to its `defaultValue` provider function\n * instead of throwing an exception.\n *\n * @throws NoSuchElementException when the map doesn't contain a value for the specified key and\n * no implicit default value was provided for that map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<K, V>.getValue(key: K): V = getOrImplicitDefault(key)\n\n/**\n * Returns the value for the given key. If the key is not found in the map, calls the [defaultValue] function,\n * puts its result into the map under the given key and returns it.\n *\n * Note that the operation is not guaranteed to be atomic if the map is being modified concurrently.\n *\n * @sample samples.collections.Maps.Usage.getOrPut\n */\npublic inline fun <K, V> MutableMap<K, V>.getOrPut(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    return if (value == null) {\n        val answer = defaultValue()\n        put(key, answer)\n        answer\n    } else {\n        value\n    }\n}\n\n/**\n * Returns an [Iterator] over the entries in the [Map].\n *\n * @sample samples.collections.Maps.Usage.forOverEntries\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map<out K, V>.iterator(): Iterator<Map.Entry<K, V>> = entries.iterator()\n\n/**\n * Returns a [MutableIterator] over the mutable entries in the [MutableMap].\n *\n */\n@kotlin.jvm.JvmName(\"mutableIterator\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.iterator(): MutableIterator<MutableMap.MutableEntry<K, V>> = entries.iterator()\n\n/**\n * Populates the given [destination] map with entries having the keys of this map and the values obtained\n * by applying the [transform] function to each entry in this [Map].\n */\npublic inline fun <K, V, R, M : MutableMap<in K, in R>> Map<out K, V>.mapValuesTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, { it.key }, transform)\n}\n\n/**\n * Populates the given [destination] map with entries having the keys obtained\n * by applying the [transform] function to each entry in this [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n */\npublic inline fun <K, V, R, M : MutableMap<in R, in V>> Map<out K, V>.mapKeysTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, transform, { it.value })\n}\n\n/**\n * Puts all the given [pairs] into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Array<out Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given collection into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Iterable<Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given sequence into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Sequence<Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Returns a new map with entries having the keys of this map and the values obtained by applying the [transform]\n * function to each entry in this [Map].\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapValues\n */\npublic inline fun <K, V, R> Map<out K, V>.mapValues(transform: (Map.Entry<K, V>) -> R): Map<K, R> {\n    return mapValuesTo(LinkedHashMap<K, R>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a new Map with entries having the keys obtained by applying the [transform] function to each entry in this\n * [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapKeys\n */\npublic inline fun <K, V, R> Map<out K, V>.mapKeys(transform: (Map.Entry<K, V>) -> R): Map<R, V> {\n    return mapKeysTo(LinkedHashMap<R, V>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a map containing all key-value pairs with keys matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterKeys\n */\npublic inline fun <K, V> Map<out K, V>.filterKeys(predicate: (K) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.key)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n/**\n * Returns a map containing all key-value pairs with values matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n *  @sample samples.collections.Maps.Filtering.filterValues\n */\npublic inline fun <K, V> Map<out K, V>.filterValues(predicate: (V) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.value)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n\n/**\n * Appends all entries matching the given [predicate] into the mutable map given as [destination] parameter.\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filter\n */\npublic inline fun <K, V> Map<out K, V>.filter(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Appends all entries not matching the given [predicate] into the given [destination].\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterNotTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterNotTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (!predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs not matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterNot\n */\npublic inline fun <K, V> Map<out K, V>.filterNot(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterNotTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Returns a new map containing all key-value pairs from the given collection of pairs.\n *\n * The returned map preserves the entry iteration order of the original collection.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Iterable<Pair<K, V>>.toMap(): Map<K, V> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyMap()\n            1 -> mapOf(if (this is List) this[0] else iterator().next())\n            else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n        }\n    }\n    return toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given collection of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Iterable<Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given array of pairs.\n *\n * The returned map preserves the entry iteration order of the original array.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Array<out Pair<K, V>>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> mapOf(this[0])\n    else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n}\n\n/**\n *  Populates and returns the [destination] mutable map with key-value pairs from the given array of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Array<out Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given sequence of pairs.\n *\n * The returned map preserves the entry iteration order of the original sequence.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Sequence<Pair<K, V>>.toMap(): Map<K, V> = toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given sequence of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Sequence<Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new read-only map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMap()\n    else -> toMutableMap()\n}\n\n/**\n * Returns a new mutable map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMutableMap(): MutableMap<K, V> = LinkedHashMap(this)\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Creates a new read-only map by replacing or adding an entry to this map from a given key-value [pair].\n *\n * The returned map preserves the entry iteration order of the original map.\n * The [pair] is iterated in the end if it has a unique key.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pair: Pair<K, V>): Map<K, V> =\n    if (this.isEmpty()) mapOf(pair) else LinkedHashMap(this).apply { put(pair.first, pair.second) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given collection of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] collection.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Iterable<Pair<K, V>>): Map<K, V> =\n    if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given array of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] array.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Array<out Pair<K, V>>): Map<K, V> =\n    if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given sequence of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] sequence.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Sequence<Pair<K, V>>): Map<K, V> =\n    LinkedHashMap(this).apply { putAll(pairs) }.optimizeReadOnlyMap()\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from another [map].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those entries of another [map] that are missing in this map are iterated in the end in the order of that [map].\n */\npublic operator fun <K, V> Map<out K, V>.plus(map: Map<out K, V>): Map<K, V> =\n    LinkedHashMap(this).apply { putAll(map) }\n\n\n/**\n * Appends or replaces the given [pair] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pair: Pair<K, V>) {\n    put(pair.first, pair.second)\n}\n\n/**\n * Appends or replaces all pairs from the given collection of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Iterable<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given array of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Array<out Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given sequence of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Sequence<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all entries from the given [map] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(map: Map<K, V>) {\n    putAll(map)\n}\n\n/**\n * Returns a map containing all entries of the original map except the entry with the given [key].\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(key: K): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(key) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] collection.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Iterable<K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] array.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Array<out K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] sequence.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Sequence<K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Removes the entry with the given [key] from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(key: K) {\n    remove(key)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] collection from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Iterable<K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] array from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Array<out K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries from the keys of which are contained in the given [keys] sequence from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Sequence<K>) {\n    this.keys.removeAll(keys)\n}\n\n\n// do not expose for now @PublishedApi\ninternal fun <K, V> Map<K, V>.optimizeReadOnlyMap() = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMapOrSelf()\n    else -> this\n}\n",null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\n/**\n * A mutable sequence of characters.\n *\n * String builder can be used to efficiently perform multiple string manipulation operations.\n */\nexpect class StringBuilder : Appendable, CharSequence {\n    /** Constructs an empty string builder. */\n    constructor()\n\n    /** Constructs an empty string builder with the specified initial [capacity]. */\n    constructor(capacity: Int)\n\n    /** Constructs a string builder that contains the same characters as the specified [content] char sequence. */\n    constructor(content: CharSequence)\n\n    /** Constructs a string builder that contains the same characters as the specified [content] string. */\n    @SinceKotlin(\"1.3\")\n//    @ExperimentalStdlibApi\n    constructor(content: String)\n\n    override val length: Int\n\n    override operator fun get(index: Int): Char\n\n    override fun subSequence(startIndex: Int, endIndex: Int): CharSequence\n\n    override fun append(value: Char): StringBuilder\n    override fun append(value: CharSequence?): StringBuilder\n    override fun append(value: CharSequence?, startIndex: Int, endIndex: Int): StringBuilder\n\n    /**\n     * Reverses the contents of this string builder and returns this instance.\n     *\n     * Surrogate pairs included in this string builder are treated as single characters.\n     * Therefore, the order of the high-low surrogates is never reversed.\n     *\n     * Note that the reverse operation may produce new surrogate pairs that were unpaired low-surrogates and high-surrogates before the operation.\n     * For example, reversing `\"\\uDC00\\uD800\"` produces `\"\\uD800\\uDC00\"` which is a valid surrogate pair.\n     */\n    fun reverse(): StringBuilder\n\n    /**\n     * Appends the string representation of the specified object [value] to this string builder and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was appended to this string builder.\n     */\n    fun append(value: Any?): StringBuilder\n\n    /**\n     * Appends the string representation of the specified boolean [value] to this string builder and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was appended to this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n//    @ExperimentalStdlibApi\n    fun append(value: Boolean): StringBuilder\n\n    /**\n     * Appends characters in the specified character array [value] to this string builder and returns this instance.\n     *\n     * Characters are appended in order, starting at the index 0.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun append(value: CharArray): StringBuilder\n\n    /**\n     * Appends the specified string [value] to this string builder and returns this instance.\n     */\n    @SinceKotlin(\"1.3\")\n//    @ExperimentalStdlibApi\n    fun append(value: String): StringBuilder\n\n    /**\n     * Returns the current capacity of this string builder.\n     *\n     * The capacity is the maximum length this string builder can have before an allocation occurs.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun capacity(): Int\n\n    /**\n     * Ensures that the capacity of this string builder is at least equal to the specified [minimumCapacity].\n     *\n     * If the current capacity is less than the [minimumCapacity], a new backing storage is allocated with greater capacity.\n     * Otherwise, this method takes no action and simply returns.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun ensureCapacity(minimumCapacity: Int)\n\n    /**\n     * Returns the index within this string builder of the first occurrence of the specified [string].\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun indexOf(string: String): Int\n\n    /**\n     * Returns the index within this string builder of the first occurrence of the specified [string],\n     * starting at the specified [startIndex].\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder starting at the specified [startIndex].\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun indexOf(string: String, startIndex: Int): Int\n\n    /**\n     * Returns the index within this string builder of the last occurrence of the specified [string].\n     * The last occurrence of empty string `\"\"` is considered to be at the index equal to `this.length`.\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun lastIndexOf(string: String): Int\n\n    /**\n     * Returns the index within this string builder of the last occurrence of the specified [string],\n     * starting from the specified [startIndex] toward the beginning.\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder starting at the specified [startIndex].\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun lastIndexOf(string: String, startIndex: Int): Int\n\n    /**\n     * Inserts the string representation of the specified boolean [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was inserted into this string builder at the specified [index].\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun insert(index: Int, value: Boolean): StringBuilder\n\n    /**\n     * Inserts the specified character [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun insert(index: Int, value: Char): StringBuilder\n\n    /**\n     * Inserts characters in the specified character array [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The inserted characters go in same order as in the [value] character array, starting at [index].\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun insert(index: Int, value: CharArray): StringBuilder\n\n    /**\n     * Inserts characters in the specified character sequence [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The inserted characters go in the same order as in the [value] character sequence, starting at [index].\n     *\n     * @param index the position in this string builder to insert at.\n     * @param value the character sequence from which characters are inserted. If [value] is `null`, then the four characters `\"null\"` are inserted.\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun insert(index: Int, value: CharSequence?): StringBuilder\n\n    /**\n     * Inserts the string representation of the specified object [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was inserted into this string builder at the specified [index].\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun insert(index: Int, value: Any?): StringBuilder\n\n    /**\n     * Inserts the string [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun insert(index: Int, value: String): StringBuilder\n\n    /**\n     *  Sets the length of this string builder to the specified [newLength].\n     *\n     *  If the [newLength] is less than the current length, it is changed to the specified [newLength].\n     *  Otherwise, null characters '\\u0000' are appended to this string builder until its length is less than the [newLength].\n     *\n     *  Note that in Kotlin/JS [set] operator function has non-constant execution time complexity.\n     *  Therefore, increasing length of this string builder and then updating each character by index may slow down your program.\n     *\n     *  @throws IndexOutOfBoundsException or [IllegalArgumentException] if [newLength] is less than zero.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun setLength(newLength: Int)\n\n    /**\n     * Returns a new [String] that contains characters in this string builder at [startIndex] (inclusive) and up to the [length] (exclusive).\n     *\n     * @throws IndexOutOfBoundsException if [startIndex] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun substring(startIndex: Int): String\n\n    /**\n     * Returns a new [String] that contains characters in this string builder at [startIndex] (inclusive) and up to the [endIndex] (exclusive).\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun substring(startIndex: Int, endIndex: Int): String\n\n    /**\n     * Attempts to reduce storage used for this string builder.\n     *\n     * If the backing storage of this string builder is larger than necessary to hold its current contents,\n     * then it may be resized to become more space efficient.\n     * Calling this method may, but is not required to, affect the value of the [capacity] property.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun trimToSize()\n}\n\n\n/**\n * Clears the content of this string builder making it empty and returns this instance.\n *\n * @sample samples.text.Strings.clearStringBuilder\n */\n@SinceKotlin(\"1.3\")\npublic expect fun StringBuilder.clear(): StringBuilder\n\n/**\n * Sets the character at the specified [index] to the specified [value].\n *\n * @throws IndexOutOfBoundsException if [index] is out of bounds of this string builder.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic expect operator fun StringBuilder.set(index: Int, value: Char)\n\n/**\n * Replaces characters in the specified range of this string builder with characters in the specified string [value] and returns this instance.\n *\n * @param startIndex the beginning (inclusive) of the range to replace.\n * @param endIndex the end (exclusive) of the range to replace.\n * @param value the string to replace with.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] if [startIndex] is less than zero, greater than the length of this string builder, or `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic expect fun StringBuilder.setRange(startIndex: Int, endIndex: Int, value: String): StringBuilder\n\n/**\n * Removes the character at the specified [index] from this string builder and returns this instance.\n *\n * If the `Char` at the specified [index] is part of a supplementary code point, this method does not remove the entire supplementary character.\n *\n * @param index the index of `Char` to remove.\n *\n * @throws IndexOutOfBoundsException if [index] is out of bounds of this string builder.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic expect fun StringBuilder.deleteAt(index: Int): StringBuilder\n\n/**\n * Removes characters in the specified range from this string builder and returns this instance.\n *\n * @param startIndex the beginning (inclusive) of the range to remove.\n * @param endIndex the end (exclusive) of the range to remove.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic expect fun StringBuilder.deleteRange(startIndex: Int, endIndex: Int): StringBuilder\n\n/**\n * Copies characters from this string builder into the [destination] character array.\n *\n * @param destination the array to copy to.\n * @param destinationOffset the position in the array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the range to copy, 0 by default.\n * @param endIndex the end (exclusive) of the range to copy, length of this string builder by default.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n *  or when that index is out of the [destination] array indices range.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic expect fun StringBuilder.toCharArray(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = this.length)\n\n/**\n * Appends characters in a subarray of the specified character array [value] to this string builder and returns this instance.\n *\n * Characters are appended in order, starting at specified [startIndex].\n *\n * @param value the array from which characters are appended.\n * @param startIndex the beginning (inclusive) of the subarray to append.\n * @param endIndex the end (exclusive) of the subarray to append.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] array indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic expect fun StringBuilder.appendRange(value: CharArray, startIndex: Int, endIndex: Int): StringBuilder\n\n/**\n * Appends a subsequence of the specified character sequence [value] to this string builder and returns this instance.\n *\n * @param value the character sequence from which a subsequence is appended. If [value] is `null`,\n *  then characters are appended as if [value] contained the four characters `\"null\"`.\n * @param startIndex the beginning (inclusive) of the subsequence to append.\n * @param endIndex the end (exclusive) of the subsequence to append.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic expect fun StringBuilder.appendRange(value: CharSequence?, startIndex: Int, endIndex: Int): StringBuilder\n\n/**\n * Inserts characters in a subarray of the specified character array [value] into this string builder at the specified [index] and returns this instance.\n *\n * The inserted characters go in same order as in the [value] array, starting at [index].\n *\n * @param index the position in this string builder to insert at.\n * @param value the array from which characters are inserted.\n * @param startIndex the beginning (inclusive) of the subarray to insert.\n * @param endIndex the end (exclusive) of the subarray to insert.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic expect fun StringBuilder.insertRange(index: Int, value: CharArray, startIndex: Int, endIndex: Int): StringBuilder\n\n/**\n * Inserts characters in a subsequence of the specified character sequence [value] into this string builder at the specified [index] and returns this instance.\n *\n * The inserted characters go in the same order as in the [value] character sequence, starting at [index].\n *\n * @param index the position in this string builder to insert at.\n * @param value the character sequence from which a subsequence is inserted. If [value] is `null`,\n *  then characters will be inserted as if [value] contained the four characters `\"null\"`.\n * @param startIndex the beginning (inclusive) of the subsequence to insert.\n * @param endIndex the end (exclusive) of the subsequence to insert.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic expect fun StringBuilder.insertRange(index: Int, value: CharSequence?, startIndex: Int, endIndex: Int): StringBuilder\n\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\")\n@Deprecated(\"Use append(value: Any?) instead\", ReplaceWith(\"append(value = obj)\"), DeprecationLevel.WARNING)\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.append(obj: Any?): StringBuilder = this.append(obj)\n\n/**\n * Builds new string by populating newly created [StringBuilder] using provided [builderAction]\n * and then converting it to [String].\n */\n@kotlin.internal.InlineOnly\npublic inline fun buildString(builderAction: StringBuilder.() -> Unit): String =\n    StringBuilder().apply(builderAction).toString()\n\n/**\n * Builds new string by populating newly created [StringBuilder] initialized with the given [capacity]\n * using provided [builderAction] and then converting it to [String].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun buildString(capacity: Int, builderAction: StringBuilder.() -> Unit): String =\n    StringBuilder(capacity).apply(builderAction).toString()\n\n/**\n * Appends all arguments to the given StringBuilder.\n */\npublic fun StringBuilder.append(vararg value: String?): StringBuilder {\n    for (item in value)\n        append(item)\n    return this\n}\n\n/**\n * Appends all arguments to the given StringBuilder.\n */\npublic fun StringBuilder.append(vararg value: Any?): StringBuilder {\n    for (item in value)\n        append(item)\n    return this\n}\n",null,null,null,null,null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\n\npublic actual interface Comparator<T> {\n    @JsName(\"compare\")\n    actual fun compare(a: T, b: T): Int\n}\n\npublic actual inline fun <T> Comparator(crossinline comparison: (a: T, b: T) -> Int): Comparator<T> = object : Comparator<T> {\n    override fun compare(a: T, b: T): Int = comparison(a, b)\n}\n",null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:Suppress(\"UNCHECKED_CAST\", \"RedundantVisibilityModifier\")\n\npackage kotlin\n\nimport kotlin.contracts.*\nimport kotlin.internal.InlineOnly\nimport kotlin.jvm.JvmField\n\n/**\n * A discriminated union that encapsulates a successful outcome with a value of type [T]\n * or a failure with an arbitrary [Throwable] exception.\n */\n@Suppress(\"NON_PUBLIC_PRIMARY_CONSTRUCTOR_OF_INLINE_CLASS\")\n@SinceKotlin(\"1.3\")\npublic inline class Result<out T> @PublishedApi internal constructor(\n    @PublishedApi\n    internal val value: Any?\n) : Serializable {\n    // discovery\n\n    /**\n     * Returns `true` if this instance represents a successful outcome.\n     * In this case [isFailure] returns `false`.\n     */\n    public val isSuccess: Boolean get() = value !is Failure\n\n    /**\n     * Returns `true` if this instance represents a failed outcome.\n     * In this case [isSuccess] returns `false`.\n     */\n    public val isFailure: Boolean get() = value is Failure\n\n    // value & exception retrieval\n\n    /**\n     * Returns the encapsulated value if this instance represents [success][Result.isSuccess] or `null`\n     * if it is [failure][Result.isFailure].\n     *\n     * This function is a shorthand for `getOrElse { null }` (see [getOrElse]) or\n     * `fold(onSuccess = { it }, onFailure = { null })` (see [fold]).\n     */\n    @InlineOnly\n    public inline fun getOrNull(): T? =\n        when {\n            isFailure -> null\n            else -> value as T\n        }\n\n    /**\n     * Returns the encapsulated [Throwable] exception if this instance represents [failure][isFailure] or `null`\n     * if it is [success][isSuccess].\n     *\n     * This function is a shorthand for `fold(onSuccess = { null }, onFailure = { it })` (see [fold]).\n     */\n    public fun exceptionOrNull(): Throwable? =\n        when (value) {\n            is Failure -> value.exception\n            else -> null\n        }\n\n    /**\n     * Returns a string `Success(v)` if this instance represents [success][Result.isSuccess]\n     * where `v` is a string representation of the value or a string `Failure(x)` if\n     * it is [failure][isFailure] where `x` is a string representation of the exception.\n     */\n    public override fun toString(): String =\n        when (value) {\n            is Failure -> value.toString() // \"Failure($exception)\"\n            else -> \"Success($value)\"\n        }\n\n    // companion with constructors\n\n    /**\n     * Companion object for [Result] class that contains its constructor functions\n     * [success] and [failure].\n     */\n    public companion object {\n        /**\n         * Returns an instance that encapsulates the given [value] as successful value.\n         */\n        @InlineOnly\n        public inline fun <T> success(value: T): Result<T> =\n            Result(value)\n\n        /**\n         * Returns an instance that encapsulates the given [Throwable] [exception] as failure.\n         */\n        @InlineOnly\n        public inline fun <T> failure(exception: Throwable): Result<T> =\n            Result(createFailure(exception))\n    }\n\n    internal class Failure(\n        @JvmField\n        val exception: Throwable\n    ) : Serializable {\n        override fun equals(other: Any?): Boolean = other is Failure && exception == other.exception\n        override fun hashCode(): Int = exception.hashCode()\n        override fun toString(): String = \"Failure($exception)\"\n    }\n}\n\n/**\n * Creates an instance of internal marker [Result.Failure] class to\n * make sure that this class is not exposed in ABI.\n */\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun createFailure(exception: Throwable): Any =\n    Result.Failure(exception)\n\n/**\n * Throws exception if the result is failure. This internal function minimizes\n * inlined bytecode for [getOrThrow] and makes sure that in the future we can\n * add some exception-augmenting logic here (if needed).\n */\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun Result<*>.throwOnFailure() {\n    if (value is Result.Failure) throw value.exception\n}\n\n/**\n * Calls the specified function [block] and returns its encapsulated result if invocation was successful,\n * catching any [Throwable] exception that was thrown from the [block] function execution and encapsulating it as a failure.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R> runCatching(block: () -> R): Result<R> {\n    return try {\n        Result.success(block())\n    } catch (e: Throwable) {\n        Result.failure(e)\n    }\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns its encapsulated result if invocation was successful,\n * catching any [Throwable] exception that was thrown from the [block] function execution and encapsulating it as a failure.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <T, R> T.runCatching(block: T.() -> R): Result<R> {\n    return try {\n        Result.success(block())\n    } catch (e: Throwable) {\n        Result.failure(e)\n    }\n}\n\n// -- extensions ---\n\n/**\n * Returns the encapsulated value if this instance represents [success][Result.isSuccess] or throws the encapsulated [Throwable] exception\n * if it is [failure][Result.isFailure].\n *\n * This function is a shorthand for `getOrElse { throw it }` (see [getOrElse]).\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <T> Result<T>.getOrThrow(): T {\n    throwOnFailure()\n    return value as T\n}\n\n/**\n * Returns the encapsulated value if this instance represents [success][Result.isSuccess] or the\n * result of [onFailure] function for the encapsulated [Throwable] exception if it is [failure][Result.isFailure].\n *\n * Note, that this function rethrows any [Throwable] exception thrown by [onFailure] function.\n *\n * This function is a shorthand for `fold(onSuccess = { it }, onFailure = onFailure)` (see [fold]).\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T : R> Result<T>.getOrElse(onFailure: (exception: Throwable) -> R): R {\n    contract {\n        callsInPlace(onFailure, InvocationKind.AT_MOST_ONCE)\n    }\n    return when (val exception = exceptionOrNull()) {\n        null -> value as T\n        else -> onFailure(exception)\n    }\n}\n\n/**\n * Returns the encapsulated value if this instance represents [success][Result.isSuccess] or the\n * [defaultValue] if it is [failure][Result.isFailure].\n *\n * This function is a shorthand for `getOrElse { defaultValue }` (see [getOrElse]).\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T : R> Result<T>.getOrDefault(defaultValue: R): R {\n    if (isFailure) return defaultValue\n    return value as T\n}\n\n/**\n * Returns the result of [onSuccess] for the encapsulated value if this instance represents [success][Result.isSuccess]\n * or the result of [onFailure] function for the encapsulated [Throwable] exception if it is [failure][Result.isFailure].\n *\n * Note, that this function rethrows any [Throwable] exception thrown by [onSuccess] or by [onFailure] function.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T> Result<T>.fold(\n    onSuccess: (value: T) -> R,\n    onFailure: (exception: Throwable) -> R\n): R {\n    contract {\n        callsInPlace(onSuccess, InvocationKind.AT_MOST_ONCE)\n        callsInPlace(onFailure, InvocationKind.AT_MOST_ONCE)\n    }\n    return when (val exception = exceptionOrNull()) {\n        null -> onSuccess(value as T)\n        else -> onFailure(exception)\n    }\n}\n\n// transformation\n\n/**\n * Returns the encapsulated result of the given [transform] function applied to the encapsulated value\n * if this instance represents [success][Result.isSuccess] or the\n * original encapsulated [Throwable] exception if it is [failure][Result.isFailure].\n *\n * Note, that this function rethrows any [Throwable] exception thrown by [transform] function.\n * See [mapCatching] for an alternative that encapsulates exceptions.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T> Result<T>.map(transform: (value: T) -> R): Result<R> {\n    contract {\n        callsInPlace(transform, InvocationKind.AT_MOST_ONCE)\n    }\n    return when {\n        isSuccess -> Result.success(transform(value as T))\n        else -> Result(value)\n    }\n}\n\n/**\n * Returns the encapsulated result of the given [transform] function applied to the encapsulated value\n * if this instance represents [success][Result.isSuccess] or the\n * original encapsulated [Throwable] exception if it is [failure][Result.isFailure].\n *\n * This function catches any [Throwable] exception thrown by [transform] function and encapsulates it as a failure.\n * See [map] for an alternative that rethrows exceptions from `transform` function.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T> Result<T>.mapCatching(transform: (value: T) -> R): Result<R> {\n    return when {\n        isSuccess -> runCatching { transform(value as T) }\n        else -> Result(value)\n    }\n}\n\n/**\n * Returns the encapsulated result of the given [transform] function applied to the encapsulated [Throwable] exception\n * if this instance represents [failure][Result.isFailure] or the\n * original encapsulated value if it is [success][Result.isSuccess].\n *\n * Note, that this function rethrows any [Throwable] exception thrown by [transform] function.\n * See [recoverCatching] for an alternative that encapsulates exceptions.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T : R> Result<T>.recover(transform: (exception: Throwable) -> R): Result<R> {\n    contract {\n        callsInPlace(transform, InvocationKind.AT_MOST_ONCE)\n    }\n    return when (val exception = exceptionOrNull()) {\n        null -> this\n        else -> Result.success(transform(exception))\n    }\n}\n\n/**\n * Returns the encapsulated result of the given [transform] function applied to the encapsulated [Throwable] exception\n * if this instance represents [failure][Result.isFailure] or the\n * original encapsulated value if it is [success][Result.isSuccess].\n *\n * This function catches any [Throwable] exception thrown by [transform] function and encapsulates it as a failure.\n * See [recover] for an alternative that rethrows exceptions.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T : R> Result<T>.recoverCatching(transform: (exception: Throwable) -> R): Result<R> {\n    val value = value // workaround for inline classes BE bug\n    return when (val exception = exceptionOrNull()) {\n        null -> this\n        else -> runCatching { transform(exception) }\n    }\n}\n\n// \"peek\" onto value/exception and pipe\n\n/**\n * Performs the given [action] on the encapsulated [Throwable] exception if this instance represents [failure][Result.isFailure].\n * Returns the original `Result` unchanged.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <T> Result<T>.onFailure(action: (exception: Throwable) -> Unit): Result<T> {\n    contract {\n        callsInPlace(action, InvocationKind.AT_MOST_ONCE)\n    }\n    exceptionOrNull()?.let { action(it) }\n    return this\n}\n\n/**\n * Performs the given [action] on the encapsulated value if this instance represents [success][Result.isSuccess].\n * Returns the original `Result` unchanged.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <T> Result<T>.onSuccess(action: (value: T) -> Unit): Result<T> {\n    contract {\n        callsInPlace(action, InvocationKind.AT_MOST_ONCE)\n    }\n    if (isSuccess) action(value as T)\n    return this\n}\n\n// -------------------\n",null,null,null,null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmName(\"LazyKt\")\n@file:kotlin.jvm.JvmMultifileClass\n\npackage kotlin\n\nimport kotlin.reflect.KProperty\n\n/**\n * Represents a value with lazy initialization.\n *\n * To create an instance of [Lazy] use the [lazy] function.\n */\npublic interface Lazy<out T> {\n    /**\n     * Gets the lazily initialized value of the current Lazy instance.\n     * Once the value was initialized it must not change during the rest of lifetime of this Lazy instance.\n     */\n    public val value: T\n\n    /**\n     * Returns `true` if a value for this Lazy instance has been already initialized, and `false` otherwise.\n     * Once this function has returned `true` it stays `true` for the rest of lifetime of this Lazy instance.\n     */\n    public fun isInitialized(): Boolean\n}\n\n/**\n * Creates a new instance of the [Lazy] that is already initialized with the specified [value].\n */\npublic fun <T> lazyOf(value: T): Lazy<T> = InitializedLazyImpl(value)\n\n/**\n * An extension to delegate a read-only property of type [T] to an instance of [Lazy].\n *\n * This extension allows to use instances of Lazy for property delegation:\n * `val property: String by lazy { initializer }`\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Lazy<T>.getValue(thisRef: Any?, property: KProperty<*>): T = value\n\n/**\n * Specifies how a [Lazy] instance synchronizes initialization among multiple threads.\n */\npublic enum class LazyThreadSafetyMode {\n\n    /**\n     * Locks are used to ensure that only a single thread can initialize the [Lazy] instance.\n     */\n    SYNCHRONIZED,\n\n    /**\n     * Initializer function can be called several times on concurrent access to uninitialized [Lazy] instance value,\n     * but only the first returned value will be used as the value of [Lazy] instance.\n     */\n    PUBLICATION,\n\n    /**\n     * No locks are used to synchronize an access to the [Lazy] instance value; if the instance is accessed from multiple threads, its behavior is undefined.\n     *\n     * This mode should not be used unless the [Lazy] instance is guaranteed never to be initialized from more than one thread.\n     */\n    NONE,\n}\n\n\ninternal object UNINITIALIZED_VALUE\n\n// internal to be called from lazy in JS\ninternal class UnsafeLazyImpl<out T>(initializer: () -> T) : Lazy<T>, Serializable {\n    private var initializer: (() -> T)? = initializer\n    private var _value: Any? = UNINITIALIZED_VALUE\n\n    override val value: T\n        get() {\n            if (_value === UNINITIALIZED_VALUE) {\n                _value = initializer!!()\n                initializer = null\n            }\n            @Suppress(\"UNCHECKED_CAST\")\n            return _value as T\n        }\n\n    override fun isInitialized(): Boolean = _value !== UNINITIALIZED_VALUE\n\n    override fun toString(): String = if (isInitialized()) value.toString() else \"Lazy value not initialized yet.\"\n\n    private fun writeReplace(): Any = InitializedLazyImpl(value)\n}\n\ninternal class InitializedLazyImpl<out T>(override val value: T) : Lazy<T>, Serializable {\n\n    override fun isInitialized(): Boolean = true\n\n    override fun toString(): String = value.toString()\n\n}\n",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\nimport kotlin.random.Random\n\n/**\n * Removes a single instance of the specified element from this\n * collection, if it is present.\n *\n * Allows to overcome type-safety restriction of `remove` that requires to pass an element of type `E`.\n *\n * @return `true` if the element has been successfully removed; `false` if it was not present in the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.remove(element: T): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).remove(element)\n\n/**\n * Removes all of this collection's elements that are also contained in the specified collection.\n\n * Allows to overcome type-safety restriction of `removeAll` that requires to pass a collection of type `Collection<E>`.\n *\n * @return `true` if any of the specified elements was removed from the collection, `false` if the collection was not modified.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.removeAll(elements: Collection<T>): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).removeAll(elements)\n\n/**\n * Retains only the elements in this collection that are contained in the specified collection.\n *\n * Allows to overcome type-safety restriction of `retainAll` that requires to pass a collection of type `Collection<E>`.\n *\n * @return `true` if any element was removed from the collection, `false` if the collection was not modified.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.retainAll(elements: Collection<T>): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).retainAll(elements)\n\n/**\n * Adds the specified [element] to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(element: T) {\n    this.add(element)\n}\n\n/**\n * Adds all elements of the given [elements] collection to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Iterable<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] array to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Array<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] sequence to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Sequence<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Removes a single instance of the specified [element] from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(element: T) {\n    this.remove(element)\n}\n\n/**\n * Removes all elements contained in the given [elements] collection from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Iterable<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Removes all elements contained in the given [elements] array from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Array<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Removes all elements contained in the given [elements] sequence from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Sequence<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] collection to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Iterable<T>): Boolean {\n    when (elements) {\n        is Collection -> return addAll(elements)\n        else -> {\n            var result: Boolean = false\n            for (item in elements)\n                if (add(item)) result = true\n            return result\n        }\n    }\n}\n\n/**\n * Adds all elements of the given [elements] sequence to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Sequence<T>): Boolean {\n    var result: Boolean = false\n    for (item in elements) {\n        if (add(item)) result = true\n    }\n    return result\n}\n\n/**\n * Adds all elements of the given [elements] array to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Array<out T>): Boolean {\n    return addAll(elements.asList())\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] collection.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Iterable<T>): Boolean {\n    return removeAll(elements.convertToSetForSetOperationWith(this))\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] sequence.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Sequence<T>): Boolean {\n    val set = elements.toHashSet()\n    return set.isNotEmpty() && removeAll(set)\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] array.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Array<out T>): Boolean {\n    return elements.isNotEmpty() && removeAll(elements.toHashSet())\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] collection.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Iterable<T>): Boolean {\n    return retainAll(elements.convertToSetForSetOperationWith(this))\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] array.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Array<out T>): Boolean {\n    if (elements.isNotEmpty())\n        return retainAll(elements.toHashSet())\n    else\n        return retainNothing()\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] sequence.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Sequence<T>): Boolean {\n    val set = elements.toHashSet()\n    if (set.isNotEmpty())\n        return retainAll(set)\n    else\n        return retainNothing()\n}\n\nprivate fun MutableCollection<*>.retainNothing(): Boolean {\n    val result = isNotEmpty()\n    clear()\n    return result\n}\n\n\n/**\n * Removes all elements from this [MutableIterable] that match the given [predicate].\n *\n * @return `true` if any element was removed from this collection, or `false` when no elements were removed and collection was not modified.\n */\npublic fun <T> MutableIterable<T>.removeAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, true)\n\n/**\n * Retains only elements of this [MutableIterable] that match the given [predicate].\n *\n * @return `true` if any element was removed from this collection, or `false` when all elements were retained and collection was not modified.\n */\npublic fun <T> MutableIterable<T>.retainAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, false)\n\nprivate fun <T> MutableIterable<T>.filterInPlace(predicate: (T) -> Boolean, predicateResultToRemove: Boolean): Boolean {\n    var result = false\n    with(iterator()) {\n        while (hasNext())\n            if (predicate(next()) == predicateResultToRemove) {\n                remove()\n                result = true\n            }\n    }\n    return result\n}\n\n\n/**\n * Returns a new list with the elements of this list randomly shuffled\n * using the specified [random] instance as the source of randomness.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Iterable<T>.shuffled(random: Random): List<T> = toMutableList().apply { shuffle(random) }\n\n\n/**\n * Removes the element at the specified [index] from this list.\n * In Kotlin one should use the [MutableList.removeAt] function instead.\n */\n@Deprecated(\"Use removeAt(index) instead.\", ReplaceWith(\"removeAt(index)\"), level = DeprecationLevel.ERROR)\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList<T>.remove(index: Int): T = removeAt(index)\n\n/**\n * Removes the first element from this mutable list and returns that removed element, or throws [NoSuchElementException] if this list is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <T> MutableList<T>.removeFirst(): T = if (isEmpty()) throw NoSuchElementException(\"List is empty.\") else removeAt(0)\n\n/**\n * Removes the first element from this mutable list and returns that removed element, or returns `null` if this list is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <T> MutableList<T>.removeFirstOrNull(): T? = if (isEmpty()) null else removeAt(0)\n\n/**\n * Removes the last element from this mutable list and returns that removed element, or throws [NoSuchElementException] if this list is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <T> MutableList<T>.removeLast(): T = if (isEmpty()) throw NoSuchElementException(\"List is empty.\") else removeAt(lastIndex)\n\n/**\n * Removes the last element from this mutable list and returns that removed element, or returns `null` if this list is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <T> MutableList<T>.removeLastOrNull(): T? = if (isEmpty()) null else removeAt(lastIndex)\n\n/**\n * Removes all elements from this [MutableList] that match the given [predicate].\n *\n * @return `true` if any element was removed from this collection, or `false` when no elements were removed and collection was not modified.\n */\npublic fun <T> MutableList<T>.removeAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, true)\n\n/**\n * Retains only elements of this [MutableList] that match the given [predicate].\n *\n * @return `true` if any element was removed from this collection, or `false` when all elements were retained and collection was not modified.\n */\npublic fun <T> MutableList<T>.retainAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, false)\n\nprivate fun <T> MutableList<T>.filterInPlace(predicate: (T) -> Boolean, predicateResultToRemove: Boolean): Boolean {\n    if (this !is RandomAccess)\n        return (this as MutableIterable<T>).filterInPlace(predicate, predicateResultToRemove)\n\n    var writeIndex: Int = 0\n    for (readIndex in 0..lastIndex) {\n        val element = this[readIndex]\n        if (predicate(element) == predicateResultToRemove)\n            continue\n\n        if (writeIndex != readIndex)\n            this[writeIndex] = element\n\n        writeIndex++\n    }\n    if (writeIndex < size) {\n        for (removeIndex in lastIndex downTo writeIndex)\n            removeAt(removeIndex)\n\n        return true\n    } else {\n        return false\n    }\n}\n\n/**\n * Randomly shuffles elements in this mutable list using the specified [random] instance as the source of randomness.\n *\n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> MutableList<T>.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n",null,"/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"ArraysKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component1(): Byte {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component1(): Short {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component1(): Int {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component1(): Long {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component1(): Float {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component1(): Double {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component1(): Boolean {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component1(): Char {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component2(): Byte {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component2(): Short {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component2(): Int {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component2(): Long {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component2(): Float {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component2(): Double {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component2(): Boolean {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component2(): Char {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component3(): Byte {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component3(): Short {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component3(): Int {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component3(): Long {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component3(): Float {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component3(): Double {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component3(): Boolean {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component3(): Char {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component4(): Byte {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component4(): Short {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component4(): Int {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component4(): Long {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component4(): Float {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component4(): Double {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component4(): Boolean {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component4(): Char {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component5(): Byte {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component5(): Short {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component5(): Int {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component5(): Long {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component5(): Float {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component5(): Double {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component5(): Boolean {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component5(): Char {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.contains(element: T): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun ByteArray.contains(element: Byte): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun ShortArray.contains(element: Short): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun IntArray.contains(element: Int): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun LongArray.contains(element: Long): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun FloatArray.contains(element: Float): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun DoubleArray.contains(element: Double): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun BooleanArray.contains(element: Boolean): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun CharArray.contains(element: Char): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun <T> Array<out T>.elementAt(index: Int): T\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun ByteArray.elementAt(index: Int): Byte\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun ShortArray.elementAt(index: Int): Short\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun IntArray.elementAt(index: Int): Int\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun LongArray.elementAt(index: Int): Long\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun FloatArray.elementAt(index: Int): Float\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun DoubleArray.elementAt(index: Int): Double\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun BooleanArray.elementAt(index: Int): Boolean\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun CharArray.elementAt(index: Int): Char\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Byte): Byte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Short): Short {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Int): Int {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Long): Long {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Float): Float {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Double): Double {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Boolean): Boolean {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAtOrNull(index: Int): Byte? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAtOrNull(index: Int): Short? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAtOrNull(index: Int): Int? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAtOrNull(index: Int): Long? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAtOrNull(index: Int): Float? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAtOrNull(index: Int): Double? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAtOrNull(index: Int): Boolean? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAtOrNull(index: Int): Char? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.find(predicate: (Byte) -> Boolean): Byte? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.find(predicate: (Short) -> Boolean): Short? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.find(predicate: (Int) -> Boolean): Int? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.find(predicate: (Long) -> Boolean): Long? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.find(predicate: (Float) -> Boolean): Float? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.find(predicate: (Double) -> Boolean): Double? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.find(predicate: (Boolean) -> Boolean): Boolean? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.find(predicate: (Char) -> Boolean): Char? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.findLast(predicate: (Byte) -> Boolean): Byte? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.findLast(predicate: (Short) -> Boolean): Short? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.findLast(predicate: (Int) -> Boolean): Int? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.findLast(predicate: (Long) -> Boolean): Long? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.findLast(predicate: (Float) -> Boolean): Float? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.findLast(predicate: (Double) -> Boolean): Double? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.findLast(predicate: (Boolean) -> Boolean): Boolean? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.findLast(predicate: (Char) -> Boolean): Char? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun <T> Array<out T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ByteArray.first(): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ShortArray.first(): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun IntArray.first(): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun LongArray.first(): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun FloatArray.first(): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun DoubleArray.first(): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun BooleanArray.first(): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun CharArray.first(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Array<out T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ByteArray.first(predicate: (Byte) -> Boolean): Byte {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ShortArray.first(predicate: (Short) -> Boolean): Short {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun IntArray.first(predicate: (Int) -> Boolean): Int {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun LongArray.first(predicate: (Long) -> Boolean): Long {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun FloatArray.first(predicate: (Float) -> Boolean): Float {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun DoubleArray.first(predicate: (Double) -> Boolean): Double {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun BooleanArray.first(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun CharArray.first(predicate: (Char) -> Boolean): Char {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun <T> Array<out T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun ByteArray.firstOrNull(): Byte? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun ShortArray.firstOrNull(): Short? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun IntArray.firstOrNull(): Int? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun LongArray.firstOrNull(): Long? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun FloatArray.firstOrNull(): Float? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun DoubleArray.firstOrNull(): Double? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun BooleanArray.firstOrNull(): Boolean? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun CharArray.firstOrNull(): Char? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Array<out T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun ByteArray.firstOrNull(predicate: (Byte) -> Boolean): Byte? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun ShortArray.firstOrNull(predicate: (Short) -> Boolean): Short? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun IntArray.firstOrNull(predicate: (Int) -> Boolean): Int? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun LongArray.firstOrNull(predicate: (Long) -> Boolean): Long? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun FloatArray.firstOrNull(predicate: (Float) -> Boolean): Float? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun DoubleArray.firstOrNull(predicate: (Double) -> Boolean): Double? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun BooleanArray.firstOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun CharArray.firstOrNull(predicate: (Char) -> Boolean): Char? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.getOrElse(index: Int, defaultValue: (Int) -> Byte): Byte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.getOrElse(index: Int, defaultValue: (Int) -> Short): Short {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.getOrElse(index: Int, defaultValue: (Int) -> Int): Int {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.getOrElse(index: Int, defaultValue: (Int) -> Long): Long {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.getOrElse(index: Int, defaultValue: (Int) -> Float): Float {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.getOrElse(index: Int, defaultValue: (Int) -> Double): Double {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.getOrElse(index: Int, defaultValue: (Int) -> Boolean): Boolean {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.getOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun <T> Array<out T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun ByteArray.getOrNull(index: Int): Byte? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun ShortArray.getOrNull(index: Int): Short? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun IntArray.getOrNull(index: Int): Int? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun LongArray.getOrNull(index: Int): Long? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun FloatArray.getOrNull(index: Int): Float? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun DoubleArray.getOrNull(index: Int): Double? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun BooleanArray.getOrNull(index: Int): Boolean? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun CharArray.getOrNull(index: Int): Char? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.indexOf(element: T): Int {\n    if (element == null) {\n        for (index in indices) {\n            if (this[index] == null) {\n                return index\n            }\n        }\n    } else {\n        for (index in indices) {\n            if (element == this[index]) {\n                return index\n            }\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun ByteArray.indexOf(element: Byte): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun ShortArray.indexOf(element: Short): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun IntArray.indexOf(element: Int): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun LongArray.indexOf(element: Long): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun FloatArray.indexOf(element: Float): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun DoubleArray.indexOf(element: Double): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun BooleanArray.indexOf(element: Boolean): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun CharArray.indexOf(element: Char): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun <T> Array<out T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ByteArray.indexOfFirst(predicate: (Byte) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ShortArray.indexOfFirst(predicate: (Short) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun IntArray.indexOfFirst(predicate: (Int) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun LongArray.indexOfFirst(predicate: (Long) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun FloatArray.indexOfFirst(predicate: (Float) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun DoubleArray.indexOfFirst(predicate: (Double) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun BooleanArray.indexOfFirst(predicate: (Boolean) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun CharArray.indexOfFirst(predicate: (Char) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun <T> Array<out T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ByteArray.indexOfLast(predicate: (Byte) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ShortArray.indexOfLast(predicate: (Short) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun IntArray.indexOfLast(predicate: (Int) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun LongArray.indexOfLast(predicate: (Long) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun FloatArray.indexOfLast(predicate: (Float) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun DoubleArray.indexOfLast(predicate: (Double) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun BooleanArray.indexOfLast(predicate: (Boolean) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun CharArray.indexOfLast(predicate: (Char) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun <T> Array<out T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ByteArray.last(): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ShortArray.last(): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun IntArray.last(): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun LongArray.last(): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun FloatArray.last(): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun DoubleArray.last(): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun BooleanArray.last(): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun CharArray.last(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Array<out T>.last(predicate: (T) -> Boolean): T {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ByteArray.last(predicate: (Byte) -> Boolean): Byte {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ShortArray.last(predicate: (Short) -> Boolean): Short {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun IntArray.last(predicate: (Int) -> Boolean): Int {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun LongArray.last(predicate: (Long) -> Boolean): Long {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun FloatArray.last(predicate: (Float) -> Boolean): Float {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun DoubleArray.last(predicate: (Double) -> Boolean): Double {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun BooleanArray.last(predicate: (Boolean) -> Boolean): Boolean {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun CharArray.last(predicate: (Char) -> Boolean): Char {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.lastIndexOf(element: T): Int {\n    if (element == null) {\n        for (index in indices.reversed()) {\n            if (this[index] == null) {\n                return index\n            }\n        }\n    } else {\n        for (index in indices.reversed()) {\n            if (element == this[index]) {\n                return index\n            }\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun ByteArray.lastIndexOf(element: Byte): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun ShortArray.lastIndexOf(element: Short): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun IntArray.lastIndexOf(element: Int): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun LongArray.lastIndexOf(element: Long): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun FloatArray.lastIndexOf(element: Float): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun DoubleArray.lastIndexOf(element: Double): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun BooleanArray.lastIndexOf(element: Boolean): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun CharArray.lastIndexOf(element: Char): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun <T> Array<out T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun ByteArray.lastOrNull(): Byte? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun ShortArray.lastOrNull(): Short? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun IntArray.lastOrNull(): Int? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun LongArray.lastOrNull(): Long? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun FloatArray.lastOrNull(): Float? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun DoubleArray.lastOrNull(): Double? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun BooleanArray.lastOrNull(): Boolean? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun CharArray.lastOrNull(): Char? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> Array<out T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun ByteArray.lastOrNull(predicate: (Byte) -> Boolean): Byte? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun ShortArray.lastOrNull(predicate: (Short) -> Boolean): Short? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun IntArray.lastOrNull(predicate: (Int) -> Boolean): Int? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun LongArray.lastOrNull(predicate: (Long) -> Boolean): Long? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun FloatArray.lastOrNull(predicate: (Float) -> Boolean): Float? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun DoubleArray.lastOrNull(predicate: (Double) -> Boolean): Double? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun BooleanArray.lastOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun CharArray.lastOrNull(predicate: (Char) -> Boolean): Char? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.random(): T {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.random(): Byte {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.random(): Short {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.random(): Int {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.random(): Long {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.random(): Float {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.random(): Double {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.random(): Boolean {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.random(): Char {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Array<out T>.random(random: Random): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun ByteArray.random(random: Random): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun ShortArray.random(random: Random): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun IntArray.random(random: Random): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun LongArray.random(random: Random): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun FloatArray.random(random: Random): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun DoubleArray.random(random: Random): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun BooleanArray.random(random: Random): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun CharArray.random(random: Random): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.randomOrNull(): T? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.randomOrNull(): Byte? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.randomOrNull(): Short? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.randomOrNull(): Int? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.randomOrNull(): Long? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.randomOrNull(): Float? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.randomOrNull(): Double? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.randomOrNull(): Boolean? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.randomOrNull(): Char? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <T> Array<out T>.randomOrNull(random: Random): T? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun ByteArray.randomOrNull(random: Random): Byte? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun ShortArray.randomOrNull(random: Random): Short? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun IntArray.randomOrNull(random: Random): Int? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun LongArray.randomOrNull(random: Random): Long? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun FloatArray.randomOrNull(random: Random): Float? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun DoubleArray.randomOrNull(random: Random): Double? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun BooleanArray.randomOrNull(random: Random): Boolean? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun CharArray.randomOrNull(random: Random): Char? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun <T> Array<out T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun ByteArray.single(): Byte {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun ShortArray.single(): Short {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun IntArray.single(): Int {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun LongArray.single(): Long {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun FloatArray.single(): Float {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun DoubleArray.single(): Double {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun BooleanArray.single(): Boolean {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun CharArray.single(): Char {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Array<out T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun ByteArray.single(predicate: (Byte) -> Boolean): Byte {\n    var single: Byte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Byte\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun ShortArray.single(predicate: (Short) -> Boolean): Short {\n    var single: Short? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Short\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun IntArray.single(predicate: (Int) -> Boolean): Int {\n    var single: Int? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Int\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun LongArray.single(predicate: (Long) -> Boolean): Long {\n    var single: Long? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Long\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun FloatArray.single(predicate: (Float) -> Boolean): Float {\n    var single: Float? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Float\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun DoubleArray.single(predicate: (Double) -> Boolean): Double {\n    var single: Double? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Double\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun BooleanArray.single(predicate: (Boolean) -> Boolean): Boolean {\n    var single: Boolean? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Boolean\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun CharArray.single(predicate: (Char) -> Boolean): Char {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Char\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun <T> Array<out T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun ByteArray.singleOrNull(): Byte? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun ShortArray.singleOrNull(): Short? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun IntArray.singleOrNull(): Int? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun LongArray.singleOrNull(): Long? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun FloatArray.singleOrNull(): Float? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun DoubleArray.singleOrNull(): Double? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun BooleanArray.singleOrNull(): Boolean? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun CharArray.singleOrNull(): Char? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Array<out T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun ByteArray.singleOrNull(predicate: (Byte) -> Boolean): Byte? {\n    var single: Byte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun ShortArray.singleOrNull(predicate: (Short) -> Boolean): Short? {\n    var single: Short? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun IntArray.singleOrNull(predicate: (Int) -> Boolean): Int? {\n    var single: Int? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun LongArray.singleOrNull(predicate: (Long) -> Boolean): Long? {\n    var single: Long? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun FloatArray.singleOrNull(predicate: (Float) -> Boolean): Float? {\n    var single: Float? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun DoubleArray.singleOrNull(predicate: (Double) -> Boolean): Double? {\n    var single: Double? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun BooleanArray.singleOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    var single: Boolean? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun CharArray.singleOrNull(predicate: (Char) -> Boolean): Char? {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Array<out T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ByteArray.drop(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ShortArray.drop(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun IntArray.drop(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun LongArray.drop(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun FloatArray.drop(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun DoubleArray.drop(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun BooleanArray.drop(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun CharArray.drop(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Array<out T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ByteArray.dropLast(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ShortArray.dropLast(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun IntArray.dropLast(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun LongArray.dropLast(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun FloatArray.dropLast(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun DoubleArray.dropLast(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun BooleanArray.dropLast(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun CharArray.dropLast(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Array<out T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ByteArray.dropLastWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ShortArray.dropLastWhile(predicate: (Short) -> Boolean): List<Short> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun IntArray.dropLastWhile(predicate: (Int) -> Boolean): List<Int> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun LongArray.dropLastWhile(predicate: (Long) -> Boolean): List<Long> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun FloatArray.dropLastWhile(predicate: (Float) -> Boolean): List<Float> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun DoubleArray.dropLastWhile(predicate: (Double) -> Boolean): List<Double> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun BooleanArray.dropLastWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun CharArray.dropLastWhile(predicate: (Char) -> Boolean): List<Char> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Array<out T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ByteArray.dropWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    var yielding = false\n    val list = ArrayList<Byte>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ShortArray.dropWhile(predicate: (Short) -> Boolean): List<Short> {\n    var yielding = false\n    val list = ArrayList<Short>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun IntArray.dropWhile(predicate: (Int) -> Boolean): List<Int> {\n    var yielding = false\n    val list = ArrayList<Int>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun LongArray.dropWhile(predicate: (Long) -> Boolean): List<Long> {\n    var yielding = false\n    val list = ArrayList<Long>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun FloatArray.dropWhile(predicate: (Float) -> Boolean): List<Float> {\n    var yielding = false\n    val list = ArrayList<Float>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun DoubleArray.dropWhile(predicate: (Double) -> Boolean): List<Double> {\n    var yielding = false\n    val list = ArrayList<Double>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun BooleanArray.dropWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    var yielding = false\n    val list = ArrayList<Boolean>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun CharArray.dropWhile(predicate: (Char) -> Boolean): List<Char> {\n    var yielding = false\n    val list = ArrayList<Char>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Array<out T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun ByteArray.filter(predicate: (Byte) -> Boolean): List<Byte> {\n    return filterTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun ShortArray.filter(predicate: (Short) -> Boolean): List<Short> {\n    return filterTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun IntArray.filter(predicate: (Int) -> Boolean): List<Int> {\n    return filterTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun LongArray.filter(predicate: (Long) -> Boolean): List<Long> {\n    return filterTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun FloatArray.filter(predicate: (Float) -> Boolean): List<Float> {\n    return filterTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun DoubleArray.filter(predicate: (Double) -> Boolean): List<Double> {\n    return filterTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun BooleanArray.filter(predicate: (Boolean) -> Boolean): List<Boolean> {\n    return filterTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun CharArray.filter(predicate: (Char) -> Boolean): List<Char> {\n    return filterTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T> Array<out T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun ByteArray.filterIndexed(predicate: (index: Int, Byte) -> Boolean): List<Byte> {\n    return filterIndexedTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun ShortArray.filterIndexed(predicate: (index: Int, Short) -> Boolean): List<Short> {\n    return filterIndexedTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun IntArray.filterIndexed(predicate: (index: Int, Int) -> Boolean): List<Int> {\n    return filterIndexedTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun LongArray.filterIndexed(predicate: (index: Int, Long) -> Boolean): List<Long> {\n    return filterIndexedTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun FloatArray.filterIndexed(predicate: (index: Int, Float) -> Boolean): List<Float> {\n    return filterIndexedTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun DoubleArray.filterIndexed(predicate: (index: Int, Double) -> Boolean): List<Double> {\n    return filterIndexedTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun BooleanArray.filterIndexed(predicate: (index: Int, Boolean) -> Boolean): List<Boolean> {\n    return filterIndexedTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun CharArray.filterIndexed(predicate: (index: Int, Char) -> Boolean): List<Char> {\n    return filterIndexedTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterIndexedTo(destination: C, predicate: (index: Int, Byte) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterIndexedTo(destination: C, predicate: (index: Int, Short) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterIndexedTo(destination: C, predicate: (index: Int, Int) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterIndexedTo(destination: C, predicate: (index: Int, Long) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterIndexedTo(destination: C, predicate: (index: Int, Float) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterIndexedTo(destination: C, predicate: (index: Int, Double) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterIndexedTo(destination: C, predicate: (index: Int, Boolean) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterIndexedTo(destination: C, predicate: (index: Int, Char) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n */\npublic inline fun <reified R> Array<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Array<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Array<out T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun ByteArray.filterNot(predicate: (Byte) -> Boolean): List<Byte> {\n    return filterNotTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun ShortArray.filterNot(predicate: (Short) -> Boolean): List<Short> {\n    return filterNotTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun IntArray.filterNot(predicate: (Int) -> Boolean): List<Int> {\n    return filterNotTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun LongArray.filterNot(predicate: (Long) -> Boolean): List<Long> {\n    return filterNotTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun FloatArray.filterNot(predicate: (Float) -> Boolean): List<Float> {\n    return filterNotTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun DoubleArray.filterNot(predicate: (Double) -> Boolean): List<Double> {\n    return filterNotTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun BooleanArray.filterNot(predicate: (Boolean) -> Boolean): List<Boolean> {\n    return filterNotTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun CharArray.filterNot(predicate: (Char) -> Boolean): List<Char> {\n    return filterNotTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n * \n * @sample samples.collections.Collections.Filtering.filterNotNull\n */\npublic fun <T : Any> Array<out T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n */\npublic fun <C : MutableCollection<in T>, T : Any> Array<out T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterNotTo(destination: C, predicate: (Byte) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterNotTo(destination: C, predicate: (Short) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterNotTo(destination: C, predicate: (Int) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterNotTo(destination: C, predicate: (Long) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterNotTo(destination: C, predicate: (Float) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterNotTo(destination: C, predicate: (Double) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterNotTo(destination: C, predicate: (Boolean) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterNotTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterTo(destination: C, predicate: (Byte) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterTo(destination: C, predicate: (Short) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterTo(destination: C, predicate: (Int) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterTo(destination: C, predicate: (Long) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterTo(destination: C, predicate: (Float) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterTo(destination: C, predicate: (Double) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterTo(destination: C, predicate: (Boolean) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> Array<out T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ByteArray.slice(indices: IntRange): List<Byte> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ShortArray.slice(indices: IntRange): List<Short> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun IntArray.slice(indices: IntRange): List<Int> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun LongArray.slice(indices: IntRange): List<Long> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun FloatArray.slice(indices: IntRange): List<Float> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun DoubleArray.slice(indices: IntRange): List<Double> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun BooleanArray.slice(indices: IntRange): List<Boolean> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun CharArray.slice(indices: IntRange): List<Char> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> Array<out T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun ByteArray.slice(indices: Iterable<Int>): List<Byte> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Byte>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun ShortArray.slice(indices: Iterable<Int>): List<Short> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Short>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun IntArray.slice(indices: Iterable<Int>): List<Int> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Int>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun LongArray.slice(indices: Iterable<Int>): List<Long> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Long>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun FloatArray.slice(indices: Iterable<Int>): List<Float> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Float>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun DoubleArray.slice(indices: Iterable<Int>): List<Double> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Double>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun BooleanArray.slice(indices: Iterable<Int>): List<Boolean> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Boolean>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun CharArray.slice(indices: Iterable<Int>): List<Char> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Char>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun <T> Array<T>.sliceArray(indices: Collection<Int>): Array<T> {\n    val result = arrayOfNulls(this, indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun ByteArray.sliceArray(indices: Collection<Int>): ByteArray {\n    val result = ByteArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun ShortArray.sliceArray(indices: Collection<Int>): ShortArray {\n    val result = ShortArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun IntArray.sliceArray(indices: Collection<Int>): IntArray {\n    val result = IntArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun LongArray.sliceArray(indices: Collection<Int>): LongArray {\n    val result = LongArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun FloatArray.sliceArray(indices: Collection<Int>): FloatArray {\n    val result = FloatArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun DoubleArray.sliceArray(indices: Collection<Int>): DoubleArray {\n    val result = DoubleArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun BooleanArray.sliceArray(indices: Collection<Int>): BooleanArray {\n    val result = BooleanArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun CharArray.sliceArray(indices: Collection<Int>): CharArray {\n    val result = CharArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun <T> Array<T>.sliceArray(indices: IntRange): Array<T> {\n    if (indices.isEmpty()) return copyOfRange(0, 0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun ByteArray.sliceArray(indices: IntRange): ByteArray {\n    if (indices.isEmpty()) return ByteArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun ShortArray.sliceArray(indices: IntRange): ShortArray {\n    if (indices.isEmpty()) return ShortArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun IntArray.sliceArray(indices: IntRange): IntArray {\n    if (indices.isEmpty()) return IntArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun LongArray.sliceArray(indices: IntRange): LongArray {\n    if (indices.isEmpty()) return LongArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun FloatArray.sliceArray(indices: IntRange): FloatArray {\n    if (indices.isEmpty()) return FloatArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun DoubleArray.sliceArray(indices: IntRange): DoubleArray {\n    if (indices.isEmpty()) return DoubleArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun BooleanArray.sliceArray(indices: IntRange): BooleanArray {\n    if (indices.isEmpty()) return BooleanArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun CharArray.sliceArray(indices: IntRange): CharArray {\n    if (indices.isEmpty()) return CharArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Array<out T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ByteArray.take(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Byte>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ShortArray.take(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Short>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun IntArray.take(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Int>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun LongArray.take(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Long>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun FloatArray.take(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Float>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun DoubleArray.take(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Double>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun BooleanArray.take(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Boolean>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun CharArray.take(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Char>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Array<out T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<T>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ByteArray.takeLast(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Byte>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ShortArray.takeLast(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Short>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun IntArray.takeLast(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Int>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun LongArray.takeLast(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Long>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun FloatArray.takeLast(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Float>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun DoubleArray.takeLast(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Double>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun BooleanArray.takeLast(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Boolean>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun CharArray.takeLast(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Char>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Array<out T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ByteArray.takeLastWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ShortArray.takeLastWhile(predicate: (Short) -> Boolean): List<Short> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun IntArray.takeLastWhile(predicate: (Int) -> Boolean): List<Int> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun LongArray.takeLastWhile(predicate: (Long) -> Boolean): List<Long> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun FloatArray.takeLastWhile(predicate: (Float) -> Boolean): List<Float> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun DoubleArray.takeLastWhile(predicate: (Double) -> Boolean): List<Double> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun BooleanArray.takeLastWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun CharArray.takeLastWhile(predicate: (Char) -> Boolean): List<Char> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Array<out T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ByteArray.takeWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    val list = ArrayList<Byte>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ShortArray.takeWhile(predicate: (Short) -> Boolean): List<Short> {\n    val list = ArrayList<Short>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun IntArray.takeWhile(predicate: (Int) -> Boolean): List<Int> {\n    val list = ArrayList<Int>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun LongArray.takeWhile(predicate: (Long) -> Boolean): List<Long> {\n    val list = ArrayList<Long>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun FloatArray.takeWhile(predicate: (Float) -> Boolean): List<Float> {\n    val list = ArrayList<Float>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun DoubleArray.takeWhile(predicate: (Double) -> Boolean): List<Double> {\n    val list = ArrayList<Double>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun BooleanArray.takeWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    val list = ArrayList<Boolean>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun CharArray.takeWhile(predicate: (Char) -> Boolean): List<Char> {\n    val list = ArrayList<Char>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun <T> Array<T>.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun ByteArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun ShortArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun IntArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun LongArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun FloatArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun DoubleArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun BooleanArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun CharArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Array<out T>.reversed(): List<T> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun ByteArray.reversed(): List<Byte> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun ShortArray.reversed(): List<Short> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun IntArray.reversed(): List<Int> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun LongArray.reversed(): List<Long> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun FloatArray.reversed(): List<Float> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun DoubleArray.reversed(): List<Double> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun BooleanArray.reversed(): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun CharArray.reversed(): List<Char> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun <T> Array<T>.reversedArray(): Array<T> {\n    if (isEmpty()) return this\n    val result = arrayOfNulls(this, size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun ByteArray.reversedArray(): ByteArray {\n    if (isEmpty()) return this\n    val result = ByteArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun ShortArray.reversedArray(): ShortArray {\n    if (isEmpty()) return this\n    val result = ShortArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun IntArray.reversedArray(): IntArray {\n    if (isEmpty()) return this\n    val result = IntArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun LongArray.reversedArray(): LongArray {\n    if (isEmpty()) return this\n    val result = LongArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun FloatArray.reversedArray(): FloatArray {\n    if (isEmpty()) return this\n    val result = FloatArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun DoubleArray.reversedArray(): DoubleArray {\n    if (isEmpty()) return this\n    val result = DoubleArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun BooleanArray.reversedArray(): BooleanArray {\n    if (isEmpty()) return this\n    val result = BooleanArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun CharArray.reversedArray(): CharArray {\n    if (isEmpty()) return this\n    val result = CharArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Sorts elements in the array in-place according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the array in-place descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun ByteArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun ShortArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun IntArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun LongArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun FloatArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun DoubleArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun CharArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sorted(): List<T> {\n    return sortedArray().asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun ByteArray.sorted(): List<Byte> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun ShortArray.sorted(): List<Short> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun IntArray.sorted(): List<Int> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun LongArray.sorted(): List<Long> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun FloatArray.sorted(): List<Float> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun DoubleArray.sorted(): List<Double> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun CharArray.sorted(): List<Char> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<T>.sortedArray(): Array<T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun ByteArray.sortedArray(): ByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun ShortArray.sortedArray(): ShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun IntArray.sortedArray(): IntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun LongArray.sortedArray(): LongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun FloatArray.sortedArray(): FloatArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun DoubleArray.sortedArray(): DoubleArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun CharArray.sortedArray(): CharArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<T>.sortedArrayDescending(): Array<T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortWith(reverseOrder()) }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun ByteArray.sortedArrayDescending(): ByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun ShortArray.sortedArrayDescending(): ShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun IntArray.sortedArrayDescending(): IntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun LongArray.sortedArrayDescending(): LongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun FloatArray.sortedArrayDescending(): FloatArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun DoubleArray.sortedArrayDescending(): DoubleArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun CharArray.sortedArrayDescending(): CharArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sortedArrayWith(comparator: Comparator<in T>): Array<out T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortWith(comparator) }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ByteArray.sortedBy(crossinline selector: (Byte) -> R?): List<Byte> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ShortArray.sortedBy(crossinline selector: (Short) -> R?): List<Short> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> IntArray.sortedBy(crossinline selector: (Int) -> R?): List<Int> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> LongArray.sortedBy(crossinline selector: (Long) -> R?): List<Long> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> FloatArray.sortedBy(crossinline selector: (Float) -> R?): List<Float> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.sortedBy(crossinline selector: (Double) -> R?): List<Double> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.sortedBy(crossinline selector: (Boolean) -> R?): List<Boolean> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> CharArray.sortedBy(crossinline selector: (Char) -> R?): List<Char> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ByteArray.sortedByDescending(crossinline selector: (Byte) -> R?): List<Byte> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ShortArray.sortedByDescending(crossinline selector: (Short) -> R?): List<Short> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> IntArray.sortedByDescending(crossinline selector: (Int) -> R?): List<Int> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> LongArray.sortedByDescending(crossinline selector: (Long) -> R?): List<Long> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> FloatArray.sortedByDescending(crossinline selector: (Float) -> R?): List<Float> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.sortedByDescending(crossinline selector: (Double) -> R?): List<Double> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.sortedByDescending(crossinline selector: (Boolean) -> R?): List<Boolean> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> CharArray.sortedByDescending(crossinline selector: (Char) -> R?): List<Char> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun ByteArray.sortedDescending(): List<Byte> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun ShortArray.sortedDescending(): List<Short> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun IntArray.sortedDescending(): List<Int> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun LongArray.sortedDescending(): List<Long> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun FloatArray.sortedDescending(): List<Float> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun DoubleArray.sortedDescending(): List<Double> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun CharArray.sortedDescending(): List<Char> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    return sortedArrayWith(comparator).asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun ByteArray.sortedWith(comparator: Comparator<in Byte>): List<Byte> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun ShortArray.sortedWith(comparator: Comparator<in Short>): List<Short> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun IntArray.sortedWith(comparator: Comparator<in Int>): List<Int> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun LongArray.sortedWith(comparator: Comparator<in Long>): List<Long> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun FloatArray.sortedWith(comparator: Comparator<in Float>): List<Float> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun DoubleArray.sortedWith(comparator: Comparator<in Double>): List<Double> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun BooleanArray.sortedWith(comparator: Comparator<in Boolean>): List<Boolean> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun CharArray.sortedWith(comparator: Comparator<in Char>): List<Char> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun <T> Array<out T>.asList(): List<T>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun ByteArray.asList(): List<Byte>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun ShortArray.asList(): List<Short>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun IntArray.asList(): List<Int>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun LongArray.asList(): List<Long>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun FloatArray.asList(): List<Float>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun DoubleArray.asList(): List<Double>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun BooleanArray.asList(): List<Boolean>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun CharArray.asList(): List<Char>\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun <T> Array<out T>.contentDeepEquals(other: Array<out T>): Boolean\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T> Array<out T>.contentDeepHashCode(): Int\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T> Array<out T>.contentDeepToString(): String\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun <T> Array<out T>.contentEquals(other: Array<out T>): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun ByteArray.contentEquals(other: ByteArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun ShortArray.contentEquals(other: ShortArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun IntArray.contentEquals(other: IntArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun LongArray.contentEquals(other: LongArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun FloatArray.contentEquals(other: FloatArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun DoubleArray.contentEquals(other: DoubleArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun BooleanArray.contentEquals(other: BooleanArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun CharArray.contentEquals(other: CharArray): Boolean\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T> Array<out T>.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun ByteArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun ShortArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun IntArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun LongArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun FloatArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun DoubleArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun BooleanArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun CharArray.contentHashCode(): Int\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T> Array<out T>.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun ByteArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun ShortArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun IntArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun LongArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun FloatArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun DoubleArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun BooleanArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun CharArray.contentToString(): String\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun <T> Array<out T>.copyInto(destination: Array<T>, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): Array<T>\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ByteArray.copyInto(destination: ByteArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ByteArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ShortArray.copyInto(destination: ShortArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ShortArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun IntArray.copyInto(destination: IntArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): IntArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun LongArray.copyInto(destination: LongArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): LongArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun FloatArray.copyInto(destination: FloatArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): FloatArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun DoubleArray.copyInto(destination: DoubleArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): DoubleArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun BooleanArray.copyInto(destination: BooleanArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): BooleanArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun CharArray.copyInto(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): CharArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOf(): Array<T>\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun ByteArray.copyOf(): ByteArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun ShortArray.copyOf(): ShortArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun IntArray.copyOf(): IntArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun LongArray.copyOf(): LongArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun FloatArray.copyOf(): FloatArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun DoubleArray.copyOf(): DoubleArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun BooleanArray.copyOf(): BooleanArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun CharArray.copyOf(): CharArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun ByteArray.copyOf(newSize: Int): ByteArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun ShortArray.copyOf(newSize: Int): ShortArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun IntArray.copyOf(newSize: Int): IntArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun LongArray.copyOf(newSize: Int): LongArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun FloatArray.copyOf(newSize: Int): FloatArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun DoubleArray.copyOf(newSize: Int): DoubleArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `false` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `false` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun BooleanArray.copyOf(newSize: Int): BooleanArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with null char (`\\u0000`) values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with null char (`\\u0000`) values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun CharArray.copyOf(newSize: Int): CharArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `null` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `null` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizingCopyOf\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOf(newSize: Int): Array<T?>\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOfRange(fromIndex: Int, toIndex: Int): Array<T>\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun ByteArray.copyOfRange(fromIndex: Int, toIndex: Int): ByteArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun ShortArray.copyOfRange(fromIndex: Int, toIndex: Int): ShortArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun IntArray.copyOfRange(fromIndex: Int, toIndex: Int): IntArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun LongArray.copyOfRange(fromIndex: Int, toIndex: Int): LongArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun FloatArray.copyOfRange(fromIndex: Int, toIndex: Int): FloatArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun DoubleArray.copyOfRange(fromIndex: Int, toIndex: Int): DoubleArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun BooleanArray.copyOfRange(fromIndex: Int, toIndex: Int): BooleanArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun CharArray.copyOfRange(fromIndex: Int, toIndex: Int): CharArray\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun <T> Array<T>.fill(element: T, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ByteArray.fill(element: Byte, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ShortArray.fill(element: Short, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun IntArray.fill(element: Int, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun LongArray.fill(element: Long, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun FloatArray.fill(element: Float, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun DoubleArray.fill(element: Double, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun BooleanArray.fill(element: Boolean, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun CharArray.fill(element: Char, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val <T> Array<out T>.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val ByteArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val ShortArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val IntArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val LongArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val FloatArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val DoubleArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val BooleanArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val CharArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns the last valid index for the array.\n */\npublic val <T> Array<out T>.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val ByteArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val ShortArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val IntArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val LongArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val FloatArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val DoubleArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val BooleanArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val CharArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(element: T): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun ByteArray.plus(element: Byte): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun ShortArray.plus(element: Short): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun IntArray.plus(element: Int): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun LongArray.plus(element: Long): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun FloatArray.plus(element: Float): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun DoubleArray.plus(element: Double): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun BooleanArray.plus(element: Boolean): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun CharArray.plus(element: Char): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(elements: Collection<T>): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun ByteArray.plus(elements: Collection<Byte>): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun ShortArray.plus(elements: Collection<Short>): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun IntArray.plus(elements: Collection<Int>): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun LongArray.plus(elements: Collection<Long>): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun FloatArray.plus(elements: Collection<Float>): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun DoubleArray.plus(elements: Collection<Double>): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun BooleanArray.plus(elements: Collection<Boolean>): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun CharArray.plus(elements: Collection<Char>): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(elements: Array<out T>): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun ByteArray.plus(elements: ByteArray): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun ShortArray.plus(elements: ShortArray): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun IntArray.plus(elements: IntArray): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun LongArray.plus(elements: LongArray): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun FloatArray.plus(elements: FloatArray): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun DoubleArray.plus(elements: DoubleArray): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun BooleanArray.plus(elements: BooleanArray): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun CharArray.plus(elements: CharArray): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.plusElement(element: T): Array<T>\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun IntArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun LongArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun ByteArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun ShortArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun DoubleArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun FloatArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun CharArray.sort(): Unit\n\n/**\n * Sorts the array in-place according to the natural order of its elements.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @sample samples.collections.Arrays.Sorting.sortArrayOfComparable\n */\npublic expect fun <T : Comparable<T>> Array<out T>.sort(): Unit\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic expect fun <T> Array<out T>.sortWith(comparator: Comparator<in T>): Unit\n\n/**\n * Returns an array of Boolean containing all of the elements of this generic array.\n */\npublic fun Array<out Boolean>.toBooleanArray(): BooleanArray {\n    return BooleanArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this generic array.\n */\npublic fun Array<out Byte>.toByteArray(): ByteArray {\n    return ByteArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Char containing all of the elements of this generic array.\n */\npublic fun Array<out Char>.toCharArray(): CharArray {\n    return CharArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Double containing all of the elements of this generic array.\n */\npublic fun Array<out Double>.toDoubleArray(): DoubleArray {\n    return DoubleArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Float containing all of the elements of this generic array.\n */\npublic fun Array<out Float>.toFloatArray(): FloatArray {\n    return FloatArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Int containing all of the elements of this generic array.\n */\npublic fun Array<out Int>.toIntArray(): IntArray {\n    return IntArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Long containing all of the elements of this generic array.\n */\npublic fun Array<out Long>.toLongArray(): LongArray {\n    return LongArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Short containing all of the elements of this generic array.\n */\npublic fun Array<out Short>.toShortArray(): ShortArray {\n    return ShortArray(size) { index -> this[index] }\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun ByteArray.toTypedArray(): Array<Byte>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun ShortArray.toTypedArray(): Array<Short>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun IntArray.toTypedArray(): Array<Int>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun LongArray.toTypedArray(): Array<Long>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun FloatArray.toTypedArray(): Array<Float>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun DoubleArray.toTypedArray(): Array<Double>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun BooleanArray.toTypedArray(): Array<Boolean>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun CharArray.toTypedArray(): Array<Char>\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <T, K, V> Array<out T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> ByteArray.associate(transform: (Byte) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> ShortArray.associate(transform: (Short) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> IntArray.associate(transform: (Int) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> LongArray.associate(transform: (Long) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> FloatArray.associate(transform: (Float) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> DoubleArray.associate(transform: (Double) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> BooleanArray.associate(transform: (Boolean) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> CharArray.associate(transform: (Char) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <T, K> Array<out T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> ByteArray.associateBy(keySelector: (Byte) -> K): Map<K, Byte> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Byte>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> ShortArray.associateBy(keySelector: (Short) -> K): Map<K, Short> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Short>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> IntArray.associateBy(keySelector: (Int) -> K): Map<K, Int> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Int>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> LongArray.associateBy(keySelector: (Long) -> K): Map<K, Long> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Long>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> FloatArray.associateBy(keySelector: (Float) -> K): Map<K, Float> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Float>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> DoubleArray.associateBy(keySelector: (Double) -> K): Map<K, Double> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Double>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> BooleanArray.associateBy(keySelector: (Boolean) -> K): Map<K, Boolean> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Boolean>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> CharArray.associateBy(keySelector: (Char) -> K): Map<K, Char> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Char>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <T, K, V> Array<out T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> ByteArray.associateBy(keySelector: (Byte) -> K, valueTransform: (Byte) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> ShortArray.associateBy(keySelector: (Short) -> K, valueTransform: (Short) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> IntArray.associateBy(keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> LongArray.associateBy(keySelector: (Long) -> K, valueTransform: (Long) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> FloatArray.associateBy(keySelector: (Float) -> K, valueTransform: (Float) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> DoubleArray.associateBy(keySelector: (Double) -> K, valueTransform: (Double) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> BooleanArray.associateBy(keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> CharArray.associateBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Array<out T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Byte>> ByteArray.associateByTo(destination: M, keySelector: (Byte) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Short>> ShortArray.associateByTo(destination: M, keySelector: (Short) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Int>> IntArray.associateByTo(destination: M, keySelector: (Int) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Long>> LongArray.associateByTo(destination: M, keySelector: (Long) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Float>> FloatArray.associateByTo(destination: M, keySelector: (Float) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Double>> DoubleArray.associateByTo(destination: M, keySelector: (Double) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Boolean>> BooleanArray.associateByTo(destination: M, keySelector: (Boolean) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Char>> CharArray.associateByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateByTo(destination: M, keySelector: (Byte) -> K, valueTransform: (Byte) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateByTo(destination: M, keySelector: (Short) -> K, valueTransform: (Short) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> IntArray.associateByTo(destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> LongArray.associateByTo(destination: M, keySelector: (Long) -> K, valueTransform: (Long) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateByTo(destination: M, keySelector: (Float) -> K, valueTransform: (Float) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateByTo(destination: M, keySelector: (Double) -> K, valueTransform: (Double) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateByTo(destination: M, keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharArray.associateByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateTo(destination: M, transform: (Byte) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateTo(destination: M, transform: (Short) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> IntArray.associateTo(destination: M, transform: (Int) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> LongArray.associateTo(destination: M, transform: (Long) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateTo(destination: M, transform: (Float) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateTo(destination: M, transform: (Double) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateTo(destination: M, transform: (Boolean) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharArray.associateTo(destination: M, transform: (Char) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Array<out T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Byte>> ByteArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Short>> ShortArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Int>> IntArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Long>> LongArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Float>> FloatArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Double>> DoubleArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Boolean>> BooleanArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Char>> CharArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun <T> Array<out T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun ByteArray.toHashSet(): HashSet<Byte> {\n    return toCollection(HashSet<Byte>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun ShortArray.toHashSet(): HashSet<Short> {\n    return toCollection(HashSet<Short>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun IntArray.toHashSet(): HashSet<Int> {\n    return toCollection(HashSet<Int>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun LongArray.toHashSet(): HashSet<Long> {\n    return toCollection(HashSet<Long>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun FloatArray.toHashSet(): HashSet<Float> {\n    return toCollection(HashSet<Float>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun DoubleArray.toHashSet(): HashSet<Double> {\n    return toCollection(HashSet<Double>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun BooleanArray.toHashSet(): HashSet<Boolean> {\n    return toCollection(HashSet<Boolean>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun CharArray.toHashSet(): HashSet<Char> {\n    return toCollection(HashSet<Char>(mapCapacity(size)))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Array<out T>.toList(): List<T> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun ByteArray.toList(): List<Byte> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun ShortArray.toList(): List<Short> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun IntArray.toList(): List<Int> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun LongArray.toList(): List<Long> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun FloatArray.toList(): List<Float> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun DoubleArray.toList(): List<Double> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun BooleanArray.toList(): List<Boolean> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun CharArray.toList(): List<Char> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun <T> Array<out T>.toMutableList(): MutableList<T> {\n    return ArrayList(this.asCollection())\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun ByteArray.toMutableList(): MutableList<Byte> {\n    val list = ArrayList<Byte>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun ShortArray.toMutableList(): MutableList<Short> {\n    val list = ArrayList<Short>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun IntArray.toMutableList(): MutableList<Int> {\n    val list = ArrayList<Int>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun LongArray.toMutableList(): MutableList<Long> {\n    val list = ArrayList<Long>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun FloatArray.toMutableList(): MutableList<Float> {\n    val list = ArrayList<Float>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun DoubleArray.toMutableList(): MutableList<Double> {\n    val list = ArrayList<Double>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun BooleanArray.toMutableList(): MutableList<Boolean> {\n    val list = ArrayList<Boolean>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun CharArray.toMutableList(): MutableList<Char> {\n    val list = ArrayList<Char>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun <T> Array<out T>.toSet(): Set<T> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ByteArray.toSet(): Set<Byte> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Byte>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ShortArray.toSet(): Set<Short> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Short>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun IntArray.toSet(): Set<Int> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Int>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun LongArray.toSet(): Set<Long> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Long>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun FloatArray.toSet(): Set<Float> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Float>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun DoubleArray.toSet(): Set<Double> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Double>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun BooleanArray.toSet(): Set<Boolean> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Boolean>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun CharArray.toSet(): Set<Char> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Char>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <T, R> Array<out T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> ByteArray.flatMap(transform: (Byte) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> ShortArray.flatMap(transform: (Short) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> IntArray.flatMap(transform: (Int) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> LongArray.flatMap(transform: (Long) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> FloatArray.flatMap(transform: (Float) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> DoubleArray.flatMap(transform: (Double) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> BooleanArray.flatMap(transform: (Boolean) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> CharArray.flatMap(transform: (Char) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.flatMapTo(destination: C, transform: (Byte) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.flatMapTo(destination: C, transform: (Short) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.flatMapTo(destination: C, transform: (Int) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.flatMapTo(destination: C, transform: (Long) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.flatMapTo(destination: C, transform: (Float) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.flatMapTo(destination: C, transform: (Double) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.flatMapTo(destination: C, transform: (Boolean) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.flatMapTo(destination: C, transform: (Char) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Array<out T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> ByteArray.groupBy(keySelector: (Byte) -> K): Map<K, List<Byte>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Byte>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> ShortArray.groupBy(keySelector: (Short) -> K): Map<K, List<Short>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Short>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> IntArray.groupBy(keySelector: (Int) -> K): Map<K, List<Int>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Int>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> LongArray.groupBy(keySelector: (Long) -> K): Map<K, List<Long>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Long>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> FloatArray.groupBy(keySelector: (Float) -> K): Map<K, List<Float>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Float>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> DoubleArray.groupBy(keySelector: (Double) -> K): Map<K, List<Double>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Double>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> BooleanArray.groupBy(keySelector: (Boolean) -> K): Map<K, List<Boolean>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Boolean>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> CharArray.groupBy(keySelector: (Char) -> K): Map<K, List<Char>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Char>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Array<out T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> ByteArray.groupBy(keySelector: (Byte) -> K, valueTransform: (Byte) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> ShortArray.groupBy(keySelector: (Short) -> K, valueTransform: (Short) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> IntArray.groupBy(keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> LongArray.groupBy(keySelector: (Long) -> K, valueTransform: (Long) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> FloatArray.groupBy(keySelector: (Float) -> K, valueTransform: (Float) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> DoubleArray.groupBy(keySelector: (Double) -> K, valueTransform: (Double) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> BooleanArray.groupBy(keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> CharArray.groupBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Array<out T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Byte>>> ByteArray.groupByTo(destination: M, keySelector: (Byte) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Byte>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Short>>> ShortArray.groupByTo(destination: M, keySelector: (Short) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Short>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Int>>> IntArray.groupByTo(destination: M, keySelector: (Int) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Int>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Long>>> LongArray.groupByTo(destination: M, keySelector: (Long) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Long>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Float>>> FloatArray.groupByTo(destination: M, keySelector: (Float) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Float>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Double>>> DoubleArray.groupByTo(destination: M, keySelector: (Double) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Double>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Boolean>>> BooleanArray.groupByTo(destination: M, keySelector: (Boolean) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Boolean>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Char>>> CharArray.groupByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Char>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Array<out T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ByteArray.groupByTo(destination: M, keySelector: (Byte) -> K, valueTransform: (Byte) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ShortArray.groupByTo(destination: M, keySelector: (Short) -> K, valueTransform: (Short) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> IntArray.groupByTo(destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> LongArray.groupByTo(destination: M, keySelector: (Long) -> K, valueTransform: (Long) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> FloatArray.groupByTo(destination: M, keySelector: (Float) -> K, valueTransform: (Float) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> DoubleArray.groupByTo(destination: M, keySelector: (Double) -> K, valueTransform: (Double) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> BooleanArray.groupByTo(destination: M, keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> CharArray.groupByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from an array to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Array<out T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <T, R> Array<out T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> ByteArray.map(transform: (Byte) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> ShortArray.map(transform: (Short) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> IntArray.map(transform: (Int) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> LongArray.map(transform: (Long) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> FloatArray.map(transform: (Float) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> DoubleArray.map(transform: (Double) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> BooleanArray.map(transform: (Boolean) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> CharArray.map(transform: (Char) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Array<out T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> ByteArray.mapIndexed(transform: (index: Int, Byte) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> ShortArray.mapIndexed(transform: (index: Int, Short) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> IntArray.mapIndexed(transform: (index: Int, Int) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> LongArray.mapIndexed(transform: (index: Int, Long) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> FloatArray.mapIndexed(transform: (index: Int, Float) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> DoubleArray.mapIndexed(transform: (index: Int, Double) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> BooleanArray.mapIndexed(transform: (index: Int, Boolean) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> CharArray.mapIndexed(transform: (index: Int, Char) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Array<out T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.mapIndexedTo(destination: C, transform: (index: Int, Byte) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.mapIndexedTo(destination: C, transform: (index: Int, Short) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.mapIndexedTo(destination: C, transform: (index: Int, Int) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.mapIndexedTo(destination: C, transform: (index: Int, Long) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.mapIndexedTo(destination: C, transform: (index: Int, Float) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.mapIndexedTo(destination: C, transform: (index: Int, Double) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.mapIndexedTo(destination: C, transform: (index: Int, Boolean) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.mapIndexedTo(destination: C, transform: (index: Int, Char) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <T, R : Any> Array<out T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original array\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.mapTo(destination: C, transform: (Byte) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.mapTo(destination: C, transform: (Short) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.mapTo(destination: C, transform: (Int) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.mapTo(destination: C, transform: (Long) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.mapTo(destination: C, transform: (Float) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.mapTo(destination: C, transform: (Double) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.mapTo(destination: C, transform: (Boolean) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.mapTo(destination: C, transform: (Char) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun <T> Array<out T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun ByteArray.withIndex(): Iterable<IndexedValue<Byte>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun ShortArray.withIndex(): Iterable<IndexedValue<Short>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun IntArray.withIndex(): Iterable<IndexedValue<Int>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun LongArray.withIndex(): Iterable<IndexedValue<Long>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun FloatArray.withIndex(): Iterable<IndexedValue<Float>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun DoubleArray.withIndex(): Iterable<IndexedValue<Double>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun BooleanArray.withIndex(): Iterable<IndexedValue<Boolean>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun CharArray.withIndex(): Iterable<IndexedValue<Char>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun <T> Array<out T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun ByteArray.distinct(): List<Byte> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun ShortArray.distinct(): List<Short> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun IntArray.distinct(): List<Int> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun LongArray.distinct(): List<Long> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun FloatArray.distinct(): List<Float> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun DoubleArray.distinct(): List<Double> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun BooleanArray.distinct(): List<Boolean> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun CharArray.distinct(): List<Char> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <T, K> Array<out T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> ByteArray.distinctBy(selector: (Byte) -> K): List<Byte> {\n    val set = HashSet<K>()\n    val list = ArrayList<Byte>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> ShortArray.distinctBy(selector: (Short) -> K): List<Short> {\n    val set = HashSet<K>()\n    val list = ArrayList<Short>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> IntArray.distinctBy(selector: (Int) -> K): List<Int> {\n    val set = HashSet<K>()\n    val list = ArrayList<Int>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> LongArray.distinctBy(selector: (Long) -> K): List<Long> {\n    val set = HashSet<K>()\n    val list = ArrayList<Long>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> FloatArray.distinctBy(selector: (Float) -> K): List<Float> {\n    val set = HashSet<K>()\n    val list = ArrayList<Float>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> DoubleArray.distinctBy(selector: (Double) -> K): List<Double> {\n    val set = HashSet<K>()\n    val list = ArrayList<Double>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> BooleanArray.distinctBy(selector: (Boolean) -> K): List<Boolean> {\n    val set = HashSet<K>()\n    val list = ArrayList<Boolean>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> CharArray.distinctBy(selector: (Char) -> K): List<Char> {\n    val set = HashSet<K>()\n    val list = ArrayList<Char>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun <T> Array<out T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun ByteArray.intersect(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun ShortArray.intersect(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun IntArray.intersect(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun LongArray.intersect(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun FloatArray.intersect(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun DoubleArray.intersect(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun BooleanArray.intersect(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun CharArray.intersect(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun <T> Array<out T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ByteArray.subtract(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ShortArray.subtract(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun IntArray.subtract(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun LongArray.subtract(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun FloatArray.subtract(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun DoubleArray.subtract(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun BooleanArray.subtract(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun CharArray.subtract(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun <T> Array<out T>.toMutableSet(): MutableSet<T> {\n    val set = LinkedHashSet<T>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ByteArray.toMutableSet(): MutableSet<Byte> {\n    val set = LinkedHashSet<Byte>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ShortArray.toMutableSet(): MutableSet<Short> {\n    val set = LinkedHashSet<Short>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun IntArray.toMutableSet(): MutableSet<Int> {\n    val set = LinkedHashSet<Int>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun LongArray.toMutableSet(): MutableSet<Long> {\n    val set = LinkedHashSet<Long>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun FloatArray.toMutableSet(): MutableSet<Float> {\n    val set = LinkedHashSet<Float>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun DoubleArray.toMutableSet(): MutableSet<Double> {\n    val set = LinkedHashSet<Double>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun BooleanArray.toMutableSet(): MutableSet<Boolean> {\n    val set = LinkedHashSet<Boolean>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun CharArray.toMutableSet(): MutableSet<Char> {\n    val set = LinkedHashSet<Char>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun <T> Array<out T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun ByteArray.union(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun ShortArray.union(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun IntArray.union(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun LongArray.union(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun FloatArray.union(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun DoubleArray.union(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun BooleanArray.union(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun CharArray.union(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Array<out T>.all(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun ByteArray.all(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun ShortArray.all(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun IntArray.all(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun LongArray.all(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun FloatArray.all(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun DoubleArray.all(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun BooleanArray.all(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun CharArray.all(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Array<out T>.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun ByteArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun ShortArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun IntArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun LongArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun FloatArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun DoubleArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun BooleanArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun CharArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Array<out T>.any(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun ByteArray.any(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun ShortArray.any(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun IntArray.any(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun LongArray.any(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun FloatArray.any(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun DoubleArray.any(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun BooleanArray.any(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun CharArray.any(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Array<out T>.count(predicate: (T) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun ByteArray.count(predicate: (Byte) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun ShortArray.count(predicate: (Short) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun IntArray.count(predicate: (Int) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun LongArray.count(predicate: (Long) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun FloatArray.count(predicate: (Float) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun DoubleArray.count(predicate: (Double) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun BooleanArray.count(predicate: (Boolean) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun CharArray.count(predicate: (Char) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <T, R> Array<out T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> ByteArray.fold(initial: R, operation: (acc: R, Byte) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> ShortArray.fold(initial: R, operation: (acc: R, Short) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> IntArray.fold(initial: R, operation: (acc: R, Int) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> LongArray.fold(initial: R, operation: (acc: R, Long) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> FloatArray.fold(initial: R, operation: (acc: R, Float) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> DoubleArray.fold(initial: R, operation: (acc: R, Double) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> BooleanArray.fold(initial: R, operation: (acc: R, Boolean) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> CharArray.fold(initial: R, operation: (acc: R, Char) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Byte) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Short) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Int) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Long) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Float) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Double) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Boolean) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> ByteArray.foldRight(initial: R, operation: (Byte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> ShortArray.foldRight(initial: R, operation: (Short, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> IntArray.foldRight(initial: R, operation: (Int, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> LongArray.foldRight(initial: R, operation: (Long, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> FloatArray.foldRight(initial: R, operation: (Float, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> DoubleArray.foldRight(initial: R, operation: (Double, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> BooleanArray.foldRight(initial: R, operation: (Boolean, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> CharArray.foldRight(initial: R, operation: (Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldRightIndexed(initial: R, operation: (index: Int, Byte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldRightIndexed(initial: R, operation: (index: Int, Short, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldRightIndexed(initial: R, operation: (index: Int, Int, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldRightIndexed(initial: R, operation: (index: Int, Long, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldRightIndexed(initial: R, operation: (index: Int, Float, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldRightIndexed(initial: R, operation: (index: Int, Double, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldRightIndexed(initial: R, operation: (index: Int, Boolean, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldRightIndexed(initial: R, operation: (index: Int, Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun <T> Array<out T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun ByteArray.forEach(action: (Byte) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun ShortArray.forEach(action: (Short) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun IntArray.forEach(action: (Int) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun LongArray.forEach(action: (Long) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun FloatArray.forEach(action: (Float) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun DoubleArray.forEach(action: (Double) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun BooleanArray.forEach(action: (Boolean) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun CharArray.forEach(action: (Char) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun <T> Array<out T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun ByteArray.forEachIndexed(action: (index: Int, Byte) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun ShortArray.forEachIndexed(action: (index: Int, Short) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun IntArray.forEachIndexed(action: (index: Int, Int) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun LongArray.forEachIndexed(action: (index: Int, Long) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun FloatArray.forEachIndexed(action: (index: Int, Float) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun DoubleArray.forEachIndexed(action: (index: Int, Double) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun BooleanArray.forEachIndexed(action: (index: Int, Boolean) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun CharArray.forEachIndexed(action: (index: Int, Char) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Double>.max(): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Float>.max(): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Array<out T>.max(): T? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun ByteArray.max(): Byte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun ShortArray.max(): Short? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun IntArray.max(): Int? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun LongArray.max(): Long? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun FloatArray.max(): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun DoubleArray.max(): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun CharArray.max(): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.maxBy(selector: (T) -> R): T? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> ByteArray.maxBy(selector: (Byte) -> R): Byte? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> ShortArray.maxBy(selector: (Short) -> R): Short? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> IntArray.maxBy(selector: (Int) -> R): Int? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> LongArray.maxBy(selector: (Long) -> R): Long? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> FloatArray.maxBy(selector: (Float) -> R): Float? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> DoubleArray.maxBy(selector: (Double) -> R): Double? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> BooleanArray.maxBy(selector: (Boolean) -> R): Boolean? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> CharArray.maxBy(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Array<out T>.maxWith(comparator: Comparator<in T>): T? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ByteArray.maxWith(comparator: Comparator<in Byte>): Byte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ShortArray.maxWith(comparator: Comparator<in Short>): Short? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun IntArray.maxWith(comparator: Comparator<in Int>): Int? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun LongArray.maxWith(comparator: Comparator<in Long>): Long? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun FloatArray.maxWith(comparator: Comparator<in Float>): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun DoubleArray.maxWith(comparator: Comparator<in Double>): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun BooleanArray.maxWith(comparator: Comparator<in Boolean>): Boolean? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun CharArray.maxWith(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Double>.min(): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Float>.min(): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Array<out T>.min(): T? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun ByteArray.min(): Byte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun ShortArray.min(): Short? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun IntArray.min(): Int? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun LongArray.min(): Long? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun FloatArray.min(): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun DoubleArray.min(): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun CharArray.min(): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.minBy(selector: (T) -> R): T? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> ByteArray.minBy(selector: (Byte) -> R): Byte? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> ShortArray.minBy(selector: (Short) -> R): Short? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> IntArray.minBy(selector: (Int) -> R): Int? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> LongArray.minBy(selector: (Long) -> R): Long? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> FloatArray.minBy(selector: (Float) -> R): Float? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> DoubleArray.minBy(selector: (Double) -> R): Double? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> BooleanArray.minBy(selector: (Boolean) -> R): Boolean? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> CharArray.minBy(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Array<out T>.minWith(comparator: Comparator<in T>): T? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ByteArray.minWith(comparator: Comparator<in Byte>): Byte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ShortArray.minWith(comparator: Comparator<in Short>): Short? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun IntArray.minWith(comparator: Comparator<in Int>): Int? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun LongArray.minWith(comparator: Comparator<in Long>): Long? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun FloatArray.minWith(comparator: Comparator<in Float>): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun DoubleArray.minWith(comparator: Comparator<in Double>): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun BooleanArray.minWith(comparator: Comparator<in Boolean>): Boolean? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun CharArray.minWith(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Array<out T>.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun ByteArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun ShortArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun IntArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun LongArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun FloatArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun DoubleArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun BooleanArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun CharArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Array<out T>.none(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun ByteArray.none(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun ShortArray.none(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun IntArray.none(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun LongArray.none(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun FloatArray.none(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun DoubleArray.none(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun BooleanArray.none(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun CharArray.none(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Array<out T>.reduce(operation: (acc: S, T) -> S): S {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ByteArray.reduce(operation: (acc: Byte, Byte) -> Byte): Byte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ShortArray.reduce(operation: (acc: Short, Short) -> Short): Short {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun IntArray.reduce(operation: (acc: Int, Int) -> Int): Int {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun LongArray.reduce(operation: (acc: Long, Long) -> Long): Long {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun FloatArray.reduce(operation: (acc: Float, Float) -> Float): Float {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun DoubleArray.reduce(operation: (acc: Double, Double) -> Double): Double {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun BooleanArray.reduce(operation: (acc: Boolean, Boolean) -> Boolean): Boolean {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun CharArray.reduce(operation: (acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Array<out T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ByteArray.reduceIndexed(operation: (index: Int, acc: Byte, Byte) -> Byte): Byte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ShortArray.reduceIndexed(operation: (index: Int, acc: Short, Short) -> Short): Short {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun IntArray.reduceIndexed(operation: (index: Int, acc: Int, Int) -> Int): Int {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun LongArray.reduceIndexed(operation: (index: Int, acc: Long, Long) -> Long): Long {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun FloatArray.reduceIndexed(operation: (index: Int, acc: Float, Float) -> Float): Float {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun DoubleArray.reduceIndexed(operation: (index: Int, acc: Double, Double) -> Double): Double {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun BooleanArray.reduceIndexed(operation: (index: Int, acc: Boolean, Boolean) -> Boolean): Boolean {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun CharArray.reduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Array<out T>.reduceOrNull(operation: (acc: S, T) -> S): S? {\n    if (isEmpty())\n        return null\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun ByteArray.reduceOrNull(operation: (acc: Byte, Byte) -> Byte): Byte? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun ShortArray.reduceOrNull(operation: (acc: Short, Short) -> Short): Short? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun IntArray.reduceOrNull(operation: (acc: Int, Int) -> Int): Int? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun LongArray.reduceOrNull(operation: (acc: Long, Long) -> Long): Long? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun FloatArray.reduceOrNull(operation: (acc: Float, Float) -> Float): Float? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun DoubleArray.reduceOrNull(operation: (acc: Double, Double) -> Double): Double? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun BooleanArray.reduceOrNull(operation: (acc: Boolean, Boolean) -> Boolean): Boolean? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun CharArray.reduceOrNull(operation: (acc: Char, Char) -> Char): Char? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> Array<out T>.reduceRight(operation: (T, acc: S) -> S): S {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ByteArray.reduceRight(operation: (Byte, acc: Byte) -> Byte): Byte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ShortArray.reduceRight(operation: (Short, acc: Short) -> Short): Short {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun IntArray.reduceRight(operation: (Int, acc: Int) -> Int): Int {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun LongArray.reduceRight(operation: (Long, acc: Long) -> Long): Long {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun FloatArray.reduceRight(operation: (Float, acc: Float) -> Float): Float {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun DoubleArray.reduceRight(operation: (Double, acc: Double) -> Double): Double {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun BooleanArray.reduceRight(operation: (Boolean, acc: Boolean) -> Boolean): Boolean {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun CharArray.reduceRight(operation: (Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> Array<out T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ByteArray.reduceRightIndexed(operation: (index: Int, Byte, acc: Byte) -> Byte): Byte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ShortArray.reduceRightIndexed(operation: (index: Int, Short, acc: Short) -> Short): Short {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun IntArray.reduceRightIndexed(operation: (index: Int, Int, acc: Int) -> Int): Int {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun LongArray.reduceRightIndexed(operation: (index: Int, Long, acc: Long) -> Long): Long {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun FloatArray.reduceRightIndexed(operation: (index: Int, Float, acc: Float) -> Float): Float {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun DoubleArray.reduceRightIndexed(operation: (index: Int, Double, acc: Double) -> Double): Double {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun BooleanArray.reduceRightIndexed(operation: (index: Int, Boolean, acc: Boolean) -> Boolean): Boolean {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun CharArray.reduceRightIndexed(operation: (index: Int, Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Array<out T>.reduceRightOrNull(operation: (T, acc: S) -> S): S? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun ByteArray.reduceRightOrNull(operation: (Byte, acc: Byte) -> Byte): Byte? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun ShortArray.reduceRightOrNull(operation: (Short, acc: Short) -> Short): Short? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun IntArray.reduceRightOrNull(operation: (Int, acc: Int) -> Int): Int? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun LongArray.reduceRightOrNull(operation: (Long, acc: Long) -> Long): Long? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun FloatArray.reduceRightOrNull(operation: (Float, acc: Float) -> Float): Float? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun DoubleArray.reduceRightOrNull(operation: (Double, acc: Double) -> Double): Double? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun BooleanArray.reduceRightOrNull(operation: (Boolean, acc: Boolean) -> Boolean): Boolean? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun CharArray.reduceRightOrNull(operation: (Char, acc: Char) -> Char): Char? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <T, R> Array<out T>.scan(initial: R, operation: (acc: R, T) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.scan(initial: R, operation: (acc: R, Byte) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.scan(initial: R, operation: (acc: R, Short) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.scan(initial: R, operation: (acc: R, Int) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.scan(initial: R, operation: (acc: R, Long) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.scan(initial: R, operation: (acc: R, Float) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.scan(initial: R, operation: (acc: R, Double) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.scan(initial: R, operation: (acc: R, Boolean) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.scan(initial: R, operation: (acc: R, Char) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <T, R> Array<out T>.scanIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Byte) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Short) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Int) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Long) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Float) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Double) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Boolean) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and the element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Array<out T>.scanReduce(operation: (acc: S, T) -> S): List<S> {\n    if (isEmpty()) return emptyList()\n    var accumulator: S = this[0]\n    val result = ArrayList<S>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.scanReduce(operation: (acc: Byte, Byte) -> Byte): List<Byte> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Byte>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.scanReduce(operation: (acc: Short, Short) -> Short): List<Short> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Short>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.scanReduce(operation: (acc: Int, Int) -> Int): List<Int> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Int>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.scanReduce(operation: (acc: Long, Long) -> Long): List<Long> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Long>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.scanReduce(operation: (acc: Float, Float) -> Float): List<Float> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Float>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.scanReduce(operation: (acc: Double, Double) -> Double): List<Double> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Double>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.scanReduce(operation: (acc: Boolean, Boolean) -> Boolean): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Boolean>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.scanReduce(operation: (acc: Char, Char) -> Char): List<Char> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Char>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Array<out T>.scanReduceIndexed(operation: (index: Int, acc: S, T) -> S): List<S> {\n    if (isEmpty()) return emptyList()\n    var accumulator: S = this[0]\n    val result = ArrayList<S>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.scanReduceIndexed(operation: (index: Int, acc: Byte, Byte) -> Byte): List<Byte> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Byte>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.scanReduceIndexed(operation: (index: Int, acc: Short, Short) -> Short): List<Short> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Short>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.scanReduceIndexed(operation: (index: Int, acc: Int, Int) -> Int): List<Int> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Int>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.scanReduceIndexed(operation: (index: Int, acc: Long, Long) -> Long): List<Long> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Long>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.scanReduceIndexed(operation: (index: Int, acc: Float, Float) -> Float): List<Float> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Float>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.scanReduceIndexed(operation: (index: Int, acc: Double, Double) -> Double): List<Double> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Double>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.scanReduceIndexed(operation: (index: Int, acc: Boolean, Boolean) -> Boolean): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Boolean>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.scanReduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): List<Char> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Char>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun <T> Array<out T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ByteArray.sumBy(selector: (Byte) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ShortArray.sumBy(selector: (Short) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun IntArray.sumBy(selector: (Int) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun LongArray.sumBy(selector: (Long) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun FloatArray.sumBy(selector: (Float) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun DoubleArray.sumBy(selector: (Double) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun BooleanArray.sumBy(selector: (Boolean) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun CharArray.sumBy(selector: (Char) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun <T> Array<out T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ByteArray.sumByDouble(selector: (Byte) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ShortArray.sumByDouble(selector: (Short) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun IntArray.sumByDouble(selector: (Int) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun LongArray.sumByDouble(selector: (Long) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun FloatArray.sumByDouble(selector: (Float) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun DoubleArray.sumByDouble(selector: (Double) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun BooleanArray.sumByDouble(selector: (Boolean) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun CharArray.sumByDouble(selector: (Char) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Array<T?>.requireNoNulls(): Array<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Array<T>\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun <T> Array<out T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun ByteArray.partition(predicate: (Byte) -> Boolean): Pair<List<Byte>, List<Byte>> {\n    val first = ArrayList<Byte>()\n    val second = ArrayList<Byte>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun ShortArray.partition(predicate: (Short) -> Boolean): Pair<List<Short>, List<Short>> {\n    val first = ArrayList<Short>()\n    val second = ArrayList<Short>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun IntArray.partition(predicate: (Int) -> Boolean): Pair<List<Int>, List<Int>> {\n    val first = ArrayList<Int>()\n    val second = ArrayList<Int>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun LongArray.partition(predicate: (Long) -> Boolean): Pair<List<Long>, List<Long>> {\n    val first = ArrayList<Long>()\n    val second = ArrayList<Long>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun FloatArray.partition(predicate: (Float) -> Boolean): Pair<List<Float>, List<Float>> {\n    val first = ArrayList<Float>()\n    val second = ArrayList<Float>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun DoubleArray.partition(predicate: (Double) -> Boolean): Pair<List<Double>, List<Double>> {\n    val first = ArrayList<Double>()\n    val second = ArrayList<Double>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun BooleanArray.partition(predicate: (Boolean) -> Boolean): Pair<List<Boolean>, List<Boolean>> {\n    val first = ArrayList<Boolean>()\n    val second = ArrayList<Boolean>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun CharArray.partition(predicate: (Char) -> Boolean): Pair<List<Char>, List<Char>> {\n    val first = ArrayList<Char>()\n    val second = ArrayList<Char>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Array<out T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ByteArray.zip(other: Array<out R>): List<Pair<Byte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ShortArray.zip(other: Array<out R>): List<Pair<Short, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> IntArray.zip(other: Array<out R>): List<Pair<Int, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> LongArray.zip(other: Array<out R>): List<Pair<Long, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> FloatArray.zip(other: Array<out R>): List<Pair<Float, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> DoubleArray.zip(other: Array<out R>): List<Pair<Double, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> BooleanArray.zip(other: Array<out R>): List<Pair<Boolean, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> CharArray.zip(other: Array<out R>): List<Pair<Char, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Array<out T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ByteArray.zip(other: Array<out R>, transform: (a: Byte, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ShortArray.zip(other: Array<out R>, transform: (a: Short, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> IntArray.zip(other: Array<out R>, transform: (a: Int, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> LongArray.zip(other: Array<out R>, transform: (a: Long, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> FloatArray.zip(other: Array<out R>, transform: (a: Float, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> DoubleArray.zip(other: Array<out R>, transform: (a: Double, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> BooleanArray.zip(other: Array<out R>, transform: (a: Boolean, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> CharArray.zip(other: Array<out R>, transform: (a: Char, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Array<out T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ByteArray.zip(other: Iterable<R>): List<Pair<Byte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ShortArray.zip(other: Iterable<R>): List<Pair<Short, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> IntArray.zip(other: Iterable<R>): List<Pair<Int, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> LongArray.zip(other: Iterable<R>): List<Pair<Long, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> FloatArray.zip(other: Iterable<R>): List<Pair<Float, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> DoubleArray.zip(other: Iterable<R>): List<Pair<Double, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> BooleanArray.zip(other: Iterable<R>): List<Pair<Boolean, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> CharArray.zip(other: Iterable<R>): List<Pair<Char, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Array<out T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ByteArray.zip(other: Iterable<R>, transform: (a: Byte, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ShortArray.zip(other: Iterable<R>, transform: (a: Short, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> IntArray.zip(other: Iterable<R>, transform: (a: Int, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> LongArray.zip(other: Iterable<R>, transform: (a: Long, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> FloatArray.zip(other: Iterable<R>, transform: (a: Float, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> DoubleArray.zip(other: Iterable<R>, transform: (a: Double, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> BooleanArray.zip(other: Iterable<R>, transform: (a: Boolean, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> CharArray.zip(other: Iterable<R>, transform: (a: Char, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun ByteArray.zip(other: ByteArray): List<Pair<Byte, Byte>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun ShortArray.zip(other: ShortArray): List<Pair<Short, Short>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun IntArray.zip(other: IntArray): List<Pair<Int, Int>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun LongArray.zip(other: LongArray): List<Pair<Long, Long>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun FloatArray.zip(other: FloatArray): List<Pair<Float, Float>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun DoubleArray.zip(other: DoubleArray): List<Pair<Double, Double>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun BooleanArray.zip(other: BooleanArray): List<Pair<Boolean, Boolean>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun CharArray.zip(other: CharArray): List<Pair<Char, Char>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> ByteArray.zip(other: ByteArray, transform: (a: Byte, b: Byte) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> ShortArray.zip(other: ShortArray, transform: (a: Short, b: Short) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> IntArray.zip(other: IntArray, transform: (a: Int, b: Int) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> LongArray.zip(other: LongArray, transform: (a: Long, b: Long) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> FloatArray.zip(other: FloatArray, transform: (a: Float, b: Float) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> DoubleArray.zip(other: DoubleArray, transform: (a: Double, b: Double) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> BooleanArray.zip(other: BooleanArray, transform: (a: Boolean, b: Boolean) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> CharArray.zip(other: CharArray, transform: (a: Char, b: Char) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Array<out T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> ByteArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Byte) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> ShortArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Short) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> IntArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Int) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> LongArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Long) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> FloatArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Float) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> DoubleArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Double) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> BooleanArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Boolean) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> CharArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Char) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Array<out T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun ByteArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Byte) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun ShortArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Short) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun IntArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Int) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun LongArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Long) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun FloatArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Float) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun DoubleArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Double) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun BooleanArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Boolean) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun CharArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Char) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun <T> Array<out T>.asIterable(): Iterable<T> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun ByteArray.asIterable(): Iterable<Byte> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun ShortArray.asIterable(): Iterable<Short> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun IntArray.asIterable(): Iterable<Int> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun LongArray.asIterable(): Iterable<Long> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun FloatArray.asIterable(): Iterable<Float> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun DoubleArray.asIterable(): Iterable<Double> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun BooleanArray.asIterable(): Iterable<Boolean> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun CharArray.asIterable(): Iterable<Char> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun <T> Array<out T>.asSequence(): Sequence<T> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun ByteArray.asSequence(): Sequence<Byte> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun ShortArray.asSequence(): Sequence<Short> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun IntArray.asSequence(): Sequence<Int> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun LongArray.asSequence(): Sequence<Long> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun FloatArray.asSequence(): Sequence<Float> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun DoubleArray.asSequence(): Sequence<Double> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun BooleanArray.asSequence(): Sequence<Boolean> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun CharArray.asSequence(): Sequence<Char> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Array<out Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Array<out Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Array<out Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Array<out Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Array<out Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Array<out Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun ByteArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun ShortArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun IntArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun LongArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun FloatArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun DoubleArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Array<out Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Array<out Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Array<out Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Array<out Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Array<out Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Array<out Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun ByteArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun ShortArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun IntArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun LongArray.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun FloatArray.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun DoubleArray.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n",null,null,null,null,null,null,null,null,null,null,null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\nimport kotlin.js.RegExp\n\n/**\n * Converts the characters in the specified array to a string.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun String(chars: CharArray): String {\n    var result = \"\"\n    for (char in chars) {\n        result += char\n    }\n    return result\n}\n\n/**\n * Converts the characters from a portion of the specified array to a string.\n *\n * @throws IndexOutOfBoundsException if either [offset] or [length] are less than zero\n * or `offset + length` is out of [chars] array bounds.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun String(chars: CharArray, offset: Int, length: Int): String {\n    if (offset < 0 || length < 0 || chars.size - offset < length)\n        throw IndexOutOfBoundsException(\"size: ${chars.size}; offset: $offset; length: $length\")\n    var result = \"\"\n    for (index in offset until offset + length) {\n        result += chars[index]\n    }\n    return result\n}\n\n/**\n * Concatenates characters in this [CharArray] into a String.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun CharArray.concatToString(): String {\n    var result = \"\"\n    for (char in this) {\n        result += char\n    }\n    return result\n}\n\n/**\n * Concatenates characters in this [CharArray] or its subrange into a String.\n *\n * @param startIndex the beginning (inclusive) of the subrange of characters, 0 by default.\n * @param endIndex the end (exclusive) of the subrange of characters, size of this array by default.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n@ExperimentalStdlibApi\npublic actual fun CharArray.concatToString(startIndex: Int = 0, endIndex: Int = this.size): String {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, this.size)\n    var result = \"\"\n    for (index in startIndex until endIndex) {\n        result += this[index]\n    }\n    return result\n}\n\n/**\n * Returns a [CharArray] containing characters of this string.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun String.toCharArray(): CharArray {\n    return CharArray(length) { get(it) }\n}\n\n/**\n * Returns a [CharArray] containing characters of this string or its substring.\n *\n * @param startIndex the beginning (inclusive) of the substring, 0 by default.\n * @param endIndex the end (exclusive) of the substring, length of this string by default.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the length of this string.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n@ExperimentalStdlibApi\npublic actual fun String.toCharArray(startIndex: Int = 0, endIndex: Int = this.length): CharArray {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, length)\n    return CharArray(endIndex - startIndex) { get(startIndex + it) }\n}\n\n/**\n * Decodes a string from the bytes in UTF-8 encoding in this array.\n *\n * Malformed byte sequences are replaced by the replacement char `\\uFFFD`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun ByteArray.decodeToString(): String {\n    return decodeUtf8(this, 0, size, false)\n}\n\n/**\n * Decodes a string from the bytes in UTF-8 encoding in this array or its subrange.\n *\n * @param startIndex the beginning (inclusive) of the subrange to decode, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to decode, size of this array by default.\n * @param throwOnInvalidSequence specifies whether to throw an exception on malformed byte sequence or replace it by the replacement char `\\uFFFD`.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n * @throws CharacterCodingException if the byte array contains malformed UTF-8 byte sequence and [throwOnInvalidSequence] is true.\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n@ExperimentalStdlibApi\npublic actual fun ByteArray.decodeToString(\n    startIndex: Int = 0,\n    endIndex: Int = this.size,\n    throwOnInvalidSequence: Boolean = false\n): String {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, this.size)\n    return decodeUtf8(this, startIndex, endIndex, throwOnInvalidSequence)\n}\n\n/**\n * Encodes this string to an array of bytes in UTF-8 encoding.\n *\n * Any malformed char sequence is replaced by the replacement byte sequence.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun String.encodeToByteArray(): ByteArray {\n    return encodeUtf8(this, 0, length, false)\n}\n\n/**\n * Encodes this string or its substring to an array of bytes in UTF-8 encoding.\n *\n * @param startIndex the beginning (inclusive) of the substring to encode, 0 by default.\n * @param endIndex the end (exclusive) of the substring to encode, length of this string by default.\n * @param throwOnInvalidSequence specifies whether to throw an exception on malformed char sequence or replace.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the length of this string.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n * @throws CharacterCodingException if this string contains malformed char sequence and [throwOnInvalidSequence] is true.\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n@ExperimentalStdlibApi\npublic actual fun String.encodeToByteArray(\n    startIndex: Int = 0,\n    endIndex: Int = this.length,\n    throwOnInvalidSequence: Boolean = false\n): ByteArray {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, length)\n    return encodeUtf8(this, startIndex, endIndex, throwOnInvalidSequence)\n}\n\n/**\n * Returns a copy of this string converted to upper case using the rules of the default locale.\n *\n * @sample samples.text.Strings.toUpperCase\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toUpperCase(): String = asDynamic().toUpperCase()\n\n/**\n * Returns a copy of this string converted to lower case using the rules of the default locale.\n *\n * @sample samples.text.Strings.toLowerCase\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toLowerCase(): String = asDynamic().toLowerCase()\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeIndexOf(str: String, fromIndex: Int): Int = asDynamic().indexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeLastIndexOf(str: String, fromIndex: Int): Int = asDynamic().lastIndexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeStartsWith(s: String, position: Int): Boolean = asDynamic().startsWith(s, position)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeEndsWith(s: String): Boolean = asDynamic().endsWith(s)\n\n@kotlin.internal.InlineOnly\npublic actual inline fun String.substring(startIndex: Int): String = asDynamic().substring(startIndex)\n\n@kotlin.internal.InlineOnly\npublic actual inline fun String.substring(startIndex: Int, endIndex: Int): String = asDynamic().substring(startIndex, endIndex)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.concat(str: String): String = asDynamic().concat(str)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.match(regex: String): Array<String>? = asDynamic().match(regex)\n\n//native public fun String.trim(): String\n//TODO: String.replace to implement effective trimLeading and trimTrailing\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeReplace(pattern: RegExp, replacement: String): String = asDynamic().replace(pattern, replacement)\n\n@SinceKotlin(\"1.2\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.compareTo(other: String, ignoreCase: Boolean = false): Int {\n    if (ignoreCase) {\n        val n1 = this.length\n        val n2 = other.length\n        val min = minOf(n1, n2)\n        if (min == 0) return n1 - n2\n        var start = 0\n        while (true) {\n            val end = minOf(start + 16, min)\n            var s1 = this.substring(start, end)\n            var s2 = other.substring(start, end)\n            if (s1 != s2) {\n                s1 = s1.toUpperCase()\n                s2 = s2.toUpperCase()\n                if (s1 != s2) {\n                    s1 = s1.toLowerCase()\n                    s2 = s2.toLowerCase()\n                    if (s1 != s2) {\n                        return s1.compareTo(s2)\n                    }\n                }\n            }\n            if (end == min) break\n            start = end\n        }\n        return n1 - n2\n    } else {\n        return compareTo(other)\n    }\n}\n\n\nprivate val STRING_CASE_INSENSITIVE_ORDER = Comparator<String> { a, b -> a.compareTo(b, ignoreCase = true) }\n\n@SinceKotlin(\"1.2\")\npublic actual val String.Companion.CASE_INSENSITIVE_ORDER: Comparator<String>\n    get() = STRING_CASE_INSENSITIVE_ORDER\n",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:Suppress(\"UNUSED_PARAMETER\", \"NOTHING_TO_INLINE\")\n\npackage kotlin\n\n/**\n * Returns an empty array of the specified type [T].\n */\npublic inline fun <T> emptyArray(): Array<T> = js(\"[]\")\n\n@library\npublic fun <T> arrayOf(vararg elements: T): Array<T> = definedExternally\n\n@library\npublic fun doubleArrayOf(vararg elements: Double): DoubleArray = definedExternally\n\n@library\npublic fun floatArrayOf(vararg elements: Float): FloatArray = definedExternally\n\n@library\npublic fun longArrayOf(vararg elements: Long): LongArray = definedExternally\n\n@library\npublic fun intArrayOf(vararg elements: Int): IntArray = definedExternally\n\n@library\npublic fun charArrayOf(vararg elements: Char): CharArray = definedExternally\n\n@library\npublic fun shortArrayOf(vararg elements: Short): ShortArray = definedExternally\n\n@library\npublic fun byteArrayOf(vararg elements: Byte): ByteArray = definedExternally\n\n@library\npublic fun booleanArrayOf(vararg elements: Boolean): BooleanArray = definedExternally\n\n/**\n * Creates a new instance of the [Lazy] that uses the specified initialization function [initializer].\n */\npublic actual fun <T> lazy(initializer: () -> T): Lazy<T> = UnsafeLazyImpl(initializer)\n\n/**\n * Creates a new instance of the [Lazy] that uses the specified initialization function [initializer].\n *\n * The [mode] parameter is ignored. */\npublic actual fun <T> lazy(mode: LazyThreadSafetyMode, initializer: () -> T): Lazy<T> = UnsafeLazyImpl(initializer)\n\n/**\n * Creates a new instance of the [Lazy] that uses the specified initialization function [initializer].\n *\n * The [lock] parameter is ignored.\n */\npublic actual fun <T> lazy(lock: Any?, initializer: () -> T): Lazy<T> = UnsafeLazyImpl(initializer)\n\n\ninternal fun fillFrom(src: dynamic, dst: dynamic): dynamic {\n    val srcLen: Int = src.length\n    val dstLen: Int = dst.length\n    var index: Int = 0\n    while (index < srcLen && index < dstLen) dst[index] = src[index++]\n    return dst\n}\n\n\ninternal fun arrayCopyResize(source: dynamic, newSize: Int, defaultValue: Any?): dynamic {\n    val result = source.slice(0, newSize)\n    copyArrayType(source, result)\n    var index: Int = source.length\n    if (newSize > index) {\n        result.length = newSize\n        while (index < newSize) result[index++] = defaultValue\n    }\n    return result\n}\n\ninternal fun <T> arrayPlusCollection(array: dynamic, collection: Collection<T>): dynamic {\n    val result = array.slice()\n    result.length += collection.size\n    copyArrayType(array, result)\n    var index: Int = array.length\n    for (element in collection) result[index++] = element\n    return result\n}\n\ninternal fun <T> fillFromCollection(dst: dynamic, startIndex: Int, collection: Collection<T>): dynamic {\n    var index = startIndex\n    for (element in collection) dst[index++] = element\n    return dst\n}\n\ninternal inline fun copyArrayType(from: dynamic, to: dynamic) {\n    if (from.`$type$` !== undefined) {\n        to.`$type$` = from.`$type$`\n    }\n}\n\ninternal inline fun jsIsType(obj: dynamic, jsClass: dynamic) = js(\"Kotlin\").isType(obj, jsClass)","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n@file:kotlin.jvm.JvmName(\"ComparisonsKt\")\n@file:kotlin.jvm.JvmMultifileClass\n\npackage kotlin.comparisons\n\n/**\n * Compares two values using the specified functions [selectors] to calculate the result of the comparison.\n * The functions are called sequentially, receive the given values [a] and [b] and return [Comparable]\n * objects. As soon as the [Comparable] instances returned by a function for [a] and [b] values do not\n * compare as equal, the result of that comparison is returned.\n *\n * @sample samples.comparisons.Comparisons.compareValuesByWithSelectors\n */\npublic fun <T> compareValuesBy(a: T, b: T, vararg selectors: (T) -> Comparable<*>?): Int {\n    require(selectors.size > 0)\n    return compareValuesByImpl(a, b, selectors)\n}\n\nprivate fun <T> compareValuesByImpl(a: T, b: T, selectors: Array<out (T) -> Comparable<*>?>): Int {\n    for (fn in selectors) {\n        val v1 = fn(a)\n        val v2 = fn(b)\n        val diff = compareValues(v1, v2)\n        if (diff != 0) return diff\n    }\n    return 0\n}\n\n/**\n * Compares two values using the specified [selector] function to calculate the result of the comparison.\n * The function is applied to the given values [a] and [b] and return [Comparable] objects.\n * The result of comparison of these [Comparable] instances is returned.\n *\n * @sample samples.comparisons.Comparisons.compareValuesByWithSingleSelector\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareValuesBy(a: T, b: T, selector: (T) -> Comparable<*>?): Int {\n    return compareValues(selector(a), selector(b))\n}\n\n/**\n * Compares two values using the specified [selector] function to calculate the result of the comparison.\n * The function is applied to the given values [a] and [b] and return objects of type K which are then being\n * compared with the given [comparator].\n *\n * @sample samples.comparisons.Comparisons.compareValuesByWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> compareValuesBy(a: T, b: T, comparator: Comparator<in K>, selector: (T) -> K): Int {\n    return comparator.compare(selector(a), selector(b))\n}\n\n//// Not so useful without type inference for receiver of expression\n//// compareValuesWith(v1, v2, compareBy { it.prop1 } thenByDescending { it.prop2 })\n///**\n// * Compares two values using the specified [comparator].\n// */\n//@Suppress(\"NOTHING_TO_INLINE\")\n//public inline fun <T> compareValuesWith(a: T, b: T, comparator: Comparator<T>): Int = comparator.compare(a, b)\n//\n\n\n/**\n * Compares two nullable [Comparable] values. Null is considered less than any value.\n *\n * @sample samples.comparisons.Comparisons.compareValues\n */\npublic fun <T : Comparable<*>> compareValues(a: T?, b: T?): Int {\n    if (a === b) return 0\n    if (a == null) return -1\n    if (b == null) return 1\n\n    @Suppress(\"UNCHECKED_CAST\")\n    return (a as Comparable<Any>).compareTo(b)\n}\n\n/**\n * Creates a comparator using the sequence of functions to calculate a result of comparison.\n * The functions are called sequentially, receive the given values `a` and `b` and return [Comparable]\n * objects. As soon as the [Comparable] instances returned by a function for `a` and `b` values do not\n * compare as equal, the result of that comparison is returned from the [Comparator].\n *\n * @sample samples.comparisons.Comparisons.compareByWithSelectors\n */\npublic fun <T> compareBy(vararg selectors: (T) -> Comparable<*>?): Comparator<T> {\n    require(selectors.size > 0)\n    return Comparator { a, b -> compareValuesByImpl(a, b, selectors) }\n}\n\n\n/**\n * Creates a comparator using the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.compareByWithSingleSelector\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareBy(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(a, b, selector) }\n\n/**\n * Creates a comparator using the [selector] function to transform values being compared and then applying\n * the specified [comparator] to compare transformed values.\n *\n * @sample samples.comparisons.Comparisons.compareByWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> compareBy(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(a, b, comparator, selector) }\n\n/**\n * Creates a descending comparator using the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.compareByDescendingWithSingleSelector\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareByDescending(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(b, a, selector) }\n\n/**\n * Creates a descending comparator using the [selector] function to transform values being compared and then applying\n * the specified [comparator] to compare transformed values.\n *\n * Note that an order of [comparator] is reversed by this wrapper.\n *\n * @sample samples.comparisons.Comparisons.compareByDescendingWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> compareByDescending(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(b, a, comparator, selector) }\n\n/**\n * Creates a comparator comparing values after the primary comparator defined them equal. It uses\n * the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.thenBy\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Comparator<T>.thenBy(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenBy.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(a, b, selector)\n    }\n\n/**\n * Creates a comparator comparing values after the primary comparator defined them equal. It uses\n * the [selector] function to transform values and then compares them with the given [comparator].\n *\n * @sample samples.comparisons.Comparisons.thenByWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> Comparator<T>.thenBy(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenBy.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(a, b, comparator, selector)\n    }\n\n/**\n * Creates a descending comparator using the primary comparator and\n * the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.thenByDescending\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Comparator<T>.thenByDescending(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenByDescending.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(b, a, selector)\n    }\n\n/**\n * Creates a descending comparator comparing values after the primary comparator defined them equal. It uses\n * the [selector] function to transform values and then compares them with the given [comparator].\n *\n * @sample samples.comparisons.Comparisons.thenByDescendingWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> Comparator<T>.thenByDescending(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenByDescending.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(b, a, comparator, selector)\n    }\n\n\n/**\n * Creates a comparator using the primary comparator and function to calculate a result of comparison.\n *\n * @sample samples.comparisons.Comparisons.thenComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Comparator<T>.thenComparator(crossinline comparison: (a: T, b: T) -> Int): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenComparator.compare(a, b)\n        if (previousCompare != 0) previousCompare else comparison(a, b)\n    }\n\n/**\n * Combines this comparator and the given [comparator] such that the latter is applied only\n * when the former considered values equal.\n *\n * @sample samples.comparisons.Comparisons.then\n */\npublic infix fun <T> Comparator<T>.then(comparator: Comparator<in T>): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@then.compare(a, b)\n        if (previousCompare != 0) previousCompare else comparator.compare(a, b)\n    }\n\n/**\n * Combines this comparator and the given [comparator] such that the latter is applied only\n * when the former considered values equal.\n *\n * @sample samples.comparisons.Comparisons.thenDescending\n */\npublic infix fun <T> Comparator<T>.thenDescending(comparator: Comparator<in T>): Comparator<T> =\n    Comparator<T> { a, b ->\n        val previousCompare = this@thenDescending.compare(a, b)\n        if (previousCompare != 0) previousCompare else comparator.compare(b, a)\n    }\n\n// Not so useful without type inference for receiver of expression\n/**\n * Extends the given [comparator] of non-nullable values to a comparator of nullable values\n * considering `null` value less than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastWithComparator\n */\npublic fun <T : Any> nullsFirst(comparator: Comparator<in T>): Comparator<T?> =\n    Comparator { a, b ->\n        when {\n            a === b -> 0\n            a == null -> -1\n            b == null -> 1\n            else -> comparator.compare(a, b)\n        }\n    }\n\n/**\n * Provides a comparator of nullable [Comparable] values\n * considering `null` value less than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Comparable<T>> nullsFirst(): Comparator<T?> = nullsFirst(naturalOrder())\n\n/**\n * Extends the given [comparator] of non-nullable values to a comparator of nullable values\n * considering `null` value greater than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastWithComparator\n */\npublic fun <T : Any> nullsLast(comparator: Comparator<in T>): Comparator<T?> =\n    Comparator { a, b ->\n        when {\n            a === b -> 0\n            a == null -> 1\n            b == null -> -1\n            else -> comparator.compare(a, b)\n        }\n    }\n\n/**\n * Provides a comparator of nullable [Comparable] values\n * considering `null` value greater than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Comparable<T>> nullsLast(): Comparator<T?> = nullsLast(naturalOrder())\n\n/**\n * Returns a comparator that compares [Comparable] objects in natural order.\n *\n * @sample samples.comparisons.Comparisons.naturalOrderComparator\n */\npublic fun <T : Comparable<T>> naturalOrder(): Comparator<T> = @Suppress(\"UNCHECKED_CAST\") (NaturalOrderComparator as Comparator<T>)\n\n/**\n * Returns a comparator that compares [Comparable] objects in reversed natural order.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastWithComparator\n */\npublic fun <T : Comparable<T>> reverseOrder(): Comparator<T> = @Suppress(\"UNCHECKED_CAST\") (ReverseOrderComparator as Comparator<T>)\n\n/**\n *  Returns a comparator that imposes the reverse ordering of this comparator.\n *\n *  @sample samples.comparisons.Comparisons.reversed\n */\npublic fun <T> Comparator<T>.reversed(): Comparator<T> = when (this) {\n    is ReversedComparator -> this.comparator\n    NaturalOrderComparator -> @Suppress(\"UNCHECKED_CAST\") (ReverseOrderComparator as Comparator<T>)\n    ReverseOrderComparator -> @Suppress(\"UNCHECKED_CAST\") (NaturalOrderComparator as Comparator<T>)\n    else -> ReversedComparator(this)\n}\n\n\nprivate class ReversedComparator<T>(public val comparator: Comparator<T>) : Comparator<T> {\n    override fun compare(a: T, b: T): Int = comparator.compare(b, a)\n    @Suppress(\"VIRTUAL_MEMBER_HIDDEN\")\n    fun reversed(): Comparator<T> = comparator\n}\n\nprivate object NaturalOrderComparator : Comparator<Comparable<Any>> {\n    override fun compare(a: Comparable<Any>, b: Comparable<Any>): Int = a.compareTo(b)\n    @Suppress(\"VIRTUAL_MEMBER_HIDDEN\")\n    fun reversed(): Comparator<Comparable<Any>> = ReverseOrderComparator\n}\n\nprivate object ReverseOrderComparator : Comparator<Comparable<Any>> {\n    override fun compare(a: Comparable<Any>, b: Comparable<Any>): Int = b.compareTo(a)\n    @Suppress(\"VIRTUAL_MEMBER_HIDDEN\")\n    fun reversed(): Comparator<Comparable<Any>> = NaturalOrderComparator\n}\n",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// NOTE: THIS FILE IS AUTO-GENERATED, DO NOT EDIT!\n// See github.com/kotlin/dukat for details\n\npackage org.khronos.webgl\n\nimport kotlin.js.*\nimport org.w3c.css.masking.*\nimport org.w3c.dom.*\nimport org.w3c.dom.clipboard.*\nimport org.w3c.dom.css.*\nimport org.w3c.dom.events.*\nimport org.w3c.dom.mediacapture.*\nimport org.w3c.dom.parsing.*\nimport org.w3c.dom.pointerevents.*\nimport org.w3c.dom.svg.*\nimport org.w3c.dom.url.*\nimport org.w3c.fetch.*\nimport org.w3c.files.*\nimport org.w3c.notifications.*\nimport org.w3c.performance.*\nimport org.w3c.workers.*\nimport org.w3c.xhr.*\n\npublic external interface WebGLContextAttributes {\n    var alpha: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var depth: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var stencil: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var antialias: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var premultipliedAlpha: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var preserveDrawingBuffer: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var preferLowPowerToHighPerformance: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var failIfMajorPerformanceCaveat: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun WebGLContextAttributes(alpha: Boolean? = true, depth: Boolean? = true, stencil: Boolean? = false, antialias: Boolean? = true, premultipliedAlpha: Boolean? = true, preserveDrawingBuffer: Boolean? = false, preferLowPowerToHighPerformance: Boolean? = false, failIfMajorPerformanceCaveat: Boolean? = false): WebGLContextAttributes {\n    val o = js(\"({})\")\n    o[\"alpha\"] = alpha\n    o[\"depth\"] = depth\n    o[\"stencil\"] = stencil\n    o[\"antialias\"] = antialias\n    o[\"premultipliedAlpha\"] = premultipliedAlpha\n    o[\"preserveDrawingBuffer\"] = preserveDrawingBuffer\n    o[\"preferLowPowerToHighPerformance\"] = preferLowPowerToHighPerformance\n    o[\"failIfMajorPerformanceCaveat\"] = failIfMajorPerformanceCaveat\n    return o\n}\n\npublic external abstract class WebGLObject\n\n/**\n * Exposes the JavaScript [WebGLBuffer](https://developer.mozilla.org/en/docs/Web/API/WebGLBuffer) to Kotlin\n */\npublic external abstract class WebGLBuffer : WebGLObject\n\n/**\n * Exposes the JavaScript [WebGLFramebuffer](https://developer.mozilla.org/en/docs/Web/API/WebGLFramebuffer) to Kotlin\n */\npublic external abstract class WebGLFramebuffer : WebGLObject\n\n/**\n * Exposes the JavaScript [WebGLProgram](https://developer.mozilla.org/en/docs/Web/API/WebGLProgram) to Kotlin\n */\npublic external abstract class WebGLProgram : WebGLObject\n\n/**\n * Exposes the JavaScript [WebGLRenderbuffer](https://developer.mozilla.org/en/docs/Web/API/WebGLRenderbuffer) to Kotlin\n */\npublic external abstract class WebGLRenderbuffer : WebGLObject\n\n/**\n * Exposes the JavaScript [WebGLShader](https://developer.mozilla.org/en/docs/Web/API/WebGLShader) to Kotlin\n */\npublic external abstract class WebGLShader : WebGLObject\n\n/**\n * Exposes the JavaScript [WebGLTexture](https://developer.mozilla.org/en/docs/Web/API/WebGLTexture) to Kotlin\n */\npublic external abstract class WebGLTexture : WebGLObject\n\n/**\n * Exposes the JavaScript [WebGLUniformLocation](https://developer.mozilla.org/en/docs/Web/API/WebGLUniformLocation) to Kotlin\n */\npublic external abstract class WebGLUniformLocation\n\n/**\n * Exposes the JavaScript [WebGLActiveInfo](https://developer.mozilla.org/en/docs/Web/API/WebGLActiveInfo) to Kotlin\n */\npublic external abstract class WebGLActiveInfo {\n    open val size: Int\n    open val type: Int\n    open val name: String\n}\n\n/**\n * Exposes the JavaScript [WebGLShaderPrecisionFormat](https://developer.mozilla.org/en/docs/Web/API/WebGLShaderPrecisionFormat) to Kotlin\n */\npublic external abstract class WebGLShaderPrecisionFormat {\n    open val rangeMin: Int\n    open val rangeMax: Int\n    open val precision: Int\n}\n\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface WebGLRenderingContextBase {\n    val canvas: HTMLCanvasElement\n    val drawingBufferWidth: Int\n    val drawingBufferHeight: Int\n    fun getContextAttributes(): WebGLContextAttributes?\n    fun isContextLost(): Boolean\n    fun getSupportedExtensions(): Array<String>?\n    fun getExtension(name: String): dynamic\n    fun activeTexture(texture: Int)\n    fun attachShader(program: WebGLProgram?, shader: WebGLShader?)\n    fun bindAttribLocation(program: WebGLProgram?, index: Int, name: String)\n    fun bindBuffer(target: Int, buffer: WebGLBuffer?)\n    fun bindFramebuffer(target: Int, framebuffer: WebGLFramebuffer?)\n    fun bindRenderbuffer(target: Int, renderbuffer: WebGLRenderbuffer?)\n    fun bindTexture(target: Int, texture: WebGLTexture?)\n    fun blendColor(red: Float, green: Float, blue: Float, alpha: Float)\n    fun blendEquation(mode: Int)\n    fun blendEquationSeparate(modeRGB: Int, modeAlpha: Int)\n    fun blendFunc(sfactor: Int, dfactor: Int)\n    fun blendFuncSeparate(srcRGB: Int, dstRGB: Int, srcAlpha: Int, dstAlpha: Int)\n    fun bufferData(target: Int, size: Int, usage: Int)\n    fun bufferData(target: Int, data: BufferDataSource?, usage: Int)\n    fun bufferSubData(target: Int, offset: Int, data: BufferDataSource?)\n    fun checkFramebufferStatus(target: Int): Int\n    fun clear(mask: Int)\n    fun clearColor(red: Float, green: Float, blue: Float, alpha: Float)\n    fun clearDepth(depth: Float)\n    fun clearStencil(s: Int)\n    fun colorMask(red: Boolean, green: Boolean, blue: Boolean, alpha: Boolean)\n    fun compileShader(shader: WebGLShader?)\n    fun compressedTexImage2D(target: Int, level: Int, internalformat: Int, width: Int, height: Int, border: Int, data: ArrayBufferView)\n    fun compressedTexSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, width: Int, height: Int, format: Int, data: ArrayBufferView)\n    fun copyTexImage2D(target: Int, level: Int, internalformat: Int, x: Int, y: Int, width: Int, height: Int, border: Int)\n    fun copyTexSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, x: Int, y: Int, width: Int, height: Int)\n    fun createBuffer(): WebGLBuffer?\n    fun createFramebuffer(): WebGLFramebuffer?\n    fun createProgram(): WebGLProgram?\n    fun createRenderbuffer(): WebGLRenderbuffer?\n    fun createShader(type: Int): WebGLShader?\n    fun createTexture(): WebGLTexture?\n    fun cullFace(mode: Int)\n    fun deleteBuffer(buffer: WebGLBuffer?)\n    fun deleteFramebuffer(framebuffer: WebGLFramebuffer?)\n    fun deleteProgram(program: WebGLProgram?)\n    fun deleteRenderbuffer(renderbuffer: WebGLRenderbuffer?)\n    fun deleteShader(shader: WebGLShader?)\n    fun deleteTexture(texture: WebGLTexture?)\n    fun depthFunc(func: Int)\n    fun depthMask(flag: Boolean)\n    fun depthRange(zNear: Float, zFar: Float)\n    fun detachShader(program: WebGLProgram?, shader: WebGLShader?)\n    fun disable(cap: Int)\n    fun disableVertexAttribArray(index: Int)\n    fun drawArrays(mode: Int, first: Int, count: Int)\n    fun drawElements(mode: Int, count: Int, type: Int, offset: Int)\n    fun enable(cap: Int)\n    fun enableVertexAttribArray(index: Int)\n    fun finish()\n    fun flush()\n    fun framebufferRenderbuffer(target: Int, attachment: Int, renderbuffertarget: Int, renderbuffer: WebGLRenderbuffer?)\n    fun framebufferTexture2D(target: Int, attachment: Int, textarget: Int, texture: WebGLTexture?, level: Int)\n    fun frontFace(mode: Int)\n    fun generateMipmap(target: Int)\n    fun getActiveAttrib(program: WebGLProgram?, index: Int): WebGLActiveInfo?\n    fun getActiveUniform(program: WebGLProgram?, index: Int): WebGLActiveInfo?\n    fun getAttachedShaders(program: WebGLProgram?): Array<WebGLShader>?\n    fun getAttribLocation(program: WebGLProgram?, name: String): Int\n    fun getBufferParameter(target: Int, pname: Int): Any?\n    fun getParameter(pname: Int): Any?\n    fun getError(): Int\n    fun getFramebufferAttachmentParameter(target: Int, attachment: Int, pname: Int): Any?\n    fun getProgramParameter(program: WebGLProgram?, pname: Int): Any?\n    fun getProgramInfoLog(program: WebGLProgram?): String?\n    fun getRenderbufferParameter(target: Int, pname: Int): Any?\n    fun getShaderParameter(shader: WebGLShader?, pname: Int): Any?\n    fun getShaderPrecisionFormat(shadertype: Int, precisiontype: Int): WebGLShaderPrecisionFormat?\n    fun getShaderInfoLog(shader: WebGLShader?): String?\n    fun getShaderSource(shader: WebGLShader?): String?\n    fun getTexParameter(target: Int, pname: Int): Any?\n    fun getUniform(program: WebGLProgram?, location: WebGLUniformLocation?): Any?\n    fun getUniformLocation(program: WebGLProgram?, name: String): WebGLUniformLocation?\n    fun getVertexAttrib(index: Int, pname: Int): Any?\n    fun getVertexAttribOffset(index: Int, pname: Int): Int\n    fun hint(target: Int, mode: Int)\n    fun isBuffer(buffer: WebGLBuffer?): Boolean\n    fun isEnabled(cap: Int): Boolean\n    fun isFramebuffer(framebuffer: WebGLFramebuffer?): Boolean\n    fun isProgram(program: WebGLProgram?): Boolean\n    fun isRenderbuffer(renderbuffer: WebGLRenderbuffer?): Boolean\n    fun isShader(shader: WebGLShader?): Boolean\n    fun isTexture(texture: WebGLTexture?): Boolean\n    fun lineWidth(width: Float)\n    fun linkProgram(program: WebGLProgram?)\n    fun pixelStorei(pname: Int, param: Int)\n    fun polygonOffset(factor: Float, units: Float)\n    fun readPixels(x: Int, y: Int, width: Int, height: Int, format: Int, type: Int, pixels: ArrayBufferView?)\n    fun renderbufferStorage(target: Int, internalformat: Int, width: Int, height: Int)\n    fun sampleCoverage(value: Float, invert: Boolean)\n    fun scissor(x: Int, y: Int, width: Int, height: Int)\n    fun shaderSource(shader: WebGLShader?, source: String)\n    fun stencilFunc(func: Int, ref: Int, mask: Int)\n    fun stencilFuncSeparate(face: Int, func: Int, ref: Int, mask: Int)\n    fun stencilMask(mask: Int)\n    fun stencilMaskSeparate(face: Int, mask: Int)\n    fun stencilOp(fail: Int, zfail: Int, zpass: Int)\n    fun stencilOpSeparate(face: Int, fail: Int, zfail: Int, zpass: Int)\n    fun texImage2D(target: Int, level: Int, internalformat: Int, width: Int, height: Int, border: Int, format: Int, type: Int, pixels: ArrayBufferView?)\n    fun texImage2D(target: Int, level: Int, internalformat: Int, format: Int, type: Int, source: TexImageSource?)\n    fun texParameterf(target: Int, pname: Int, param: Float)\n    fun texParameteri(target: Int, pname: Int, param: Int)\n    fun texSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, width: Int, height: Int, format: Int, type: Int, pixels: ArrayBufferView?)\n    fun texSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, format: Int, type: Int, source: TexImageSource?)\n    fun uniform1f(location: WebGLUniformLocation?, x: Float)\n    fun uniform1fv(location: WebGLUniformLocation?, v: Float32Array)\n    fun uniform1fv(location: WebGLUniformLocation?, v: Array<Float>)\n    fun uniform1i(location: WebGLUniformLocation?, x: Int)\n    fun uniform1iv(location: WebGLUniformLocation?, v: Int32Array)\n    fun uniform1iv(location: WebGLUniformLocation?, v: Array<Int>)\n    fun uniform2f(location: WebGLUniformLocation?, x: Float, y: Float)\n    fun uniform2fv(location: WebGLUniformLocation?, v: Float32Array)\n    fun uniform2fv(location: WebGLUniformLocation?, v: Array<Float>)\n    fun uniform2i(location: WebGLUniformLocation?, x: Int, y: Int)\n    fun uniform2iv(location: WebGLUniformLocation?, v: Int32Array)\n    fun uniform2iv(location: WebGLUniformLocation?, v: Array<Int>)\n    fun uniform3f(location: WebGLUniformLocation?, x: Float, y: Float, z: Float)\n    fun uniform3fv(location: WebGLUniformLocation?, v: Float32Array)\n    fun uniform3fv(location: WebGLUniformLocation?, v: Array<Float>)\n    fun uniform3i(location: WebGLUniformLocation?, x: Int, y: Int, z: Int)\n    fun uniform3iv(location: WebGLUniformLocation?, v: Int32Array)\n    fun uniform3iv(location: WebGLUniformLocation?, v: Array<Int>)\n    fun uniform4f(location: WebGLUniformLocation?, x: Float, y: Float, z: Float, w: Float)\n    fun uniform4fv(location: WebGLUniformLocation?, v: Float32Array)\n    fun uniform4fv(location: WebGLUniformLocation?, v: Array<Float>)\n    fun uniform4i(location: WebGLUniformLocation?, x: Int, y: Int, z: Int, w: Int)\n    fun uniform4iv(location: WebGLUniformLocation?, v: Int32Array)\n    fun uniform4iv(location: WebGLUniformLocation?, v: Array<Int>)\n    fun uniformMatrix2fv(location: WebGLUniformLocation?, transpose: Boolean, value: Float32Array)\n    fun uniformMatrix2fv(location: WebGLUniformLocation?, transpose: Boolean, value: Array<Float>)\n    fun uniformMatrix3fv(location: WebGLUniformLocation?, transpose: Boolean, value: Float32Array)\n    fun uniformMatrix3fv(location: WebGLUniformLocation?, transpose: Boolean, value: Array<Float>)\n    fun uniformMatrix4fv(location: WebGLUniformLocation?, transpose: Boolean, value: Float32Array)\n    fun uniformMatrix4fv(location: WebGLUniformLocation?, transpose: Boolean, value: Array<Float>)\n    fun useProgram(program: WebGLProgram?)\n    fun validateProgram(program: WebGLProgram?)\n    fun vertexAttrib1f(index: Int, x: Float)\n    fun vertexAttrib1fv(index: Int, values: dynamic)\n    fun vertexAttrib2f(index: Int, x: Float, y: Float)\n    fun vertexAttrib2fv(index: Int, values: dynamic)\n    fun vertexAttrib3f(index: Int, x: Float, y: Float, z: Float)\n    fun vertexAttrib3fv(index: Int, values: dynamic)\n    fun vertexAttrib4f(index: Int, x: Float, y: Float, z: Float, w: Float)\n    fun vertexAttrib4fv(index: Int, values: dynamic)\n    fun vertexAttribPointer(index: Int, size: Int, type: Int, normalized: Boolean, stride: Int, offset: Int)\n    fun viewport(x: Int, y: Int, width: Int, height: Int)\n\n    companion object {\n        val DEPTH_BUFFER_BIT: Int\n        val STENCIL_BUFFER_BIT: Int\n        val COLOR_BUFFER_BIT: Int\n        val POINTS: Int\n        val LINES: Int\n        val LINE_LOOP: Int\n        val LINE_STRIP: Int\n        val TRIANGLES: Int\n        val TRIANGLE_STRIP: Int\n        val TRIANGLE_FAN: Int\n        val ZERO: Int\n        val ONE: Int\n        val SRC_COLOR: Int\n        val ONE_MINUS_SRC_COLOR: Int\n        val SRC_ALPHA: Int\n        val ONE_MINUS_SRC_ALPHA: Int\n        val DST_ALPHA: Int\n        val ONE_MINUS_DST_ALPHA: Int\n        val DST_COLOR: Int\n        val ONE_MINUS_DST_COLOR: Int\n        val SRC_ALPHA_SATURATE: Int\n        val FUNC_ADD: Int\n        val BLEND_EQUATION: Int\n        val BLEND_EQUATION_RGB: Int\n        val BLEND_EQUATION_ALPHA: Int\n        val FUNC_SUBTRACT: Int\n        val FUNC_REVERSE_SUBTRACT: Int\n        val BLEND_DST_RGB: Int\n        val BLEND_SRC_RGB: Int\n        val BLEND_DST_ALPHA: Int\n        val BLEND_SRC_ALPHA: Int\n        val CONSTANT_COLOR: Int\n        val ONE_MINUS_CONSTANT_COLOR: Int\n        val CONSTANT_ALPHA: Int\n        val ONE_MINUS_CONSTANT_ALPHA: Int\n        val BLEND_COLOR: Int\n        val ARRAY_BUFFER: Int\n        val ELEMENT_ARRAY_BUFFER: Int\n        val ARRAY_BUFFER_BINDING: Int\n        val ELEMENT_ARRAY_BUFFER_BINDING: Int\n        val STREAM_DRAW: Int\n        val STATIC_DRAW: Int\n        val DYNAMIC_DRAW: Int\n        val BUFFER_SIZE: Int\n        val BUFFER_USAGE: Int\n        val CURRENT_VERTEX_ATTRIB: Int\n        val FRONT: Int\n        val BACK: Int\n        val FRONT_AND_BACK: Int\n        val CULL_FACE: Int\n        val BLEND: Int\n        val DITHER: Int\n        val STENCIL_TEST: Int\n        val DEPTH_TEST: Int\n        val SCISSOR_TEST: Int\n        val POLYGON_OFFSET_FILL: Int\n        val SAMPLE_ALPHA_TO_COVERAGE: Int\n        val SAMPLE_COVERAGE: Int\n        val NO_ERROR: Int\n        val INVALID_ENUM: Int\n        val INVALID_VALUE: Int\n        val INVALID_OPERATION: Int\n        val OUT_OF_MEMORY: Int\n        val CW: Int\n        val CCW: Int\n        val LINE_WIDTH: Int\n        val ALIASED_POINT_SIZE_RANGE: Int\n        val ALIASED_LINE_WIDTH_RANGE: Int\n        val CULL_FACE_MODE: Int\n        val FRONT_FACE: Int\n        val DEPTH_RANGE: Int\n        val DEPTH_WRITEMASK: Int\n        val DEPTH_CLEAR_VALUE: Int\n        val DEPTH_FUNC: Int\n        val STENCIL_CLEAR_VALUE: Int\n        val STENCIL_FUNC: Int\n        val STENCIL_FAIL: Int\n        val STENCIL_PASS_DEPTH_FAIL: Int\n        val STENCIL_PASS_DEPTH_PASS: Int\n        val STENCIL_REF: Int\n        val STENCIL_VALUE_MASK: Int\n        val STENCIL_WRITEMASK: Int\n        val STENCIL_BACK_FUNC: Int\n        val STENCIL_BACK_FAIL: Int\n        val STENCIL_BACK_PASS_DEPTH_FAIL: Int\n        val STENCIL_BACK_PASS_DEPTH_PASS: Int\n        val STENCIL_BACK_REF: Int\n        val STENCIL_BACK_VALUE_MASK: Int\n        val STENCIL_BACK_WRITEMASK: Int\n        val VIEWPORT: Int\n        val SCISSOR_BOX: Int\n        val COLOR_CLEAR_VALUE: Int\n        val COLOR_WRITEMASK: Int\n        val UNPACK_ALIGNMENT: Int\n        val PACK_ALIGNMENT: Int\n        val MAX_TEXTURE_SIZE: Int\n        val MAX_VIEWPORT_DIMS: Int\n        val SUBPIXEL_BITS: Int\n        val RED_BITS: Int\n        val GREEN_BITS: Int\n        val BLUE_BITS: Int\n        val ALPHA_BITS: Int\n        val DEPTH_BITS: Int\n        val STENCIL_BITS: Int\n        val POLYGON_OFFSET_UNITS: Int\n        val POLYGON_OFFSET_FACTOR: Int\n        val TEXTURE_BINDING_2D: Int\n        val SAMPLE_BUFFERS: Int\n        val SAMPLES: Int\n        val SAMPLE_COVERAGE_VALUE: Int\n        val SAMPLE_COVERAGE_INVERT: Int\n        val COMPRESSED_TEXTURE_FORMATS: Int\n        val DONT_CARE: Int\n        val FASTEST: Int\n        val NICEST: Int\n        val GENERATE_MIPMAP_HINT: Int\n        val BYTE: Int\n        val UNSIGNED_BYTE: Int\n        val SHORT: Int\n        val UNSIGNED_SHORT: Int\n        val INT: Int\n        val UNSIGNED_INT: Int\n        val FLOAT: Int\n        val DEPTH_COMPONENT: Int\n        val ALPHA: Int\n        val RGB: Int\n        val RGBA: Int\n        val LUMINANCE: Int\n        val LUMINANCE_ALPHA: Int\n        val UNSIGNED_SHORT_4_4_4_4: Int\n        val UNSIGNED_SHORT_5_5_5_1: Int\n        val UNSIGNED_SHORT_5_6_5: Int\n        val FRAGMENT_SHADER: Int\n        val VERTEX_SHADER: Int\n        val MAX_VERTEX_ATTRIBS: Int\n        val MAX_VERTEX_UNIFORM_VECTORS: Int\n        val MAX_VARYING_VECTORS: Int\n        val MAX_COMBINED_TEXTURE_IMAGE_UNITS: Int\n        val MAX_VERTEX_TEXTURE_IMAGE_UNITS: Int\n        val MAX_TEXTURE_IMAGE_UNITS: Int\n        val MAX_FRAGMENT_UNIFORM_VECTORS: Int\n        val SHADER_TYPE: Int\n        val DELETE_STATUS: Int\n        val LINK_STATUS: Int\n        val VALIDATE_STATUS: Int\n        val ATTACHED_SHADERS: Int\n        val ACTIVE_UNIFORMS: Int\n        val ACTIVE_ATTRIBUTES: Int\n        val SHADING_LANGUAGE_VERSION: Int\n        val CURRENT_PROGRAM: Int\n        val NEVER: Int\n        val LESS: Int\n        val EQUAL: Int\n        val LEQUAL: Int\n        val GREATER: Int\n        val NOTEQUAL: Int\n        val GEQUAL: Int\n        val ALWAYS: Int\n        val KEEP: Int\n        val REPLACE: Int\n        val INCR: Int\n        val DECR: Int\n        val INVERT: Int\n        val INCR_WRAP: Int\n        val DECR_WRAP: Int\n        val VENDOR: Int\n        val RENDERER: Int\n        val VERSION: Int\n        val NEAREST: Int\n        val LINEAR: Int\n        val NEAREST_MIPMAP_NEAREST: Int\n        val LINEAR_MIPMAP_NEAREST: Int\n        val NEAREST_MIPMAP_LINEAR: Int\n        val LINEAR_MIPMAP_LINEAR: Int\n        val TEXTURE_MAG_FILTER: Int\n        val TEXTURE_MIN_FILTER: Int\n        val TEXTURE_WRAP_S: Int\n        val TEXTURE_WRAP_T: Int\n        val TEXTURE_2D: Int\n        val TEXTURE: Int\n        val TEXTURE_CUBE_MAP: Int\n        val TEXTURE_BINDING_CUBE_MAP: Int\n        val TEXTURE_CUBE_MAP_POSITIVE_X: Int\n        val TEXTURE_CUBE_MAP_NEGATIVE_X: Int\n        val TEXTURE_CUBE_MAP_POSITIVE_Y: Int\n        val TEXTURE_CUBE_MAP_NEGATIVE_Y: Int\n        val TEXTURE_CUBE_MAP_POSITIVE_Z: Int\n        val TEXTURE_CUBE_MAP_NEGATIVE_Z: Int\n        val MAX_CUBE_MAP_TEXTURE_SIZE: Int\n        val TEXTURE0: Int\n        val TEXTURE1: Int\n        val TEXTURE2: Int\n        val TEXTURE3: Int\n        val TEXTURE4: Int\n        val TEXTURE5: Int\n        val TEXTURE6: Int\n        val TEXTURE7: Int\n        val TEXTURE8: Int\n        val TEXTURE9: Int\n        val TEXTURE10: Int\n        val TEXTURE11: Int\n        val TEXTURE12: Int\n        val TEXTURE13: Int\n        val TEXTURE14: Int\n        val TEXTURE15: Int\n        val TEXTURE16: Int\n        val TEXTURE17: Int\n        val TEXTURE18: Int\n        val TEXTURE19: Int\n        val TEXTURE20: Int\n        val TEXTURE21: Int\n        val TEXTURE22: Int\n        val TEXTURE23: Int\n        val TEXTURE24: Int\n        val TEXTURE25: Int\n        val TEXTURE26: Int\n        val TEXTURE27: Int\n        val TEXTURE28: Int\n        val TEXTURE29: Int\n        val TEXTURE30: Int\n        val TEXTURE31: Int\n        val ACTIVE_TEXTURE: Int\n        val REPEAT: Int\n        val CLAMP_TO_EDGE: Int\n        val MIRRORED_REPEAT: Int\n        val FLOAT_VEC2: Int\n        val FLOAT_VEC3: Int\n        val FLOAT_VEC4: Int\n        val INT_VEC2: Int\n        val INT_VEC3: Int\n        val INT_VEC4: Int\n        val BOOL: Int\n        val BOOL_VEC2: Int\n        val BOOL_VEC3: Int\n        val BOOL_VEC4: Int\n        val FLOAT_MAT2: Int\n        val FLOAT_MAT3: Int\n        val FLOAT_MAT4: Int\n        val SAMPLER_2D: Int\n        val SAMPLER_CUBE: Int\n        val VERTEX_ATTRIB_ARRAY_ENABLED: Int\n        val VERTEX_ATTRIB_ARRAY_SIZE: Int\n        val VERTEX_ATTRIB_ARRAY_STRIDE: Int\n        val VERTEX_ATTRIB_ARRAY_TYPE: Int\n        val VERTEX_ATTRIB_ARRAY_NORMALIZED: Int\n        val VERTEX_ATTRIB_ARRAY_POINTER: Int\n        val VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: Int\n        val IMPLEMENTATION_COLOR_READ_TYPE: Int\n        val IMPLEMENTATION_COLOR_READ_FORMAT: Int\n        val COMPILE_STATUS: Int\n        val LOW_FLOAT: Int\n        val MEDIUM_FLOAT: Int\n        val HIGH_FLOAT: Int\n        val LOW_INT: Int\n        val MEDIUM_INT: Int\n        val HIGH_INT: Int\n        val FRAMEBUFFER: Int\n        val RENDERBUFFER: Int\n        val RGBA4: Int\n        val RGB5_A1: Int\n        val RGB565: Int\n        val DEPTH_COMPONENT16: Int\n        val STENCIL_INDEX: Int\n        val STENCIL_INDEX8: Int\n        val DEPTH_STENCIL: Int\n        val RENDERBUFFER_WIDTH: Int\n        val RENDERBUFFER_HEIGHT: Int\n        val RENDERBUFFER_INTERNAL_FORMAT: Int\n        val RENDERBUFFER_RED_SIZE: Int\n        val RENDERBUFFER_GREEN_SIZE: Int\n        val RENDERBUFFER_BLUE_SIZE: Int\n        val RENDERBUFFER_ALPHA_SIZE: Int\n        val RENDERBUFFER_DEPTH_SIZE: Int\n        val RENDERBUFFER_STENCIL_SIZE: Int\n        val FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: Int\n        val FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: Int\n        val FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: Int\n        val FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: Int\n        val COLOR_ATTACHMENT0: Int\n        val DEPTH_ATTACHMENT: Int\n        val STENCIL_ATTACHMENT: Int\n        val DEPTH_STENCIL_ATTACHMENT: Int\n        val NONE: Int\n        val FRAMEBUFFER_COMPLETE: Int\n        val FRAMEBUFFER_INCOMPLETE_ATTACHMENT: Int\n        val FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: Int\n        val FRAMEBUFFER_INCOMPLETE_DIMENSIONS: Int\n        val FRAMEBUFFER_UNSUPPORTED: Int\n        val FRAMEBUFFER_BINDING: Int\n        val RENDERBUFFER_BINDING: Int\n        val MAX_RENDERBUFFER_SIZE: Int\n        val INVALID_FRAMEBUFFER_OPERATION: Int\n        val UNPACK_FLIP_Y_WEBGL: Int\n        val UNPACK_PREMULTIPLY_ALPHA_WEBGL: Int\n        val CONTEXT_LOST_WEBGL: Int\n        val UNPACK_COLORSPACE_CONVERSION_WEBGL: Int\n        val BROWSER_DEFAULT_WEBGL: Int\n    }\n}\n\n/**\n * Exposes the JavaScript [WebGLRenderingContext](https://developer.mozilla.org/en/docs/Web/API/WebGLRenderingContext) to Kotlin\n */\npublic external abstract class WebGLRenderingContext : WebGLRenderingContextBase, RenderingContext {\n    companion object {\n        val DEPTH_BUFFER_BIT: Int\n        val STENCIL_BUFFER_BIT: Int\n        val COLOR_BUFFER_BIT: Int\n        val POINTS: Int\n        val LINES: Int\n        val LINE_LOOP: Int\n        val LINE_STRIP: Int\n        val TRIANGLES: Int\n        val TRIANGLE_STRIP: Int\n        val TRIANGLE_FAN: Int\n        val ZERO: Int\n        val ONE: Int\n        val SRC_COLOR: Int\n        val ONE_MINUS_SRC_COLOR: Int\n        val SRC_ALPHA: Int\n        val ONE_MINUS_SRC_ALPHA: Int\n        val DST_ALPHA: Int\n        val ONE_MINUS_DST_ALPHA: Int\n        val DST_COLOR: Int\n        val ONE_MINUS_DST_COLOR: Int\n        val SRC_ALPHA_SATURATE: Int\n        val FUNC_ADD: Int\n        val BLEND_EQUATION: Int\n        val BLEND_EQUATION_RGB: Int\n        val BLEND_EQUATION_ALPHA: Int\n        val FUNC_SUBTRACT: Int\n        val FUNC_REVERSE_SUBTRACT: Int\n        val BLEND_DST_RGB: Int\n        val BLEND_SRC_RGB: Int\n        val BLEND_DST_ALPHA: Int\n        val BLEND_SRC_ALPHA: Int\n        val CONSTANT_COLOR: Int\n        val ONE_MINUS_CONSTANT_COLOR: Int\n        val CONSTANT_ALPHA: Int\n        val ONE_MINUS_CONSTANT_ALPHA: Int\n        val BLEND_COLOR: Int\n        val ARRAY_BUFFER: Int\n        val ELEMENT_ARRAY_BUFFER: Int\n        val ARRAY_BUFFER_BINDING: Int\n        val ELEMENT_ARRAY_BUFFER_BINDING: Int\n        val STREAM_DRAW: Int\n        val STATIC_DRAW: Int\n        val DYNAMIC_DRAW: Int\n        val BUFFER_SIZE: Int\n        val BUFFER_USAGE: Int\n        val CURRENT_VERTEX_ATTRIB: Int\n        val FRONT: Int\n        val BACK: Int\n        val FRONT_AND_BACK: Int\n        val CULL_FACE: Int\n        val BLEND: Int\n        val DITHER: Int\n        val STENCIL_TEST: Int\n        val DEPTH_TEST: Int\n        val SCISSOR_TEST: Int\n        val POLYGON_OFFSET_FILL: Int\n        val SAMPLE_ALPHA_TO_COVERAGE: Int\n        val SAMPLE_COVERAGE: Int\n        val NO_ERROR: Int\n        val INVALID_ENUM: Int\n        val INVALID_VALUE: Int\n        val INVALID_OPERATION: Int\n        val OUT_OF_MEMORY: Int\n        val CW: Int\n        val CCW: Int\n        val LINE_WIDTH: Int\n        val ALIASED_POINT_SIZE_RANGE: Int\n        val ALIASED_LINE_WIDTH_RANGE: Int\n        val CULL_FACE_MODE: Int\n        val FRONT_FACE: Int\n        val DEPTH_RANGE: Int\n        val DEPTH_WRITEMASK: Int\n        val DEPTH_CLEAR_VALUE: Int\n        val DEPTH_FUNC: Int\n        val STENCIL_CLEAR_VALUE: Int\n        val STENCIL_FUNC: Int\n        val STENCIL_FAIL: Int\n        val STENCIL_PASS_DEPTH_FAIL: Int\n        val STENCIL_PASS_DEPTH_PASS: Int\n        val STENCIL_REF: Int\n        val STENCIL_VALUE_MASK: Int\n        val STENCIL_WRITEMASK: Int\n        val STENCIL_BACK_FUNC: Int\n        val STENCIL_BACK_FAIL: Int\n        val STENCIL_BACK_PASS_DEPTH_FAIL: Int\n        val STENCIL_BACK_PASS_DEPTH_PASS: Int\n        val STENCIL_BACK_REF: Int\n        val STENCIL_BACK_VALUE_MASK: Int\n        val STENCIL_BACK_WRITEMASK: Int\n        val VIEWPORT: Int\n        val SCISSOR_BOX: Int\n        val COLOR_CLEAR_VALUE: Int\n        val COLOR_WRITEMASK: Int\n        val UNPACK_ALIGNMENT: Int\n        val PACK_ALIGNMENT: Int\n        val MAX_TEXTURE_SIZE: Int\n        val MAX_VIEWPORT_DIMS: Int\n        val SUBPIXEL_BITS: Int\n        val RED_BITS: Int\n        val GREEN_BITS: Int\n        val BLUE_BITS: Int\n        val ALPHA_BITS: Int\n        val DEPTH_BITS: Int\n        val STENCIL_BITS: Int\n        val POLYGON_OFFSET_UNITS: Int\n        val POLYGON_OFFSET_FACTOR: Int\n        val TEXTURE_BINDING_2D: Int\n        val SAMPLE_BUFFERS: Int\n        val SAMPLES: Int\n        val SAMPLE_COVERAGE_VALUE: Int\n        val SAMPLE_COVERAGE_INVERT: Int\n        val COMPRESSED_TEXTURE_FORMATS: Int\n        val DONT_CARE: Int\n        val FASTEST: Int\n        val NICEST: Int\n        val GENERATE_MIPMAP_HINT: Int\n        val BYTE: Int\n        val UNSIGNED_BYTE: Int\n        val SHORT: Int\n        val UNSIGNED_SHORT: Int\n        val INT: Int\n        val UNSIGNED_INT: Int\n        val FLOAT: Int\n        val DEPTH_COMPONENT: Int\n        val ALPHA: Int\n        val RGB: Int\n        val RGBA: Int\n        val LUMINANCE: Int\n        val LUMINANCE_ALPHA: Int\n        val UNSIGNED_SHORT_4_4_4_4: Int\n        val UNSIGNED_SHORT_5_5_5_1: Int\n        val UNSIGNED_SHORT_5_6_5: Int\n        val FRAGMENT_SHADER: Int\n        val VERTEX_SHADER: Int\n        val MAX_VERTEX_ATTRIBS: Int\n        val MAX_VERTEX_UNIFORM_VECTORS: Int\n        val MAX_VARYING_VECTORS: Int\n        val MAX_COMBINED_TEXTURE_IMAGE_UNITS: Int\n        val MAX_VERTEX_TEXTURE_IMAGE_UNITS: Int\n        val MAX_TEXTURE_IMAGE_UNITS: Int\n        val MAX_FRAGMENT_UNIFORM_VECTORS: Int\n        val SHADER_TYPE: Int\n        val DELETE_STATUS: Int\n        val LINK_STATUS: Int\n        val VALIDATE_STATUS: Int\n        val ATTACHED_SHADERS: Int\n        val ACTIVE_UNIFORMS: Int\n        val ACTIVE_ATTRIBUTES: Int\n        val SHADING_LANGUAGE_VERSION: Int\n        val CURRENT_PROGRAM: Int\n        val NEVER: Int\n        val LESS: Int\n        val EQUAL: Int\n        val LEQUAL: Int\n        val GREATER: Int\n        val NOTEQUAL: Int\n        val GEQUAL: Int\n        val ALWAYS: Int\n        val KEEP: Int\n        val REPLACE: Int\n        val INCR: Int\n        val DECR: Int\n        val INVERT: Int\n        val INCR_WRAP: Int\n        val DECR_WRAP: Int\n        val VENDOR: Int\n        val RENDERER: Int\n        val VERSION: Int\n        val NEAREST: Int\n        val LINEAR: Int\n        val NEAREST_MIPMAP_NEAREST: Int\n        val LINEAR_MIPMAP_NEAREST: Int\n        val NEAREST_MIPMAP_LINEAR: Int\n        val LINEAR_MIPMAP_LINEAR: Int\n        val TEXTURE_MAG_FILTER: Int\n        val TEXTURE_MIN_FILTER: Int\n        val TEXTURE_WRAP_S: Int\n        val TEXTURE_WRAP_T: Int\n        val TEXTURE_2D: Int\n        val TEXTURE: Int\n        val TEXTURE_CUBE_MAP: Int\n        val TEXTURE_BINDING_CUBE_MAP: Int\n        val TEXTURE_CUBE_MAP_POSITIVE_X: Int\n        val TEXTURE_CUBE_MAP_NEGATIVE_X: Int\n        val TEXTURE_CUBE_MAP_POSITIVE_Y: Int\n        val TEXTURE_CUBE_MAP_NEGATIVE_Y: Int\n        val TEXTURE_CUBE_MAP_POSITIVE_Z: Int\n        val TEXTURE_CUBE_MAP_NEGATIVE_Z: Int\n        val MAX_CUBE_MAP_TEXTURE_SIZE: Int\n        val TEXTURE0: Int\n        val TEXTURE1: Int\n        val TEXTURE2: Int\n        val TEXTURE3: Int\n        val TEXTURE4: Int\n        val TEXTURE5: Int\n        val TEXTURE6: Int\n        val TEXTURE7: Int\n        val TEXTURE8: Int\n        val TEXTURE9: Int\n        val TEXTURE10: Int\n        val TEXTURE11: Int\n        val TEXTURE12: Int\n        val TEXTURE13: Int\n        val TEXTURE14: Int\n        val TEXTURE15: Int\n        val TEXTURE16: Int\n        val TEXTURE17: Int\n        val TEXTURE18: Int\n        val TEXTURE19: Int\n        val TEXTURE20: Int\n        val TEXTURE21: Int\n        val TEXTURE22: Int\n        val TEXTURE23: Int\n        val TEXTURE24: Int\n        val TEXTURE25: Int\n        val TEXTURE26: Int\n        val TEXTURE27: Int\n        val TEXTURE28: Int\n        val TEXTURE29: Int\n        val TEXTURE30: Int\n        val TEXTURE31: Int\n        val ACTIVE_TEXTURE: Int\n        val REPEAT: Int\n        val CLAMP_TO_EDGE: Int\n        val MIRRORED_REPEAT: Int\n        val FLOAT_VEC2: Int\n        val FLOAT_VEC3: Int\n        val FLOAT_VEC4: Int\n        val INT_VEC2: Int\n        val INT_VEC3: Int\n        val INT_VEC4: Int\n        val BOOL: Int\n        val BOOL_VEC2: Int\n        val BOOL_VEC3: Int\n        val BOOL_VEC4: Int\n        val FLOAT_MAT2: Int\n        val FLOAT_MAT3: Int\n        val FLOAT_MAT4: Int\n        val SAMPLER_2D: Int\n        val SAMPLER_CUBE: Int\n        val VERTEX_ATTRIB_ARRAY_ENABLED: Int\n        val VERTEX_ATTRIB_ARRAY_SIZE: Int\n        val VERTEX_ATTRIB_ARRAY_STRIDE: Int\n        val VERTEX_ATTRIB_ARRAY_TYPE: Int\n        val VERTEX_ATTRIB_ARRAY_NORMALIZED: Int\n        val VERTEX_ATTRIB_ARRAY_POINTER: Int\n        val VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: Int\n        val IMPLEMENTATION_COLOR_READ_TYPE: Int\n        val IMPLEMENTATION_COLOR_READ_FORMAT: Int\n        val COMPILE_STATUS: Int\n        val LOW_FLOAT: Int\n        val MEDIUM_FLOAT: Int\n        val HIGH_FLOAT: Int\n        val LOW_INT: Int\n        val MEDIUM_INT: Int\n        val HIGH_INT: Int\n        val FRAMEBUFFER: Int\n        val RENDERBUFFER: Int\n        val RGBA4: Int\n        val RGB5_A1: Int\n        val RGB565: Int\n        val DEPTH_COMPONENT16: Int\n        val STENCIL_INDEX: Int\n        val STENCIL_INDEX8: Int\n        val DEPTH_STENCIL: Int\n        val RENDERBUFFER_WIDTH: Int\n        val RENDERBUFFER_HEIGHT: Int\n        val RENDERBUFFER_INTERNAL_FORMAT: Int\n        val RENDERBUFFER_RED_SIZE: Int\n        val RENDERBUFFER_GREEN_SIZE: Int\n        val RENDERBUFFER_BLUE_SIZE: Int\n        val RENDERBUFFER_ALPHA_SIZE: Int\n        val RENDERBUFFER_DEPTH_SIZE: Int\n        val RENDERBUFFER_STENCIL_SIZE: Int\n        val FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: Int\n        val FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: Int\n        val FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: Int\n        val FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: Int\n        val COLOR_ATTACHMENT0: Int\n        val DEPTH_ATTACHMENT: Int\n        val STENCIL_ATTACHMENT: Int\n        val DEPTH_STENCIL_ATTACHMENT: Int\n        val NONE: Int\n        val FRAMEBUFFER_COMPLETE: Int\n        val FRAMEBUFFER_INCOMPLETE_ATTACHMENT: Int\n        val FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: Int\n        val FRAMEBUFFER_INCOMPLETE_DIMENSIONS: Int\n        val FRAMEBUFFER_UNSUPPORTED: Int\n        val FRAMEBUFFER_BINDING: Int\n        val RENDERBUFFER_BINDING: Int\n        val MAX_RENDERBUFFER_SIZE: Int\n        val INVALID_FRAMEBUFFER_OPERATION: Int\n        val UNPACK_FLIP_Y_WEBGL: Int\n        val UNPACK_PREMULTIPLY_ALPHA_WEBGL: Int\n        val CONTEXT_LOST_WEBGL: Int\n        val UNPACK_COLORSPACE_CONVERSION_WEBGL: Int\n        val BROWSER_DEFAULT_WEBGL: Int\n    }\n}\n\n/**\n * Exposes the JavaScript [WebGLContextEvent](https://developer.mozilla.org/en/docs/Web/API/WebGLContextEvent) to Kotlin\n */\npublic external open class WebGLContextEvent(type: String, eventInit: WebGLContextEventInit = definedExternally) : Event {\n    open val statusMessage: String\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface WebGLContextEventInit : EventInit {\n    var statusMessage: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun WebGLContextEventInit(statusMessage: String? = \"\", bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): WebGLContextEventInit {\n    val o = js(\"({})\")\n    o[\"statusMessage\"] = statusMessage\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [ArrayBuffer](https://developer.mozilla.org/en/docs/Web/API/ArrayBuffer) to Kotlin\n */\npublic external open class ArrayBuffer(length: Int) : BufferDataSource {\n    open val byteLength: Int\n    fun slice(begin: Int, end: Int = definedExternally): ArrayBuffer\n\n    companion object {\n        fun isView(value: Any?): Boolean\n    }\n}\n\n/**\n * Exposes the JavaScript [ArrayBufferView](https://developer.mozilla.org/en/docs/Web/API/ArrayBufferView) to Kotlin\n */\npublic external interface ArrayBufferView : BufferDataSource {\n    val buffer: ArrayBuffer\n    val byteOffset: Int\n    val byteLength: Int\n}\n\n/**\n * Exposes the JavaScript [Int8Array](https://developer.mozilla.org/en/docs/Web/API/Int8Array) to Kotlin\n */\npublic external open class Int8Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Int8Array)\n    constructor(array: Array<Byte>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Int8Array, offset: Int = definedExternally)\n    fun set(array: Array<Byte>, offset: Int = definedExternally)\n    fun subarray(start: Int, end: Int): Int8Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Int8Array.get(index: Int): Byte = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Int8Array.set(index: Int, value: Byte) { asDynamic()[index] = value }\n\n/**\n * Exposes the JavaScript [Uint8Array](https://developer.mozilla.org/en/docs/Web/API/Uint8Array) to Kotlin\n */\npublic external open class Uint8Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Uint8Array)\n    constructor(array: Array<Byte>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Uint8Array, offset: Int = definedExternally)\n    fun set(array: Array<Byte>, offset: Int = definedExternally)\n    fun subarray(start: Int, end: Int): Uint8Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Uint8Array.get(index: Int): Byte = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Uint8Array.set(index: Int, value: Byte) { asDynamic()[index] = value }\n\n/**\n * Exposes the JavaScript [Uint8ClampedArray](https://developer.mozilla.org/en/docs/Web/API/Uint8ClampedArray) to Kotlin\n */\npublic external open class Uint8ClampedArray : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Uint8ClampedArray)\n    constructor(array: Array<Byte>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Uint8ClampedArray, offset: Int = definedExternally)\n    fun set(array: Array<Byte>, offset: Int = definedExternally)\n    fun subarray(start: Int, end: Int): Uint8ClampedArray\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Uint8ClampedArray.get(index: Int): Byte = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Uint8ClampedArray.set(index: Int, value: Byte) { asDynamic()[index] = value }\n\n/**\n * Exposes the JavaScript [Int16Array](https://developer.mozilla.org/en/docs/Web/API/Int16Array) to Kotlin\n */\npublic external open class Int16Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Int16Array)\n    constructor(array: Array<Short>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Int16Array, offset: Int = definedExternally)\n    fun set(array: Array<Short>, offset: Int = definedExternally)\n    fun subarray(start: Int, end: Int): Int16Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Int16Array.get(index: Int): Short = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Int16Array.set(index: Int, value: Short) { asDynamic()[index] = value }\n\n/**\n * Exposes the JavaScript [Uint16Array](https://developer.mozilla.org/en/docs/Web/API/Uint16Array) to Kotlin\n */\npublic external open class Uint16Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Uint16Array)\n    constructor(array: Array<Short>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Uint16Array, offset: Int = definedExternally)\n    fun set(array: Array<Short>, offset: Int = definedExternally)\n    fun subarray(start: Int, end: Int): Uint16Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Uint16Array.get(index: Int): Short = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Uint16Array.set(index: Int, value: Short) { asDynamic()[index] = value }\n\n/**\n * Exposes the JavaScript [Int32Array](https://developer.mozilla.org/en/docs/Web/API/Int32Array) to Kotlin\n */\npublic external open class Int32Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Int32Array)\n    constructor(array: Array<Int>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Int32Array, offset: Int = definedExternally)\n    fun set(array: Array<Int>, offset: Int = definedExternally)\n    fun subarray(start: Int, end: Int): Int32Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Int32Array.get(index: Int): Int = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Int32Array.set(index: Int, value: Int) { asDynamic()[index] = value }\n\n/**\n * Exposes the JavaScript [Uint32Array](https://developer.mozilla.org/en/docs/Web/API/Uint32Array) to Kotlin\n */\npublic external open class Uint32Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Uint32Array)\n    constructor(array: Array<Int>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Uint32Array, offset: Int = definedExternally)\n    fun set(array: Array<Int>, offset: Int = definedExternally)\n    fun subarray(start: Int, end: Int): Uint32Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Uint32Array.get(index: Int): Int = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Uint32Array.set(index: Int, value: Int) { asDynamic()[index] = value }\n\n/**\n * Exposes the JavaScript [Float32Array](https://developer.mozilla.org/en/docs/Web/API/Float32Array) to Kotlin\n */\npublic external open class Float32Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Float32Array)\n    constructor(array: Array<Float>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Float32Array, offset: Int = definedExternally)\n    fun set(array: Array<Float>, offset: Int = definedExternally)\n    fun subarray(start: Int, end: Int): Float32Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Float32Array.get(index: Int): Float = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Float32Array.set(index: Int, value: Float) { asDynamic()[index] = value }\n\n/**\n * Exposes the JavaScript [Float64Array](https://developer.mozilla.org/en/docs/Web/API/Float64Array) to Kotlin\n */\npublic external open class Float64Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Float64Array)\n    constructor(array: Array<Double>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Float64Array, offset: Int = definedExternally)\n    fun set(array: Array<Double>, offset: Int = definedExternally)\n    fun subarray(start: Int, end: Int): Float64Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Float64Array.get(index: Int): Double = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Float64Array.set(index: Int, value: Double) { asDynamic()[index] = value }\n\n/**\n * Exposes the JavaScript [DataView](https://developer.mozilla.org/en/docs/Web/API/DataView) to Kotlin\n */\npublic external open class DataView(buffer: ArrayBuffer, byteOffset: Int = definedExternally, byteLength: Int = definedExternally) : ArrayBufferView {\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun getInt8(byteOffset: Int): Byte\n    fun getUint8(byteOffset: Int): Byte\n    fun getInt16(byteOffset: Int, littleEndian: Boolean = definedExternally): Short\n    fun getUint16(byteOffset: Int, littleEndian: Boolean = definedExternally): Short\n    fun getInt32(byteOffset: Int, littleEndian: Boolean = definedExternally): Int\n    fun getUint32(byteOffset: Int, littleEndian: Boolean = definedExternally): Int\n    fun getFloat32(byteOffset: Int, littleEndian: Boolean = definedExternally): Float\n    fun getFloat64(byteOffset: Int, littleEndian: Boolean = definedExternally): Double\n    fun setInt8(byteOffset: Int, value: Byte)\n    fun setUint8(byteOffset: Int, value: Byte)\n    fun setInt16(byteOffset: Int, value: Short, littleEndian: Boolean = definedExternally)\n    fun setUint16(byteOffset: Int, value: Short, littleEndian: Boolean = definedExternally)\n    fun setInt32(byteOffset: Int, value: Int, littleEndian: Boolean = definedExternally)\n    fun setUint32(byteOffset: Int, value: Int, littleEndian: Boolean = definedExternally)\n    fun setFloat32(byteOffset: Int, value: Float, littleEndian: Boolean = definedExternally)\n    fun setFloat64(byteOffset: Int, value: Double, littleEndian: Boolean = definedExternally)\n}\n\npublic external interface BufferDataSource\n\npublic external interface TexImageSource",null,"/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// NOTE: THIS FILE IS AUTO-GENERATED, DO NOT EDIT!\n// See github.com/kotlin/dukat for details\n\npackage org.w3c.files\n\nimport kotlin.js.*\nimport org.khronos.webgl.*\nimport org.w3c.css.masking.*\nimport org.w3c.dom.*\nimport org.w3c.dom.clipboard.*\nimport org.w3c.dom.css.*\nimport org.w3c.dom.events.*\nimport org.w3c.dom.mediacapture.*\nimport org.w3c.dom.parsing.*\nimport org.w3c.dom.pointerevents.*\nimport org.w3c.dom.svg.*\nimport org.w3c.dom.url.*\nimport org.w3c.fetch.*\nimport org.w3c.notifications.*\nimport org.w3c.performance.*\nimport org.w3c.workers.*\nimport org.w3c.xhr.*\n\n/**\n * Exposes the JavaScript [Blob](https://developer.mozilla.org/en/docs/Web/API/Blob) to Kotlin\n */\npublic external open class Blob(blobParts: Array<dynamic> = definedExternally, options: BlobPropertyBag = definedExternally) : ImageBitmapSource {\n    open val size: Number\n    open val type: String\n    open val isClosed: Boolean\n    fun slice(start: Int = definedExternally, end: Int = definedExternally, contentType: String = definedExternally): Blob\n    fun close()\n}\n\npublic external interface BlobPropertyBag {\n    var type: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun BlobPropertyBag(type: String? = \"\"): BlobPropertyBag {\n    val o = js(\"({})\")\n    o[\"type\"] = type\n    return o\n}\n\n/**\n * Exposes the JavaScript [File](https://developer.mozilla.org/en/docs/Web/API/File) to Kotlin\n */\npublic external open class File(fileBits: Array<dynamic>, fileName: String, options: FilePropertyBag = definedExternally) : Blob {\n    open val name: String\n    open val lastModified: Int\n}\n\npublic external interface FilePropertyBag : BlobPropertyBag {\n    var lastModified: Int?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun FilePropertyBag(lastModified: Int? = undefined, type: String? = \"\"): FilePropertyBag {\n    val o = js(\"({})\")\n    o[\"lastModified\"] = lastModified\n    o[\"type\"] = type\n    return o\n}\n\n/**\n * Exposes the JavaScript [FileList](https://developer.mozilla.org/en/docs/Web/API/FileList) to Kotlin\n */\npublic external abstract class FileList : ItemArrayLike<File> {\n    override fun item(index: Int): File?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun FileList.get(index: Int): File? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [FileReader](https://developer.mozilla.org/en/docs/Web/API/FileReader) to Kotlin\n */\npublic external open class FileReader : EventTarget {\n    open val readyState: Short\n    open val result: dynamic\n    open val error: dynamic\n    var onloadstart: ((ProgressEvent) -> dynamic)?\n    var onprogress: ((ProgressEvent) -> dynamic)?\n    var onload: ((Event) -> dynamic)?\n    var onabort: ((Event) -> dynamic)?\n    var onerror: ((Event) -> dynamic)?\n    var onloadend: ((Event) -> dynamic)?\n    fun readAsArrayBuffer(blob: Blob)\n    fun readAsBinaryString(blob: Blob)\n    fun readAsText(blob: Blob, label: String = definedExternally)\n    fun readAsDataURL(blob: Blob)\n    fun abort()\n\n    companion object {\n        val EMPTY: Short\n        val LOADING: Short\n        val DONE: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [FileReaderSync](https://developer.mozilla.org/en/docs/Web/API/FileReaderSync) to Kotlin\n */\npublic external open class FileReaderSync {\n    fun readAsArrayBuffer(blob: Blob): ArrayBuffer\n    fun readAsBinaryString(blob: Blob): String\n    fun readAsText(blob: Blob, label: String = definedExternally): String\n    fun readAsDataURL(blob: Blob): String\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines\n\nimport kotlin.coroutines.intrinsics.*\nimport kotlin.internal.InlineOnly\n\n/**\n * Interface representing a continuation after a suspension point that returns a value of type `T`.\n */\n@SinceKotlin(\"1.3\")\npublic interface Continuation<in T> {\n    /**\n     * The context of the coroutine that corresponds to this continuation.\n     */\n    public val context: CoroutineContext\n\n    /**\n     * Resumes the execution of the corresponding coroutine passing a successful or failed [result] as the\n     * return value of the last suspension point.\n     */\n    public fun resumeWith(result: Result<T>)\n}\n\n/**\n * Classes and interfaces marked with this annotation are restricted when used as receivers for extension\n * `suspend` functions. These `suspend` extensions can only invoke other member or extension `suspend` functions on this particular\n * receiver and are restricted from calling arbitrary suspension functions.\n */\n@SinceKotlin(\"1.3\")\n@Target(AnnotationTarget.CLASS)\n@Retention(AnnotationRetention.BINARY)\npublic annotation class RestrictsSuspension\n\n/**\n * Resumes the execution of the corresponding coroutine passing [value] as the return value of the last suspension point.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic inline fun <T> Continuation<T>.resume(value: T): Unit =\n    resumeWith(Result.success(value))\n\n/**\n * Resumes the execution of the corresponding coroutine so that the [exception] is re-thrown right after the\n * last suspension point.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic inline fun <T> Continuation<T>.resumeWithException(exception: Throwable): Unit =\n    resumeWith(Result.failure(exception))\n\n\n/**\n * Creates a [Continuation] instance with the given [context] and implementation of [resumeWith] method.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic inline fun <T> Continuation(\n    context: CoroutineContext,\n    crossinline resumeWith: (Result<T>) -> Unit\n): Continuation<T> =\n    object : Continuation<T> {\n        override val context: CoroutineContext\n            get() = context\n\n        override fun resumeWith(result: Result<T>) =\n            resumeWith(result)\n    }\n\n/**\n * Creates a coroutine without a receiver and with result type [T].\n * This function creates a new, fresh instance of suspendable computation every time it is invoked.\n *\n * To start executing the created coroutine, invoke `resume(Unit)` on the returned [Continuation] instance.\n * The [completion] continuation is invoked when the coroutine completes with a result or an exception.\n * Subsequent invocation of any resume function on the resulting continuation will produce an [IllegalStateException].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <T> (suspend () -> T).createCoroutine(\n    completion: Continuation<T>\n): Continuation<Unit> =\n    SafeContinuation(createCoroutineUnintercepted(completion).intercepted(), COROUTINE_SUSPENDED)\n\n/**\n * Creates a coroutine with receiver type [R] and result type [T].\n * This function creates a new, fresh instance of suspendable computation every time it is invoked.\n *\n * To start executing the created coroutine, invoke `resume(Unit)` on the returned [Continuation] instance.\n * The [completion] continuation is invoked when the coroutine completes with a result or an exception.\n * Subsequent invocation of any resume function on the resulting continuation will produce an [IllegalStateException].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <R, T> (suspend R.() -> T).createCoroutine(\n    receiver: R,\n    completion: Continuation<T>\n): Continuation<Unit> =\n    SafeContinuation(createCoroutineUnintercepted(receiver, completion).intercepted(), COROUTINE_SUSPENDED)\n\n/**\n * Starts a coroutine without a receiver and with result type [T].\n * This function creates and starts a new, fresh instance of suspendable computation every time it is invoked.\n * The [completion] continuation is invoked when the coroutine completes with a result or an exception.\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <T> (suspend () -> T).startCoroutine(\n    completion: Continuation<T>\n) {\n    createCoroutineUnintercepted(completion).intercepted().resume(Unit)\n}\n\n/**\n * Starts a coroutine with receiver type [R] and result type [T].\n * This function creates and starts a new, fresh instance of suspendable computation every time it is invoked.\n * The [completion] continuation is invoked when the coroutine completes with a result or an exception.\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <R, T> (suspend R.() -> T).startCoroutine(\n    receiver: R,\n    completion: Continuation<T>\n) {\n    createCoroutineUnintercepted(receiver, completion).intercepted().resume(Unit)\n}\n\n/**\n * Obtains the current continuation instance inside suspend functions and suspends\n * the currently running coroutine.\n *\n * In this function both [Continuation.resume] and [Continuation.resumeWithException] can be used either synchronously in\n * the same stack-frame where the suspension function is run or asynchronously later in the same thread or\n * from a different thread of execution. Subsequent invocation of any resume function will produce an [IllegalStateException].\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic suspend inline fun <T> suspendCoroutine(crossinline block: (Continuation<T>) -> Unit): T =\n    suspendCoroutineUninterceptedOrReturn { c: Continuation<T> ->\n        val safe = SafeContinuation(c.intercepted())\n        block(safe)\n        safe.getOrThrow()\n    }\n\n/**\n * Returns the context of the current coroutine.\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"WRONG_MODIFIER_TARGET\")\n@InlineOnly\npublic suspend inline val coroutineContext: CoroutineContext\n    get() {\n        throw NotImplementedError(\"Implemented as intrinsic\")\n    }\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// NOTE: THIS FILE IS AUTO-GENERATED, DO NOT EDIT!\n// See github.com/kotlin/dukat for details\n\npackage org.w3c.dom\n\nimport kotlin.js.*\nimport org.khronos.webgl.*\nimport org.w3c.css.masking.*\nimport org.w3c.dom.clipboard.*\nimport org.w3c.dom.css.*\nimport org.w3c.dom.events.*\nimport org.w3c.dom.mediacapture.*\nimport org.w3c.dom.parsing.*\nimport org.w3c.dom.pointerevents.*\nimport org.w3c.dom.svg.*\nimport org.w3c.dom.url.*\nimport org.w3c.fetch.*\nimport org.w3c.files.*\nimport org.w3c.notifications.*\nimport org.w3c.performance.*\nimport org.w3c.workers.*\nimport org.w3c.xhr.*\n\npublic external abstract class HTMLAllCollection {\n    open val length: Int\n    fun item(nameOrIndex: String = definedExternally): UnionElementOrHTMLCollection?\n    fun namedItem(name: String): UnionElementOrHTMLCollection?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLAllCollection.get(index: Int): Element? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLAllCollection.get(name: String): UnionElementOrHTMLCollection? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [HTMLFormControlsCollection](https://developer.mozilla.org/en/docs/Web/API/HTMLFormControlsCollection) to Kotlin\n */\npublic external abstract class HTMLFormControlsCollection : HTMLCollection\n\n/**\n * Exposes the JavaScript [RadioNodeList](https://developer.mozilla.org/en/docs/Web/API/RadioNodeList) to Kotlin\n */\npublic external abstract class RadioNodeList : NodeList, UnionElementOrRadioNodeList {\n    open var value: String\n}\n\n/**\n * Exposes the JavaScript [HTMLOptionsCollection](https://developer.mozilla.org/en/docs/Web/API/HTMLOptionsCollection) to Kotlin\n */\npublic external abstract class HTMLOptionsCollection : HTMLCollection {\n    override var length: Int\n    open var selectedIndex: Int\n    fun add(element: UnionHTMLOptGroupElementOrHTMLOptionElement, before: dynamic = definedExternally)\n    fun remove(index: Int)\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLOptionsCollection.set(index: Int, option: HTMLOptionElement?) { asDynamic()[index] = option }\n\n/**\n * Exposes the JavaScript [HTMLElement](https://developer.mozilla.org/en/docs/Web/API/HTMLElement) to Kotlin\n */\npublic external abstract class HTMLElement : Element, GlobalEventHandlers, DocumentAndElementEventHandlers, ElementContentEditable, ElementCSSInlineStyle {\n    open var title: String\n    open var lang: String\n    open var translate: Boolean\n    open var dir: String\n    open val dataset: DOMStringMap\n    open var hidden: Boolean\n    open var tabIndex: Int\n    open var accessKey: String\n    open val accessKeyLabel: String\n    open var draggable: Boolean\n    open val dropzone: DOMTokenList\n    open var contextMenu: HTMLMenuElement?\n    open var spellcheck: Boolean\n    open var innerText: String\n    open val offsetParent: Element?\n    open val offsetTop: Int\n    open val offsetLeft: Int\n    open val offsetWidth: Int\n    open val offsetHeight: Int\n    fun click()\n    fun focus()\n    fun blur()\n    fun forceSpellCheck()\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLUnknownElement](https://developer.mozilla.org/en/docs/Web/API/HTMLUnknownElement) to Kotlin\n */\npublic external abstract class HTMLUnknownElement : HTMLElement {\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [DOMStringMap](https://developer.mozilla.org/en/docs/Web/API/DOMStringMap) to Kotlin\n */\npublic external abstract class DOMStringMap\n\n@kotlin.internal.InlineOnly\npublic inline operator fun DOMStringMap.get(name: String): String? = asDynamic()[name]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun DOMStringMap.set(name: String, value: String) { asDynamic()[name] = value }\n\n/**\n * Exposes the JavaScript [HTMLHtmlElement](https://developer.mozilla.org/en/docs/Web/API/HTMLHtmlElement) to Kotlin\n */\npublic external abstract class HTMLHtmlElement : HTMLElement {\n    open var version: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLHeadElement](https://developer.mozilla.org/en/docs/Web/API/HTMLHeadElement) to Kotlin\n */\npublic external abstract class HTMLHeadElement : HTMLElement {\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTitleElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTitleElement) to Kotlin\n */\npublic external abstract class HTMLTitleElement : HTMLElement {\n    open var text: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLBaseElement](https://developer.mozilla.org/en/docs/Web/API/HTMLBaseElement) to Kotlin\n */\npublic external abstract class HTMLBaseElement : HTMLElement {\n    open var href: String\n    open var target: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLLinkElement](https://developer.mozilla.org/en/docs/Web/API/HTMLLinkElement) to Kotlin\n */\npublic external abstract class HTMLLinkElement : HTMLElement, LinkStyle {\n    open var href: String\n    open var crossOrigin: String?\n    open var rel: String\n    open var `as`: RequestDestination\n    open val relList: DOMTokenList\n    open var media: String\n    open var nonce: String\n    open var hreflang: String\n    open var type: String\n    open val sizes: DOMTokenList\n    open var referrerPolicy: String\n    open var charset: String\n    open var rev: String\n    open var target: String\n    open var scope: String\n    open var workerType: WorkerType\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLMetaElement](https://developer.mozilla.org/en/docs/Web/API/HTMLMetaElement) to Kotlin\n */\npublic external abstract class HTMLMetaElement : HTMLElement {\n    open var name: String\n    open var httpEquiv: String\n    open var content: String\n    open var scheme: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLStyleElement](https://developer.mozilla.org/en/docs/Web/API/HTMLStyleElement) to Kotlin\n */\npublic external abstract class HTMLStyleElement : HTMLElement, LinkStyle {\n    open var media: String\n    open var nonce: String\n    open var type: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLBodyElement](https://developer.mozilla.org/en/docs/Web/API/HTMLBodyElement) to Kotlin\n */\npublic external abstract class HTMLBodyElement : HTMLElement, WindowEventHandlers {\n    open var text: String\n    open var link: String\n    open var vLink: String\n    open var aLink: String\n    open var bgColor: String\n    open var background: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLHeadingElement](https://developer.mozilla.org/en/docs/Web/API/HTMLHeadingElement) to Kotlin\n */\npublic external abstract class HTMLHeadingElement : HTMLElement {\n    open var align: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLParagraphElement](https://developer.mozilla.org/en/docs/Web/API/HTMLParagraphElement) to Kotlin\n */\npublic external abstract class HTMLParagraphElement : HTMLElement {\n    open var align: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLHRElement](https://developer.mozilla.org/en/docs/Web/API/HTMLHRElement) to Kotlin\n */\npublic external abstract class HTMLHRElement : HTMLElement {\n    open var align: String\n    open var color: String\n    open var noShade: Boolean\n    open var size: String\n    open var width: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLPreElement](https://developer.mozilla.org/en/docs/Web/API/HTMLPreElement) to Kotlin\n */\npublic external abstract class HTMLPreElement : HTMLElement {\n    open var width: Int\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLQuoteElement](https://developer.mozilla.org/en/docs/Web/API/HTMLQuoteElement) to Kotlin\n */\npublic external abstract class HTMLQuoteElement : HTMLElement {\n    open var cite: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLOListElement](https://developer.mozilla.org/en/docs/Web/API/HTMLOListElement) to Kotlin\n */\npublic external abstract class HTMLOListElement : HTMLElement {\n    open var reversed: Boolean\n    open var start: Int\n    open var type: String\n    open var compact: Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLUListElement](https://developer.mozilla.org/en/docs/Web/API/HTMLUListElement) to Kotlin\n */\npublic external abstract class HTMLUListElement : HTMLElement {\n    open var compact: Boolean\n    open var type: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLLIElement](https://developer.mozilla.org/en/docs/Web/API/HTMLLIElement) to Kotlin\n */\npublic external abstract class HTMLLIElement : HTMLElement {\n    open var value: Int\n    open var type: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLDListElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDListElement) to Kotlin\n */\npublic external abstract class HTMLDListElement : HTMLElement {\n    open var compact: Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLDivElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDivElement) to Kotlin\n */\npublic external abstract class HTMLDivElement : HTMLElement {\n    open var align: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLAnchorElement](https://developer.mozilla.org/en/docs/Web/API/HTMLAnchorElement) to Kotlin\n */\npublic external abstract class HTMLAnchorElement : HTMLElement, HTMLHyperlinkElementUtils {\n    open var target: String\n    open var download: String\n    open var ping: String\n    open var rel: String\n    open val relList: DOMTokenList\n    open var hreflang: String\n    open var type: String\n    open var text: String\n    open var referrerPolicy: String\n    open var coords: String\n    open var charset: String\n    open var name: String\n    open var rev: String\n    open var shape: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLDataElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDataElement) to Kotlin\n */\npublic external abstract class HTMLDataElement : HTMLElement {\n    open var value: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTimeElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTimeElement) to Kotlin\n */\npublic external abstract class HTMLTimeElement : HTMLElement {\n    open var dateTime: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLSpanElement](https://developer.mozilla.org/en/docs/Web/API/HTMLSpanElement) to Kotlin\n */\npublic external abstract class HTMLSpanElement : HTMLElement {\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLBRElement](https://developer.mozilla.org/en/docs/Web/API/HTMLBRElement) to Kotlin\n */\npublic external abstract class HTMLBRElement : HTMLElement {\n    open var clear: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLHyperlinkElementUtils](https://developer.mozilla.org/en/docs/Web/API/HTMLHyperlinkElementUtils) to Kotlin\n */\npublic external interface HTMLHyperlinkElementUtils {\n    var href: String\n    val origin: String\n    var protocol: String\n    var username: String\n    var password: String\n    var host: String\n    var hostname: String\n    var port: String\n    var pathname: String\n    var search: String\n    var hash: String\n}\n\n/**\n * Exposes the JavaScript [HTMLModElement](https://developer.mozilla.org/en/docs/Web/API/HTMLModElement) to Kotlin\n */\npublic external abstract class HTMLModElement : HTMLElement {\n    open var cite: String\n    open var dateTime: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLPictureElement](https://developer.mozilla.org/en/docs/Web/API/HTMLPictureElement) to Kotlin\n */\npublic external abstract class HTMLPictureElement : HTMLElement {\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLSourceElement](https://developer.mozilla.org/en/docs/Web/API/HTMLSourceElement) to Kotlin\n */\npublic external abstract class HTMLSourceElement : HTMLElement {\n    open var src: String\n    open var type: String\n    open var srcset: String\n    open var sizes: String\n    open var media: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLImageElement](https://developer.mozilla.org/en/docs/Web/API/HTMLImageElement) to Kotlin\n */\npublic external abstract class HTMLImageElement : HTMLElement, HTMLOrSVGImageElement, TexImageSource {\n    open var alt: String\n    open var src: String\n    open var srcset: String\n    open var sizes: String\n    open var crossOrigin: String?\n    open var useMap: String\n    open var isMap: Boolean\n    open var width: Int\n    open var height: Int\n    open val naturalWidth: Int\n    open val naturalHeight: Int\n    open val complete: Boolean\n    open val currentSrc: String\n    open var referrerPolicy: String\n    open var name: String\n    open var lowsrc: String\n    open var align: String\n    open var hspace: Int\n    open var vspace: Int\n    open var longDesc: String\n    open var border: String\n    open val x: Int\n    open val y: Int\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLIFrameElement](https://developer.mozilla.org/en/docs/Web/API/HTMLIFrameElement) to Kotlin\n */\npublic external abstract class HTMLIFrameElement : HTMLElement {\n    open var src: String\n    open var srcdoc: String\n    open var name: String\n    open val sandbox: DOMTokenList\n    open var allowFullscreen: Boolean\n    open var allowUserMedia: Boolean\n    open var width: String\n    open var height: String\n    open var referrerPolicy: String\n    open val contentDocument: Document?\n    open val contentWindow: Window?\n    open var align: String\n    open var scrolling: String\n    open var frameBorder: String\n    open var longDesc: String\n    open var marginHeight: String\n    open var marginWidth: String\n    fun getSVGDocument(): Document?\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLEmbedElement](https://developer.mozilla.org/en/docs/Web/API/HTMLEmbedElement) to Kotlin\n */\npublic external abstract class HTMLEmbedElement : HTMLElement {\n    open var src: String\n    open var type: String\n    open var width: String\n    open var height: String\n    open var align: String\n    open var name: String\n    fun getSVGDocument(): Document?\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLObjectElement](https://developer.mozilla.org/en/docs/Web/API/HTMLObjectElement) to Kotlin\n */\npublic external abstract class HTMLObjectElement : HTMLElement {\n    open var data: String\n    open var type: String\n    open var typeMustMatch: Boolean\n    open var name: String\n    open var useMap: String\n    open val form: HTMLFormElement?\n    open var width: String\n    open var height: String\n    open val contentDocument: Document?\n    open val contentWindow: Window?\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open var align: String\n    open var archive: String\n    open var code: String\n    open var declare: Boolean\n    open var hspace: Int\n    open var standby: String\n    open var vspace: Int\n    open var codeBase: String\n    open var codeType: String\n    open var border: String\n    fun getSVGDocument(): Document?\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLParamElement](https://developer.mozilla.org/en/docs/Web/API/HTMLParamElement) to Kotlin\n */\npublic external abstract class HTMLParamElement : HTMLElement {\n    open var name: String\n    open var value: String\n    open var type: String\n    open var valueType: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLVideoElement](https://developer.mozilla.org/en/docs/Web/API/HTMLVideoElement) to Kotlin\n */\npublic external abstract class HTMLVideoElement : HTMLMediaElement, CanvasImageSource, TexImageSource {\n    open var width: Int\n    open var height: Int\n    open val videoWidth: Int\n    open val videoHeight: Int\n    open var poster: String\n    open var playsInline: Boolean\n\n    companion object {\n        val NETWORK_EMPTY: Short\n        val NETWORK_IDLE: Short\n        val NETWORK_LOADING: Short\n        val NETWORK_NO_SOURCE: Short\n        val HAVE_NOTHING: Short\n        val HAVE_METADATA: Short\n        val HAVE_CURRENT_DATA: Short\n        val HAVE_FUTURE_DATA: Short\n        val HAVE_ENOUGH_DATA: Short\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLAudioElement](https://developer.mozilla.org/en/docs/Web/API/HTMLAudioElement) to Kotlin\n */\npublic external abstract class HTMLAudioElement : HTMLMediaElement {\n    companion object {\n        val NETWORK_EMPTY: Short\n        val NETWORK_IDLE: Short\n        val NETWORK_LOADING: Short\n        val NETWORK_NO_SOURCE: Short\n        val HAVE_NOTHING: Short\n        val HAVE_METADATA: Short\n        val HAVE_CURRENT_DATA: Short\n        val HAVE_FUTURE_DATA: Short\n        val HAVE_ENOUGH_DATA: Short\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTrackElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTrackElement) to Kotlin\n */\npublic external abstract class HTMLTrackElement : HTMLElement {\n    open var kind: String\n    open var src: String\n    open var srclang: String\n    open var label: String\n    open var default: Boolean\n    open val readyState: Short\n    open val track: TextTrack\n\n    companion object {\n        val NONE: Short\n        val LOADING: Short\n        val LOADED: Short\n        val ERROR: Short\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLMediaElement](https://developer.mozilla.org/en/docs/Web/API/HTMLMediaElement) to Kotlin\n */\npublic external abstract class HTMLMediaElement : HTMLElement {\n    open val error: MediaError?\n    open var src: String\n    open var srcObject: dynamic\n    open val currentSrc: String\n    open var crossOrigin: String?\n    open val networkState: Short\n    open var preload: String\n    open val buffered: TimeRanges\n    open val readyState: Short\n    open val seeking: Boolean\n    open var currentTime: Double\n    open val duration: Double\n    open val paused: Boolean\n    open var defaultPlaybackRate: Double\n    open var playbackRate: Double\n    open val played: TimeRanges\n    open val seekable: TimeRanges\n    open val ended: Boolean\n    open var autoplay: Boolean\n    open var loop: Boolean\n    open var controls: Boolean\n    open var volume: Double\n    open var muted: Boolean\n    open var defaultMuted: Boolean\n    open val audioTracks: AudioTrackList\n    open val videoTracks: VideoTrackList\n    open val textTracks: TextTrackList\n    fun load()\n    fun canPlayType(type: String): CanPlayTypeResult\n    fun fastSeek(time: Double)\n    fun getStartDate(): dynamic\n    fun play(): Promise<Unit>\n    fun pause()\n    fun addTextTrack(kind: TextTrackKind, label: String = definedExternally, language: String = definedExternally): TextTrack\n\n    companion object {\n        val NETWORK_EMPTY: Short\n        val NETWORK_IDLE: Short\n        val NETWORK_LOADING: Short\n        val NETWORK_NO_SOURCE: Short\n        val HAVE_NOTHING: Short\n        val HAVE_METADATA: Short\n        val HAVE_CURRENT_DATA: Short\n        val HAVE_FUTURE_DATA: Short\n        val HAVE_ENOUGH_DATA: Short\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [MediaError](https://developer.mozilla.org/en/docs/Web/API/MediaError) to Kotlin\n */\npublic external abstract class MediaError {\n    open val code: Short\n\n    companion object {\n        val MEDIA_ERR_ABORTED: Short\n        val MEDIA_ERR_NETWORK: Short\n        val MEDIA_ERR_DECODE: Short\n        val MEDIA_ERR_SRC_NOT_SUPPORTED: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [AudioTrackList](https://developer.mozilla.org/en/docs/Web/API/AudioTrackList) to Kotlin\n */\npublic external abstract class AudioTrackList : EventTarget {\n    open val length: Int\n    open var onchange: ((Event) -> dynamic)?\n    open var onaddtrack: ((TrackEvent) -> dynamic)?\n    open var onremovetrack: ((TrackEvent) -> dynamic)?\n    fun getTrackById(id: String): AudioTrack?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun AudioTrackList.get(index: Int): AudioTrack? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [AudioTrack](https://developer.mozilla.org/en/docs/Web/API/AudioTrack) to Kotlin\n */\npublic external abstract class AudioTrack : UnionAudioTrackOrTextTrackOrVideoTrack {\n    open val id: String\n    open val kind: String\n    open val label: String\n    open val language: String\n    open var enabled: Boolean\n}\n\n/**\n * Exposes the JavaScript [VideoTrackList](https://developer.mozilla.org/en/docs/Web/API/VideoTrackList) to Kotlin\n */\npublic external abstract class VideoTrackList : EventTarget {\n    open val length: Int\n    open val selectedIndex: Int\n    open var onchange: ((Event) -> dynamic)?\n    open var onaddtrack: ((TrackEvent) -> dynamic)?\n    open var onremovetrack: ((TrackEvent) -> dynamic)?\n    fun getTrackById(id: String): VideoTrack?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun VideoTrackList.get(index: Int): VideoTrack? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [VideoTrack](https://developer.mozilla.org/en/docs/Web/API/VideoTrack) to Kotlin\n */\npublic external abstract class VideoTrack : UnionAudioTrackOrTextTrackOrVideoTrack {\n    open val id: String\n    open val kind: String\n    open val label: String\n    open val language: String\n    open var selected: Boolean\n}\n\npublic external abstract class TextTrackList : EventTarget {\n    open val length: Int\n    open var onchange: ((Event) -> dynamic)?\n    open var onaddtrack: ((TrackEvent) -> dynamic)?\n    open var onremovetrack: ((TrackEvent) -> dynamic)?\n    fun getTrackById(id: String): TextTrack?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun TextTrackList.get(index: Int): TextTrack? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [TextTrack](https://developer.mozilla.org/en/docs/Web/API/TextTrack) to Kotlin\n */\npublic external abstract class TextTrack : EventTarget, UnionAudioTrackOrTextTrackOrVideoTrack {\n    open val kind: TextTrackKind\n    open val label: String\n    open val language: String\n    open val id: String\n    open val inBandMetadataTrackDispatchType: String\n    open var mode: TextTrackMode\n    open val cues: TextTrackCueList?\n    open val activeCues: TextTrackCueList?\n    open var oncuechange: ((Event) -> dynamic)?\n    fun addCue(cue: TextTrackCue)\n    fun removeCue(cue: TextTrackCue)\n}\n\npublic external abstract class TextTrackCueList {\n    open val length: Int\n    fun getCueById(id: String): TextTrackCue?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun TextTrackCueList.get(index: Int): TextTrackCue? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [TextTrackCue](https://developer.mozilla.org/en/docs/Web/API/TextTrackCue) to Kotlin\n */\npublic external abstract class TextTrackCue : EventTarget {\n    open val track: TextTrack?\n    open var id: String\n    open var startTime: Double\n    open var endTime: Double\n    open var pauseOnExit: Boolean\n    open var onenter: ((Event) -> dynamic)?\n    open var onexit: ((Event) -> dynamic)?\n}\n\n/**\n * Exposes the JavaScript [TimeRanges](https://developer.mozilla.org/en/docs/Web/API/TimeRanges) to Kotlin\n */\npublic external abstract class TimeRanges {\n    open val length: Int\n    fun start(index: Int): Double\n    fun end(index: Int): Double\n}\n\n/**\n * Exposes the JavaScript [TrackEvent](https://developer.mozilla.org/en/docs/Web/API/TrackEvent) to Kotlin\n */\npublic external open class TrackEvent(type: String, eventInitDict: TrackEventInit = definedExternally) : Event {\n    open val track: UnionAudioTrackOrTextTrackOrVideoTrack?\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface TrackEventInit : EventInit {\n    var track: UnionAudioTrackOrTextTrackOrVideoTrack? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun TrackEventInit(track: UnionAudioTrackOrTextTrackOrVideoTrack? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): TrackEventInit {\n    val o = js(\"({})\")\n    o[\"track\"] = track\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [HTMLMapElement](https://developer.mozilla.org/en/docs/Web/API/HTMLMapElement) to Kotlin\n */\npublic external abstract class HTMLMapElement : HTMLElement {\n    open var name: String\n    open val areas: HTMLCollection\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLAreaElement](https://developer.mozilla.org/en/docs/Web/API/HTMLAreaElement) to Kotlin\n */\npublic external abstract class HTMLAreaElement : HTMLElement, HTMLHyperlinkElementUtils {\n    open var alt: String\n    open var coords: String\n    open var shape: String\n    open var target: String\n    open var download: String\n    open var ping: String\n    open var rel: String\n    open val relList: DOMTokenList\n    open var referrerPolicy: String\n    open var noHref: Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTableElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableElement) to Kotlin\n */\npublic external abstract class HTMLTableElement : HTMLElement {\n    open var caption: HTMLTableCaptionElement?\n    open var tHead: HTMLTableSectionElement?\n    open var tFoot: HTMLTableSectionElement?\n    open val tBodies: HTMLCollection\n    open val rows: HTMLCollection\n    open var align: String\n    open var border: String\n    open var frame: String\n    open var rules: String\n    open var summary: String\n    open var width: String\n    open var bgColor: String\n    open var cellPadding: String\n    open var cellSpacing: String\n    fun createCaption(): HTMLTableCaptionElement\n    fun deleteCaption()\n    fun createTHead(): HTMLTableSectionElement\n    fun deleteTHead()\n    fun createTFoot(): HTMLTableSectionElement\n    fun deleteTFoot()\n    fun createTBody(): HTMLTableSectionElement\n    fun insertRow(index: Int = definedExternally): HTMLTableRowElement\n    fun deleteRow(index: Int)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTableCaptionElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableCaptionElement) to Kotlin\n */\npublic external abstract class HTMLTableCaptionElement : HTMLElement {\n    open var align: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTableColElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableColElement) to Kotlin\n */\npublic external abstract class HTMLTableColElement : HTMLElement {\n    open var span: Int\n    open var align: String\n    open var ch: String\n    open var chOff: String\n    open var vAlign: String\n    open var width: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTableSectionElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableSectionElement) to Kotlin\n */\npublic external abstract class HTMLTableSectionElement : HTMLElement {\n    open val rows: HTMLCollection\n    open var align: String\n    open var ch: String\n    open var chOff: String\n    open var vAlign: String\n    fun insertRow(index: Int = definedExternally): HTMLElement\n    fun deleteRow(index: Int)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTableRowElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableRowElement) to Kotlin\n */\npublic external abstract class HTMLTableRowElement : HTMLElement {\n    open val rowIndex: Int\n    open val sectionRowIndex: Int\n    open val cells: HTMLCollection\n    open var align: String\n    open var ch: String\n    open var chOff: String\n    open var vAlign: String\n    open var bgColor: String\n    fun insertCell(index: Int = definedExternally): HTMLElement\n    fun deleteCell(index: Int)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTableCellElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableCellElement) to Kotlin\n */\npublic external abstract class HTMLTableCellElement : HTMLElement {\n    open var colSpan: Int\n    open var rowSpan: Int\n    open var headers: String\n    open val cellIndex: Int\n    open var scope: String\n    open var abbr: String\n    open var align: String\n    open var axis: String\n    open var height: String\n    open var width: String\n    open var ch: String\n    open var chOff: String\n    open var noWrap: Boolean\n    open var vAlign: String\n    open var bgColor: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLFormElement](https://developer.mozilla.org/en/docs/Web/API/HTMLFormElement) to Kotlin\n */\npublic external abstract class HTMLFormElement : HTMLElement {\n    open var acceptCharset: String\n    open var action: String\n    open var autocomplete: String\n    open var enctype: String\n    open var encoding: String\n    open var method: String\n    open var name: String\n    open var noValidate: Boolean\n    open var target: String\n    open val elements: HTMLFormControlsCollection\n    open val length: Int\n    fun submit()\n    fun reset()\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLFormElement.get(index: Int): Element? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLFormElement.get(name: String): UnionElementOrRadioNodeList? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [HTMLLabelElement](https://developer.mozilla.org/en/docs/Web/API/HTMLLabelElement) to Kotlin\n */\npublic external abstract class HTMLLabelElement : HTMLElement {\n    open val form: HTMLFormElement?\n    open var htmlFor: String\n    open val control: HTMLElement?\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLInputElement](https://developer.mozilla.org/en/docs/Web/API/HTMLInputElement) to Kotlin\n */\npublic external abstract class HTMLInputElement : HTMLElement {\n    open var accept: String\n    open var alt: String\n    open var autocomplete: String\n    open var autofocus: Boolean\n    open var defaultChecked: Boolean\n    open var checked: Boolean\n    open var dirName: String\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open val files: FileList?\n    open var formAction: String\n    open var formEnctype: String\n    open var formMethod: String\n    open var formNoValidate: Boolean\n    open var formTarget: String\n    open var height: Int\n    open var indeterminate: Boolean\n    open var inputMode: String\n    open val list: HTMLElement?\n    open var max: String\n    open var maxLength: Int\n    open var min: String\n    open var minLength: Int\n    open var multiple: Boolean\n    open var name: String\n    open var pattern: String\n    open var placeholder: String\n    open var readOnly: Boolean\n    open var required: Boolean\n    open var size: Int\n    open var src: String\n    open var step: String\n    open var type: String\n    open var defaultValue: String\n    open var value: String\n    open var valueAsDate: dynamic\n    open var valueAsNumber: Double\n    open var width: Int\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    open var selectionStart: Int?\n    open var selectionEnd: Int?\n    open var selectionDirection: String?\n    open var align: String\n    open var useMap: String\n    fun stepUp(n: Int = definedExternally)\n    fun stepDown(n: Int = definedExternally)\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String)\n    fun select()\n    fun setRangeText(replacement: String)\n    fun setRangeText(replacement: String, start: Int, end: Int, selectionMode: SelectionMode = definedExternally)\n    fun setSelectionRange(start: Int, end: Int, direction: String = definedExternally)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLButtonElement](https://developer.mozilla.org/en/docs/Web/API/HTMLButtonElement) to Kotlin\n */\npublic external abstract class HTMLButtonElement : HTMLElement {\n    open var autofocus: Boolean\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var formAction: String\n    open var formEnctype: String\n    open var formMethod: String\n    open var formNoValidate: Boolean\n    open var formTarget: String\n    open var name: String\n    open var type: String\n    open var value: String\n    open var menu: HTMLMenuElement?\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLSelectElement](https://developer.mozilla.org/en/docs/Web/API/HTMLSelectElement) to Kotlin\n */\npublic external abstract class HTMLSelectElement : HTMLElement, ItemArrayLike<Element> {\n    open var autocomplete: String\n    open var autofocus: Boolean\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var multiple: Boolean\n    open var name: String\n    open var required: Boolean\n    open var size: Int\n    open val type: String\n    open val options: HTMLOptionsCollection\n    override var length: Int\n    open val selectedOptions: HTMLCollection\n    open var selectedIndex: Int\n    open var value: String\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    fun namedItem(name: String): HTMLOptionElement?\n    fun add(element: UnionHTMLOptGroupElementOrHTMLOptionElement, before: dynamic = definedExternally)\n    fun remove(index: Int)\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String)\n    override fun item(index: Int): Element?\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLSelectElement.get(index: Int): Element? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLSelectElement.set(index: Int, option: HTMLOptionElement?) { asDynamic()[index] = option }\n\n/**\n * Exposes the JavaScript [HTMLDataListElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDataListElement) to Kotlin\n */\npublic external abstract class HTMLDataListElement : HTMLElement {\n    open val options: HTMLCollection\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLOptGroupElement](https://developer.mozilla.org/en/docs/Web/API/HTMLOptGroupElement) to Kotlin\n */\npublic external abstract class HTMLOptGroupElement : HTMLElement, UnionHTMLOptGroupElementOrHTMLOptionElement {\n    open var disabled: Boolean\n    open var label: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLOptionElement](https://developer.mozilla.org/en/docs/Web/API/HTMLOptionElement) to Kotlin\n */\npublic external abstract class HTMLOptionElement : HTMLElement, UnionHTMLOptGroupElementOrHTMLOptionElement {\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var label: String\n    open var defaultSelected: Boolean\n    open var selected: Boolean\n    open var value: String\n    open var text: String\n    open val index: Int\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTextAreaElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTextAreaElement) to Kotlin\n */\npublic external abstract class HTMLTextAreaElement : HTMLElement {\n    open var autocomplete: String\n    open var autofocus: Boolean\n    open var cols: Int\n    open var dirName: String\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var inputMode: String\n    open var maxLength: Int\n    open var minLength: Int\n    open var name: String\n    open var placeholder: String\n    open var readOnly: Boolean\n    open var required: Boolean\n    open var rows: Int\n    open var wrap: String\n    open val type: String\n    open var defaultValue: String\n    open var value: String\n    open val textLength: Int\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    open var selectionStart: Int?\n    open var selectionEnd: Int?\n    open var selectionDirection: String?\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String)\n    fun select()\n    fun setRangeText(replacement: String)\n    fun setRangeText(replacement: String, start: Int, end: Int, selectionMode: SelectionMode = definedExternally)\n    fun setSelectionRange(start: Int, end: Int, direction: String = definedExternally)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLKeygenElement](https://developer.mozilla.org/en/docs/Web/API/HTMLKeygenElement) to Kotlin\n */\npublic external abstract class HTMLKeygenElement : HTMLElement {\n    open var autofocus: Boolean\n    open var challenge: String\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var keytype: String\n    open var name: String\n    open val type: String\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLOutputElement](https://developer.mozilla.org/en/docs/Web/API/HTMLOutputElement) to Kotlin\n */\npublic external abstract class HTMLOutputElement : HTMLElement {\n    open val htmlFor: DOMTokenList\n    open val form: HTMLFormElement?\n    open var name: String\n    open val type: String\n    open var defaultValue: String\n    open var value: String\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLProgressElement](https://developer.mozilla.org/en/docs/Web/API/HTMLProgressElement) to Kotlin\n */\npublic external abstract class HTMLProgressElement : HTMLElement {\n    open var value: Double\n    open var max: Double\n    open val position: Double\n    open val labels: NodeList\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLMeterElement](https://developer.mozilla.org/en/docs/Web/API/HTMLMeterElement) to Kotlin\n */\npublic external abstract class HTMLMeterElement : HTMLElement {\n    open var value: Double\n    open var min: Double\n    open var max: Double\n    open var low: Double\n    open var high: Double\n    open var optimum: Double\n    open val labels: NodeList\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLFieldSetElement](https://developer.mozilla.org/en/docs/Web/API/HTMLFieldSetElement) to Kotlin\n */\npublic external abstract class HTMLFieldSetElement : HTMLElement {\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var name: String\n    open val type: String\n    open val elements: HTMLCollection\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLLegendElement](https://developer.mozilla.org/en/docs/Web/API/HTMLLegendElement) to Kotlin\n */\npublic external abstract class HTMLLegendElement : HTMLElement {\n    open val form: HTMLFormElement?\n    open var align: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [ValidityState](https://developer.mozilla.org/en/docs/Web/API/ValidityState) to Kotlin\n */\npublic external abstract class ValidityState {\n    open val valueMissing: Boolean\n    open val typeMismatch: Boolean\n    open val patternMismatch: Boolean\n    open val tooLong: Boolean\n    open val tooShort: Boolean\n    open val rangeUnderflow: Boolean\n    open val rangeOverflow: Boolean\n    open val stepMismatch: Boolean\n    open val badInput: Boolean\n    open val customError: Boolean\n    open val valid: Boolean\n}\n\n/**\n * Exposes the JavaScript [HTMLDetailsElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDetailsElement) to Kotlin\n */\npublic external abstract class HTMLDetailsElement : HTMLElement {\n    open var open: Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external abstract class HTMLMenuElement : HTMLElement {\n    open var type: String\n    open var label: String\n    open var compact: Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external abstract class HTMLMenuItemElement : HTMLElement {\n    open var type: String\n    open var label: String\n    open var icon: String\n    open var disabled: Boolean\n    open var checked: Boolean\n    open var radiogroup: String\n    open var default: Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external open class RelatedEvent(type: String, eventInitDict: RelatedEventInit = definedExternally) : Event {\n    open val relatedTarget: EventTarget?\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface RelatedEventInit : EventInit {\n    var relatedTarget: EventTarget? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun RelatedEventInit(relatedTarget: EventTarget? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): RelatedEventInit {\n    val o = js(\"({})\")\n    o[\"relatedTarget\"] = relatedTarget\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [HTMLDialogElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDialogElement) to Kotlin\n */\npublic external abstract class HTMLDialogElement : HTMLElement {\n    open var open: Boolean\n    open var returnValue: String\n    fun show(anchor: UnionElementOrMouseEvent = definedExternally)\n    fun showModal(anchor: UnionElementOrMouseEvent = definedExternally)\n    fun close(returnValue: String = definedExternally)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLScriptElement](https://developer.mozilla.org/en/docs/Web/API/HTMLScriptElement) to Kotlin\n */\npublic external abstract class HTMLScriptElement : HTMLElement, HTMLOrSVGScriptElement {\n    open var src: String\n    open var type: String\n    open var charset: String\n    open var async: Boolean\n    open var defer: Boolean\n    open var crossOrigin: String?\n    open var text: String\n    open var nonce: String\n    open var event: String\n    open var htmlFor: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTemplateElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTemplateElement) to Kotlin\n */\npublic external abstract class HTMLTemplateElement : HTMLElement {\n    open val content: DocumentFragment\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLSlotElement](https://developer.mozilla.org/en/docs/Web/API/HTMLSlotElement) to Kotlin\n */\npublic external abstract class HTMLSlotElement : HTMLElement {\n    open var name: String\n    fun assignedNodes(options: AssignedNodesOptions = definedExternally): Array<Node>\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external interface AssignedNodesOptions {\n    var flatten: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun AssignedNodesOptions(flatten: Boolean? = false): AssignedNodesOptions {\n    val o = js(\"({})\")\n    o[\"flatten\"] = flatten\n    return o\n}\n\n/**\n * Exposes the JavaScript [HTMLCanvasElement](https://developer.mozilla.org/en/docs/Web/API/HTMLCanvasElement) to Kotlin\n */\npublic external abstract class HTMLCanvasElement : HTMLElement, CanvasImageSource, TexImageSource {\n    open var width: Int\n    open var height: Int\n    fun getContext(contextId: String, vararg arguments: Any?): RenderingContext?\n    fun toDataURL(type: String = definedExternally, quality: Any? = definedExternally): String\n    fun toBlob(_callback: (Blob?) -> Unit, type: String = definedExternally, quality: Any? = definedExternally)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external interface CanvasRenderingContext2DSettings {\n    var alpha: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun CanvasRenderingContext2DSettings(alpha: Boolean? = true): CanvasRenderingContext2DSettings {\n    val o = js(\"({})\")\n    o[\"alpha\"] = alpha\n    return o\n}\n\n/**\n * Exposes the JavaScript [CanvasRenderingContext2D](https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D) to Kotlin\n */\npublic external abstract class CanvasRenderingContext2D : CanvasState, CanvasTransform, CanvasCompositing, CanvasImageSmoothing, CanvasFillStrokeStyles, CanvasShadowStyles, CanvasFilters, CanvasRect, CanvasDrawPath, CanvasUserInterface, CanvasText, CanvasDrawImage, CanvasHitRegion, CanvasImageData, CanvasPathDrawingStyles, CanvasTextDrawingStyles, CanvasPath, RenderingContext {\n    open val canvas: HTMLCanvasElement\n}\n\npublic external interface CanvasState {\n    fun save()\n    fun restore()\n}\n\npublic external interface CanvasTransform {\n    fun scale(x: Double, y: Double)\n    fun rotate(angle: Double)\n    fun translate(x: Double, y: Double)\n    fun transform(a: Double, b: Double, c: Double, d: Double, e: Double, f: Double)\n    fun getTransform(): DOMMatrix\n    fun setTransform(a: Double, b: Double, c: Double, d: Double, e: Double, f: Double)\n    fun setTransform(transform: dynamic = definedExternally)\n    fun resetTransform()\n}\n\npublic external interface CanvasCompositing {\n    var globalAlpha: Double\n    var globalCompositeOperation: String\n}\n\npublic external interface CanvasImageSmoothing {\n    var imageSmoothingEnabled: Boolean\n    var imageSmoothingQuality: ImageSmoothingQuality\n}\n\npublic external interface CanvasFillStrokeStyles {\n    var strokeStyle: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n    var fillStyle: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n    fun createLinearGradient(x0: Double, y0: Double, x1: Double, y1: Double): CanvasGradient\n    fun createRadialGradient(x0: Double, y0: Double, r0: Double, x1: Double, y1: Double, r1: Double): CanvasGradient\n    fun createPattern(image: CanvasImageSource, repetition: String): CanvasPattern?\n}\n\npublic external interface CanvasShadowStyles {\n    var shadowOffsetX: Double\n    var shadowOffsetY: Double\n    var shadowBlur: Double\n    var shadowColor: String\n}\n\npublic external interface CanvasFilters {\n    var filter: String\n}\n\npublic external interface CanvasRect {\n    fun clearRect(x: Double, y: Double, w: Double, h: Double)\n    fun fillRect(x: Double, y: Double, w: Double, h: Double)\n    fun strokeRect(x: Double, y: Double, w: Double, h: Double)\n}\n\npublic external interface CanvasDrawPath {\n    fun beginPath()\n    fun fill(fillRule: CanvasFillRule = definedExternally)\n    fun fill(path: Path2D, fillRule: CanvasFillRule = definedExternally)\n    fun stroke()\n    fun stroke(path: Path2D)\n    fun clip(fillRule: CanvasFillRule = definedExternally)\n    fun clip(path: Path2D, fillRule: CanvasFillRule = definedExternally)\n    fun resetClip()\n    fun isPointInPath(x: Double, y: Double, fillRule: CanvasFillRule = definedExternally): Boolean\n    fun isPointInPath(path: Path2D, x: Double, y: Double, fillRule: CanvasFillRule = definedExternally): Boolean\n    fun isPointInStroke(x: Double, y: Double): Boolean\n    fun isPointInStroke(path: Path2D, x: Double, y: Double): Boolean\n}\n\npublic external interface CanvasUserInterface {\n    fun drawFocusIfNeeded(element: Element)\n    fun drawFocusIfNeeded(path: Path2D, element: Element)\n    fun scrollPathIntoView()\n    fun scrollPathIntoView(path: Path2D)\n}\n\npublic external interface CanvasText {\n    fun fillText(text: String, x: Double, y: Double, maxWidth: Double = definedExternally)\n    fun strokeText(text: String, x: Double, y: Double, maxWidth: Double = definedExternally)\n    fun measureText(text: String): TextMetrics\n}\n\npublic external interface CanvasDrawImage {\n    fun drawImage(image: CanvasImageSource, dx: Double, dy: Double)\n    fun drawImage(image: CanvasImageSource, dx: Double, dy: Double, dw: Double, dh: Double)\n    fun drawImage(image: CanvasImageSource, sx: Double, sy: Double, sw: Double, sh: Double, dx: Double, dy: Double, dw: Double, dh: Double)\n}\n\npublic external interface CanvasHitRegion {\n    fun addHitRegion(options: HitRegionOptions = definedExternally)\n    fun removeHitRegion(id: String)\n    fun clearHitRegions()\n}\n\npublic external interface CanvasImageData {\n    fun createImageData(sw: Double, sh: Double): ImageData\n    fun createImageData(imagedata: ImageData): ImageData\n    fun getImageData(sx: Double, sy: Double, sw: Double, sh: Double): ImageData\n    fun putImageData(imagedata: ImageData, dx: Double, dy: Double)\n    fun putImageData(imagedata: ImageData, dx: Double, dy: Double, dirtyX: Double, dirtyY: Double, dirtyWidth: Double, dirtyHeight: Double)\n}\n\npublic external interface CanvasPathDrawingStyles {\n    var lineWidth: Double\n    var lineCap: CanvasLineCap\n    var lineJoin: CanvasLineJoin\n    var miterLimit: Double\n    var lineDashOffset: Double\n    fun setLineDash(segments: Array<Double>)\n    fun getLineDash(): Array<Double>\n}\n\npublic external interface CanvasTextDrawingStyles {\n    var font: String\n    var textAlign: CanvasTextAlign\n    var textBaseline: CanvasTextBaseline\n    var direction: CanvasDirection\n}\n\npublic external interface CanvasPath {\n    fun closePath()\n    fun moveTo(x: Double, y: Double)\n    fun lineTo(x: Double, y: Double)\n    fun quadraticCurveTo(cpx: Double, cpy: Double, x: Double, y: Double)\n    fun bezierCurveTo(cp1x: Double, cp1y: Double, cp2x: Double, cp2y: Double, x: Double, y: Double)\n    fun arcTo(x1: Double, y1: Double, x2: Double, y2: Double, radius: Double)\n    fun arcTo(x1: Double, y1: Double, x2: Double, y2: Double, radiusX: Double, radiusY: Double, rotation: Double)\n    fun rect(x: Double, y: Double, w: Double, h: Double)\n    fun arc(x: Double, y: Double, radius: Double, startAngle: Double, endAngle: Double, anticlockwise: Boolean = definedExternally)\n    fun ellipse(x: Double, y: Double, radiusX: Double, radiusY: Double, rotation: Double, startAngle: Double, endAngle: Double, anticlockwise: Boolean = definedExternally)\n}\n\n/**\n * Exposes the JavaScript [CanvasGradient](https://developer.mozilla.org/en/docs/Web/API/CanvasGradient) to Kotlin\n */\npublic external abstract class CanvasGradient {\n    fun addColorStop(offset: Double, color: String)\n}\n\n/**\n * Exposes the JavaScript [CanvasPattern](https://developer.mozilla.org/en/docs/Web/API/CanvasPattern) to Kotlin\n */\npublic external abstract class CanvasPattern {\n    fun setTransform(transform: dynamic = definedExternally)\n}\n\n/**\n * Exposes the JavaScript [TextMetrics](https://developer.mozilla.org/en/docs/Web/API/TextMetrics) to Kotlin\n */\npublic external abstract class TextMetrics {\n    open val width: Double\n    open val actualBoundingBoxLeft: Double\n    open val actualBoundingBoxRight: Double\n    open val fontBoundingBoxAscent: Double\n    open val fontBoundingBoxDescent: Double\n    open val actualBoundingBoxAscent: Double\n    open val actualBoundingBoxDescent: Double\n    open val emHeightAscent: Double\n    open val emHeightDescent: Double\n    open val hangingBaseline: Double\n    open val alphabeticBaseline: Double\n    open val ideographicBaseline: Double\n}\n\npublic external interface HitRegionOptions {\n    var path: Path2D? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var fillRule: CanvasFillRule? /* = CanvasFillRule.NONZERO */\n        get() = definedExternally\n        set(value) = definedExternally\n    var id: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var parentID: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var cursor: String? /* = \"inherit\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var control: Element? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var label: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var role: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun HitRegionOptions(path: Path2D? = null, fillRule: CanvasFillRule? = CanvasFillRule.NONZERO, id: String? = \"\", parentID: String? = null, cursor: String? = \"inherit\", control: Element? = null, label: String? = null, role: String? = null): HitRegionOptions {\n    val o = js(\"({})\")\n    o[\"path\"] = path\n    o[\"fillRule\"] = fillRule\n    o[\"id\"] = id\n    o[\"parentID\"] = parentID\n    o[\"cursor\"] = cursor\n    o[\"control\"] = control\n    o[\"label\"] = label\n    o[\"role\"] = role\n    return o\n}\n\n/**\n * Exposes the JavaScript [ImageData](https://developer.mozilla.org/en/docs/Web/API/ImageData) to Kotlin\n */\npublic external open class ImageData : ImageBitmapSource, TexImageSource {\n    constructor(sw: Int, sh: Int)\n    constructor(data: Uint8ClampedArray, sw: Int, sh: Int = definedExternally)\n    open val width: Int\n    open val height: Int\n    open val data: Uint8ClampedArray\n}\n\n/**\n * Exposes the JavaScript [Path2D](https://developer.mozilla.org/en/docs/Web/API/Path2D) to Kotlin\n */\npublic external open class Path2D() : CanvasPath {\n    constructor(path: Path2D)\n    constructor(paths: Array<Path2D>, fillRule: CanvasFillRule = definedExternally)\n    constructor(d: String)\n    fun addPath(path: Path2D, transform: dynamic = definedExternally)\n    override fun closePath()\n    override fun moveTo(x: Double, y: Double)\n    override fun lineTo(x: Double, y: Double)\n    override fun quadraticCurveTo(cpx: Double, cpy: Double, x: Double, y: Double)\n    override fun bezierCurveTo(cp1x: Double, cp1y: Double, cp2x: Double, cp2y: Double, x: Double, y: Double)\n    override fun arcTo(x1: Double, y1: Double, x2: Double, y2: Double, radius: Double)\n    override fun arcTo(x1: Double, y1: Double, x2: Double, y2: Double, radiusX: Double, radiusY: Double, rotation: Double)\n    override fun rect(x: Double, y: Double, w: Double, h: Double)\n    override fun arc(x: Double, y: Double, radius: Double, startAngle: Double, endAngle: Double, anticlockwise: Boolean /* = definedExternally */)\n    override fun ellipse(x: Double, y: Double, radiusX: Double, radiusY: Double, rotation: Double, startAngle: Double, endAngle: Double, anticlockwise: Boolean /* = definedExternally */)\n}\n\n/**\n * Exposes the JavaScript [ImageBitmapRenderingContext](https://developer.mozilla.org/en/docs/Web/API/ImageBitmapRenderingContext) to Kotlin\n */\npublic external abstract class ImageBitmapRenderingContext {\n    open val canvas: HTMLCanvasElement\n    fun transferFromImageBitmap(bitmap: ImageBitmap?)\n}\n\npublic external interface ImageBitmapRenderingContextSettings {\n    var alpha: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ImageBitmapRenderingContextSettings(alpha: Boolean? = true): ImageBitmapRenderingContextSettings {\n    val o = js(\"({})\")\n    o[\"alpha\"] = alpha\n    return o\n}\n\n/**\n * Exposes the JavaScript [CustomElementRegistry](https://developer.mozilla.org/en/docs/Web/API/CustomElementRegistry) to Kotlin\n */\npublic external abstract class CustomElementRegistry {\n    fun define(name: String, constructor: () -> dynamic, options: ElementDefinitionOptions = definedExternally)\n    fun get(name: String): Any?\n    fun whenDefined(name: String): Promise<Unit>\n}\n\npublic external interface ElementDefinitionOptions {\n    var extends: String?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ElementDefinitionOptions(extends: String? = undefined): ElementDefinitionOptions {\n    val o = js(\"({})\")\n    o[\"extends\"] = extends\n    return o\n}\n\npublic external interface ElementContentEditable {\n    var contentEditable: String\n    val isContentEditable: Boolean\n}\n\n/**\n * Exposes the JavaScript [DataTransfer](https://developer.mozilla.org/en/docs/Web/API/DataTransfer) to Kotlin\n */\npublic external abstract class DataTransfer {\n    open var dropEffect: String\n    open var effectAllowed: String\n    open val items: DataTransferItemList\n    open val types: Array<out String>\n    open val files: FileList\n    fun setDragImage(image: Element, x: Int, y: Int)\n    fun getData(format: String): String\n    fun setData(format: String, data: String)\n    fun clearData(format: String = definedExternally)\n}\n\n/**\n * Exposes the JavaScript [DataTransferItemList](https://developer.mozilla.org/en/docs/Web/API/DataTransferItemList) to Kotlin\n */\npublic external abstract class DataTransferItemList {\n    open val length: Int\n    fun add(data: String, type: String): DataTransferItem?\n    fun add(data: File): DataTransferItem?\n    fun remove(index: Int)\n    fun clear()\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun DataTransferItemList.get(index: Int): DataTransferItem? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [DataTransferItem](https://developer.mozilla.org/en/docs/Web/API/DataTransferItem) to Kotlin\n */\npublic external abstract class DataTransferItem {\n    open val kind: String\n    open val type: String\n    fun getAsString(_callback: ((String) -> Unit)?)\n    fun getAsFile(): File?\n}\n\n/**\n * Exposes the JavaScript [DragEvent](https://developer.mozilla.org/en/docs/Web/API/DragEvent) to Kotlin\n */\npublic external open class DragEvent(type: String, eventInitDict: DragEventInit = definedExternally) : MouseEvent {\n    open val dataTransfer: DataTransfer?\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface DragEventInit : MouseEventInit {\n    var dataTransfer: DataTransfer? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun DragEventInit(dataTransfer: DataTransfer? = null, screenX: Int? = 0, screenY: Int? = 0, clientX: Int? = 0, clientY: Int? = 0, button: Short? = 0, buttons: Short? = 0, relatedTarget: EventTarget? = null, region: String? = null, ctrlKey: Boolean? = false, shiftKey: Boolean? = false, altKey: Boolean? = false, metaKey: Boolean? = false, modifierAltGraph: Boolean? = false, modifierCapsLock: Boolean? = false, modifierFn: Boolean? = false, modifierFnLock: Boolean? = false, modifierHyper: Boolean? = false, modifierNumLock: Boolean? = false, modifierScrollLock: Boolean? = false, modifierSuper: Boolean? = false, modifierSymbol: Boolean? = false, modifierSymbolLock: Boolean? = false, view: Window? = null, detail: Int? = 0, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): DragEventInit {\n    val o = js(\"({})\")\n    o[\"dataTransfer\"] = dataTransfer\n    o[\"screenX\"] = screenX\n    o[\"screenY\"] = screenY\n    o[\"clientX\"] = clientX\n    o[\"clientY\"] = clientY\n    o[\"button\"] = button\n    o[\"buttons\"] = buttons\n    o[\"relatedTarget\"] = relatedTarget\n    o[\"region\"] = region\n    o[\"ctrlKey\"] = ctrlKey\n    o[\"shiftKey\"] = shiftKey\n    o[\"altKey\"] = altKey\n    o[\"metaKey\"] = metaKey\n    o[\"modifierAltGraph\"] = modifierAltGraph\n    o[\"modifierCapsLock\"] = modifierCapsLock\n    o[\"modifierFn\"] = modifierFn\n    o[\"modifierFnLock\"] = modifierFnLock\n    o[\"modifierHyper\"] = modifierHyper\n    o[\"modifierNumLock\"] = modifierNumLock\n    o[\"modifierScrollLock\"] = modifierScrollLock\n    o[\"modifierSuper\"] = modifierSuper\n    o[\"modifierSymbol\"] = modifierSymbol\n    o[\"modifierSymbolLock\"] = modifierSymbolLock\n    o[\"view\"] = view\n    o[\"detail\"] = detail\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [Window](https://developer.mozilla.org/en/docs/Web/API/Window) to Kotlin\n */\npublic external abstract class Window : EventTarget, GlobalEventHandlers, WindowEventHandlers, WindowOrWorkerGlobalScope, WindowSessionStorage, WindowLocalStorage, GlobalPerformance, UnionMessagePortOrWindowProxy {\n    open val window: Window\n    open val self: Window\n    open val document: Document\n    open var name: String\n    open val location: Location\n    open val history: History\n    open val customElements: CustomElementRegistry\n    open val locationbar: BarProp\n    open val menubar: BarProp\n    open val personalbar: BarProp\n    open val scrollbars: BarProp\n    open val statusbar: BarProp\n    open val toolbar: BarProp\n    open var status: String\n    open val closed: Boolean\n    open val frames: Window\n    open val length: Int\n    open val top: Window\n    open var opener: Any?\n    open val parent: Window\n    open val frameElement: Element?\n    open val navigator: Navigator\n    open val applicationCache: ApplicationCache\n    open val external: External\n    open val screen: Screen\n    open val innerWidth: Int\n    open val innerHeight: Int\n    open val scrollX: Double\n    open val pageXOffset: Double\n    open val scrollY: Double\n    open val pageYOffset: Double\n    open val screenX: Int\n    open val screenY: Int\n    open val outerWidth: Int\n    open val outerHeight: Int\n    open val devicePixelRatio: Double\n    fun close()\n    fun stop()\n    fun focus()\n    fun blur()\n    fun open(url: String = definedExternally, target: String = definedExternally, features: String = definedExternally): Window?\n    fun alert()\n    fun alert(message: String)\n    fun confirm(message: String = definedExternally): Boolean\n    fun prompt(message: String = definedExternally, default: String = definedExternally): String?\n    fun print()\n    fun requestAnimationFrame(callback: (Double) -> Unit): Int\n    fun cancelAnimationFrame(handle: Int)\n    fun postMessage(message: Any?, targetOrigin: String, transfer: Array<dynamic> = definedExternally)\n    fun captureEvents()\n    fun releaseEvents()\n    fun matchMedia(query: String): MediaQueryList\n    fun moveTo(x: Int, y: Int)\n    fun moveBy(x: Int, y: Int)\n    fun resizeTo(x: Int, y: Int)\n    fun resizeBy(x: Int, y: Int)\n    fun scroll(options: ScrollToOptions = definedExternally)\n    fun scroll(x: Double, y: Double)\n    fun scrollTo(options: ScrollToOptions = definedExternally)\n    fun scrollTo(x: Double, y: Double)\n    fun scrollBy(options: ScrollToOptions = definedExternally)\n    fun scrollBy(x: Double, y: Double)\n    fun getComputedStyle(elt: Element, pseudoElt: String? = definedExternally): CSSStyleDeclaration\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Window.get(name: String): dynamic = asDynamic()[name]\n\npublic external abstract class BarProp {\n    open val visible: Boolean\n}\n\n/**\n * Exposes the JavaScript [History](https://developer.mozilla.org/en/docs/Web/API/History) to Kotlin\n */\npublic external abstract class History {\n    open val length: Int\n    open var scrollRestoration: ScrollRestoration\n    open val state: Any?\n    fun go(delta: Int = definedExternally)\n    fun back()\n    fun forward()\n    fun pushState(data: Any?, title: String, url: String? = definedExternally)\n    fun replaceState(data: Any?, title: String, url: String? = definedExternally)\n}\n\n/**\n * Exposes the JavaScript [Location](https://developer.mozilla.org/en/docs/Web/API/Location) to Kotlin\n */\npublic external abstract class Location {\n    open var href: String\n    open val origin: String\n    open var protocol: String\n    open var host: String\n    open var hostname: String\n    open var port: String\n    open var pathname: String\n    open var search: String\n    open var hash: String\n    open val ancestorOrigins: Array<out String>\n    fun assign(url: String)\n    fun replace(url: String)\n    fun reload()\n}\n\n/**\n * Exposes the JavaScript [PopStateEvent](https://developer.mozilla.org/en/docs/Web/API/PopStateEvent) to Kotlin\n */\npublic external open class PopStateEvent(type: String, eventInitDict: PopStateEventInit = definedExternally) : Event {\n    open val state: Any?\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface PopStateEventInit : EventInit {\n    var state: Any? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun PopStateEventInit(state: Any? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): PopStateEventInit {\n    val o = js(\"({})\")\n    o[\"state\"] = state\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [HashChangeEvent](https://developer.mozilla.org/en/docs/Web/API/HashChangeEvent) to Kotlin\n */\npublic external open class HashChangeEvent(type: String, eventInitDict: HashChangeEventInit = definedExternally) : Event {\n    open val oldURL: String\n    open val newURL: String\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface HashChangeEventInit : EventInit {\n    var oldURL: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var newURL: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun HashChangeEventInit(oldURL: String? = \"\", newURL: String? = \"\", bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): HashChangeEventInit {\n    val o = js(\"({})\")\n    o[\"oldURL\"] = oldURL\n    o[\"newURL\"] = newURL\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [PageTransitionEvent](https://developer.mozilla.org/en/docs/Web/API/PageTransitionEvent) to Kotlin\n */\npublic external open class PageTransitionEvent(type: String, eventInitDict: PageTransitionEventInit = definedExternally) : Event {\n    open val persisted: Boolean\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface PageTransitionEventInit : EventInit {\n    var persisted: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun PageTransitionEventInit(persisted: Boolean? = false, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): PageTransitionEventInit {\n    val o = js(\"({})\")\n    o[\"persisted\"] = persisted\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [BeforeUnloadEvent](https://developer.mozilla.org/en/docs/Web/API/BeforeUnloadEvent) to Kotlin\n */\npublic external open class BeforeUnloadEvent : Event {\n    var returnValue: String\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external abstract class ApplicationCache : EventTarget {\n    open val status: Short\n    open var onchecking: ((Event) -> dynamic)?\n    open var onerror: ((Event) -> dynamic)?\n    open var onnoupdate: ((Event) -> dynamic)?\n    open var ondownloading: ((Event) -> dynamic)?\n    open var onprogress: ((ProgressEvent) -> dynamic)?\n    open var onupdateready: ((Event) -> dynamic)?\n    open var oncached: ((Event) -> dynamic)?\n    open var onobsolete: ((Event) -> dynamic)?\n    fun update()\n    fun abort()\n    fun swapCache()\n\n    companion object {\n        val UNCACHED: Short\n        val IDLE: Short\n        val CHECKING: Short\n        val DOWNLOADING: Short\n        val UPDATEREADY: Short\n        val OBSOLETE: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [NavigatorOnLine](https://developer.mozilla.org/en/docs/Web/API/NavigatorOnLine) to Kotlin\n */\npublic external interface NavigatorOnLine {\n    val onLine: Boolean\n}\n\n/**\n * Exposes the JavaScript [ErrorEvent](https://developer.mozilla.org/en/docs/Web/API/ErrorEvent) to Kotlin\n */\npublic external open class ErrorEvent(type: String, eventInitDict: ErrorEventInit = definedExternally) : Event {\n    open val message: String\n    open val filename: String\n    open val lineno: Int\n    open val colno: Int\n    open val error: Any?\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface ErrorEventInit : EventInit {\n    var message: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var filename: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var lineno: Int? /* = 0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var colno: Int? /* = 0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var error: Any? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ErrorEventInit(message: String? = \"\", filename: String? = \"\", lineno: Int? = 0, colno: Int? = 0, error: Any? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): ErrorEventInit {\n    val o = js(\"({})\")\n    o[\"message\"] = message\n    o[\"filename\"] = filename\n    o[\"lineno\"] = lineno\n    o[\"colno\"] = colno\n    o[\"error\"] = error\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [PromiseRejectionEvent](https://developer.mozilla.org/en/docs/Web/API/PromiseRejectionEvent) to Kotlin\n */\npublic external open class PromiseRejectionEvent(type: String, eventInitDict: PromiseRejectionEventInit) : Event {\n    open val promise: Promise<Any?>\n    open val reason: Any?\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface PromiseRejectionEventInit : EventInit {\n    var promise: Promise<Any?>?\n        get() = definedExternally\n        set(value) = definedExternally\n    var reason: Any?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun PromiseRejectionEventInit(promise: Promise<Any?>?, reason: Any? = undefined, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): PromiseRejectionEventInit {\n    val o = js(\"({})\")\n    o[\"promise\"] = promise\n    o[\"reason\"] = reason\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [GlobalEventHandlers](https://developer.mozilla.org/en/docs/Web/API/GlobalEventHandlers) to Kotlin\n */\npublic external interface GlobalEventHandlers {\n    var onabort: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onblur: ((FocusEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var oncancel: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var oncanplay: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var oncanplaythrough: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onchange: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onclick: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onclose: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var oncontextmenu: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var oncuechange: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondblclick: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondrag: ((DragEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondragend: ((DragEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondragenter: ((DragEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondragexit: ((DragEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondragleave: ((DragEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondragover: ((DragEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondragstart: ((DragEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondrop: ((DragEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondurationchange: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onemptied: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onended: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onfocus: ((FocusEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var oninput: ((InputEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var oninvalid: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onkeydown: ((KeyboardEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onkeypress: ((KeyboardEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onkeyup: ((KeyboardEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onload: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onloadeddata: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onloadedmetadata: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onloadend: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onloadstart: ((ProgressEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onmousedown: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onmouseenter: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onmouseleave: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onmousemove: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onmouseout: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onmouseover: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onmouseup: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onwheel: ((WheelEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpause: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onplay: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onplaying: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onprogress: ((ProgressEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onratechange: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onreset: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onresize: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onscroll: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onseeked: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onseeking: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onselect: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onshow: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onstalled: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onsubmit: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onsuspend: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ontimeupdate: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ontoggle: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onvolumechange: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onwaiting: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ongotpointercapture: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onlostpointercapture: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpointerdown: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpointermove: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpointerup: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpointercancel: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpointerover: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpointerout: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpointerenter: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpointerleave: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n/**\n * Exposes the JavaScript [WindowEventHandlers](https://developer.mozilla.org/en/docs/Web/API/WindowEventHandlers) to Kotlin\n */\npublic external interface WindowEventHandlers {\n    var onafterprint: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onbeforeprint: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onbeforeunload: ((BeforeUnloadEvent) -> String?)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onhashchange: ((HashChangeEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onlanguagechange: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onmessage: ((MessageEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onoffline: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ononline: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpagehide: ((PageTransitionEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpageshow: ((PageTransitionEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpopstate: ((PopStateEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onrejectionhandled: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onstorage: ((StorageEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onunhandledrejection: ((PromiseRejectionEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onunload: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\npublic external interface DocumentAndElementEventHandlers {\n    var oncopy: ((ClipboardEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var oncut: ((ClipboardEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpaste: ((ClipboardEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n/**\n * Exposes the JavaScript [WindowOrWorkerGlobalScope](https://developer.mozilla.org/en/docs/Web/API/WindowOrWorkerGlobalScope) to Kotlin\n */\npublic external interface WindowOrWorkerGlobalScope {\n    val origin: String\n    val caches: CacheStorage\n    fun btoa(data: String): String\n    fun atob(data: String): String\n    fun setTimeout(handler: dynamic, timeout: Int = definedExternally, vararg arguments: Any?): Int\n    fun clearTimeout(handle: Int = definedExternally)\n    fun setInterval(handler: dynamic, timeout: Int = definedExternally, vararg arguments: Any?): Int\n    fun clearInterval(handle: Int = definedExternally)\n    fun createImageBitmap(image: ImageBitmapSource, options: ImageBitmapOptions = definedExternally): Promise<ImageBitmap>\n    fun createImageBitmap(image: ImageBitmapSource, sx: Int, sy: Int, sw: Int, sh: Int, options: ImageBitmapOptions = definedExternally): Promise<ImageBitmap>\n    fun fetch(input: dynamic, init: RequestInit = definedExternally): Promise<Response>\n}\n\n/**\n * Exposes the JavaScript [Navigator](https://developer.mozilla.org/en/docs/Web/API/Navigator) to Kotlin\n */\npublic external abstract class Navigator : NavigatorID, NavigatorLanguage, NavigatorOnLine, NavigatorContentUtils, NavigatorCookies, NavigatorPlugins, NavigatorConcurrentHardware {\n    open val clipboard: Clipboard\n    open val mediaDevices: MediaDevices\n    open val maxTouchPoints: Int\n    open val serviceWorker: ServiceWorkerContainer\n    fun getUserMedia(constraints: MediaStreamConstraints, successCallback: (MediaStream) -> Unit, errorCallback: (dynamic) -> Unit)\n    fun vibrate(pattern: dynamic): Boolean\n}\n\n/**\n * Exposes the JavaScript [NavigatorID](https://developer.mozilla.org/en/docs/Web/API/NavigatorID) to Kotlin\n */\npublic external interface NavigatorID {\n    val appCodeName: String\n    val appName: String\n    val appVersion: String\n    val platform: String\n    val product: String\n    val productSub: String\n    val userAgent: String\n    val vendor: String\n    val vendorSub: String\n    val oscpu: String\n    fun taintEnabled(): Boolean\n}\n\n/**\n * Exposes the JavaScript [NavigatorLanguage](https://developer.mozilla.org/en/docs/Web/API/NavigatorLanguage) to Kotlin\n */\npublic external interface NavigatorLanguage {\n    val language: String\n    val languages: Array<out String>\n}\n\npublic external interface NavigatorContentUtils {\n    fun registerProtocolHandler(scheme: String, url: String, title: String)\n    fun registerContentHandler(mimeType: String, url: String, title: String)\n    fun isProtocolHandlerRegistered(scheme: String, url: String): String\n    fun isContentHandlerRegistered(mimeType: String, url: String): String\n    fun unregisterProtocolHandler(scheme: String, url: String)\n    fun unregisterContentHandler(mimeType: String, url: String)\n}\n\npublic external interface NavigatorCookies {\n    val cookieEnabled: Boolean\n}\n\n/**\n * Exposes the JavaScript [NavigatorPlugins](https://developer.mozilla.org/en/docs/Web/API/NavigatorPlugins) to Kotlin\n */\npublic external interface NavigatorPlugins {\n    val plugins: PluginArray\n    val mimeTypes: MimeTypeArray\n    fun javaEnabled(): Boolean\n}\n\n/**\n * Exposes the JavaScript [PluginArray](https://developer.mozilla.org/en/docs/Web/API/PluginArray) to Kotlin\n */\npublic external abstract class PluginArray : ItemArrayLike<Plugin> {\n    fun refresh(reload: Boolean = definedExternally)\n    override fun item(index: Int): Plugin?\n    fun namedItem(name: String): Plugin?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun PluginArray.get(index: Int): Plugin? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun PluginArray.get(name: String): Plugin? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [MimeTypeArray](https://developer.mozilla.org/en/docs/Web/API/MimeTypeArray) to Kotlin\n */\npublic external abstract class MimeTypeArray : ItemArrayLike<MimeType> {\n    override fun item(index: Int): MimeType?\n    fun namedItem(name: String): MimeType?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun MimeTypeArray.get(index: Int): MimeType? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun MimeTypeArray.get(name: String): MimeType? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [Plugin](https://developer.mozilla.org/en/docs/Web/API/Plugin) to Kotlin\n */\npublic external abstract class Plugin : ItemArrayLike<MimeType> {\n    open val name: String\n    open val description: String\n    open val filename: String\n    override fun item(index: Int): MimeType?\n    fun namedItem(name: String): MimeType?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Plugin.get(index: Int): MimeType? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Plugin.get(name: String): MimeType? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [MimeType](https://developer.mozilla.org/en/docs/Web/API/MimeType) to Kotlin\n */\npublic external abstract class MimeType {\n    open val type: String\n    open val description: String\n    open val suffixes: String\n    open val enabledPlugin: Plugin\n}\n\n/**\n * Exposes the JavaScript [ImageBitmap](https://developer.mozilla.org/en/docs/Web/API/ImageBitmap) to Kotlin\n */\npublic external abstract class ImageBitmap : CanvasImageSource, TexImageSource {\n    open val width: Int\n    open val height: Int\n    fun close()\n}\n\npublic external interface ImageBitmapOptions {\n    var imageOrientation: ImageOrientation? /* = ImageOrientation.NONE */\n        get() = definedExternally\n        set(value) = definedExternally\n    var premultiplyAlpha: PremultiplyAlpha? /* = PremultiplyAlpha.DEFAULT */\n        get() = definedExternally\n        set(value) = definedExternally\n    var colorSpaceConversion: ColorSpaceConversion? /* = ColorSpaceConversion.DEFAULT */\n        get() = definedExternally\n        set(value) = definedExternally\n    var resizeWidth: Int?\n        get() = definedExternally\n        set(value) = definedExternally\n    var resizeHeight: Int?\n        get() = definedExternally\n        set(value) = definedExternally\n    var resizeQuality: ResizeQuality? /* = ResizeQuality.LOW */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ImageBitmapOptions(imageOrientation: ImageOrientation? = ImageOrientation.NONE, premultiplyAlpha: PremultiplyAlpha? = PremultiplyAlpha.DEFAULT, colorSpaceConversion: ColorSpaceConversion? = ColorSpaceConversion.DEFAULT, resizeWidth: Int? = undefined, resizeHeight: Int? = undefined, resizeQuality: ResizeQuality? = ResizeQuality.LOW): ImageBitmapOptions {\n    val o = js(\"({})\")\n    o[\"imageOrientation\"] = imageOrientation\n    o[\"premultiplyAlpha\"] = premultiplyAlpha\n    o[\"colorSpaceConversion\"] = colorSpaceConversion\n    o[\"resizeWidth\"] = resizeWidth\n    o[\"resizeHeight\"] = resizeHeight\n    o[\"resizeQuality\"] = resizeQuality\n    return o\n}\n\n/**\n * Exposes the JavaScript [MessageEvent](https://developer.mozilla.org/en/docs/Web/API/MessageEvent) to Kotlin\n */\npublic external open class MessageEvent(type: String, eventInitDict: MessageEventInit = definedExternally) : Event {\n    open val data: Any?\n    open val origin: String\n    open val lastEventId: String\n    open val source: UnionMessagePortOrWindowProxy?\n    open val ports: Array<out MessagePort>\n    fun initMessageEvent(type: String, bubbles: Boolean, cancelable: Boolean, data: Any?, origin: String, lastEventId: String, source: UnionMessagePortOrWindowProxy?, ports: Array<MessagePort>)\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface MessageEventInit : EventInit {\n    var data: Any? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var origin: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var lastEventId: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var source: UnionMessagePortOrWindowProxy? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var ports: Array<MessagePort>? /* = arrayOf() */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun MessageEventInit(data: Any? = null, origin: String? = \"\", lastEventId: String? = \"\", source: UnionMessagePortOrWindowProxy? = null, ports: Array<MessagePort>? = arrayOf(), bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): MessageEventInit {\n    val o = js(\"({})\")\n    o[\"data\"] = data\n    o[\"origin\"] = origin\n    o[\"lastEventId\"] = lastEventId\n    o[\"source\"] = source\n    o[\"ports\"] = ports\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [EventSource](https://developer.mozilla.org/en/docs/Web/API/EventSource) to Kotlin\n */\npublic external open class EventSource(url: String, eventSourceInitDict: EventSourceInit = definedExternally) : EventTarget {\n    open val url: String\n    open val withCredentials: Boolean\n    open val readyState: Short\n    var onopen: ((Event) -> dynamic)?\n    var onmessage: ((MessageEvent) -> dynamic)?\n    var onerror: ((Event) -> dynamic)?\n    fun close()\n\n    companion object {\n        val CONNECTING: Short\n        val OPEN: Short\n        val CLOSED: Short\n    }\n}\n\npublic external interface EventSourceInit {\n    var withCredentials: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun EventSourceInit(withCredentials: Boolean? = false): EventSourceInit {\n    val o = js(\"({})\")\n    o[\"withCredentials\"] = withCredentials\n    return o\n}\n\n/**\n * Exposes the JavaScript [WebSocket](https://developer.mozilla.org/en/docs/Web/API/WebSocket) to Kotlin\n */\npublic external open class WebSocket(url: String, protocols: dynamic = definedExternally) : EventTarget {\n    open val url: String\n    open val readyState: Short\n    open val bufferedAmount: Number\n    var onopen: ((Event) -> dynamic)?\n    var onerror: ((Event) -> dynamic)?\n    var onclose: ((Event) -> dynamic)?\n    open val extensions: String\n    open val protocol: String\n    var onmessage: ((MessageEvent) -> dynamic)?\n    var binaryType: BinaryType\n    fun close(code: Short = definedExternally, reason: String = definedExternally)\n    fun send(data: String)\n    fun send(data: Blob)\n    fun send(data: ArrayBuffer)\n    fun send(data: ArrayBufferView)\n\n    companion object {\n        val CONNECTING: Short\n        val OPEN: Short\n        val CLOSING: Short\n        val CLOSED: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [CloseEvent](https://developer.mozilla.org/en/docs/Web/API/CloseEvent) to Kotlin\n */\npublic external open class CloseEvent(type: String, eventInitDict: CloseEventInit = definedExternally) : Event {\n    open val wasClean: Boolean\n    open val code: Short\n    open val reason: String\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface CloseEventInit : EventInit {\n    var wasClean: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var code: Short? /* = 0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var reason: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun CloseEventInit(wasClean: Boolean? = false, code: Short? = 0, reason: String? = \"\", bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): CloseEventInit {\n    val o = js(\"({})\")\n    o[\"wasClean\"] = wasClean\n    o[\"code\"] = code\n    o[\"reason\"] = reason\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [MessageChannel](https://developer.mozilla.org/en/docs/Web/API/MessageChannel) to Kotlin\n */\npublic external open class MessageChannel {\n    open val port1: MessagePort\n    open val port2: MessagePort\n}\n\n/**\n * Exposes the JavaScript [MessagePort](https://developer.mozilla.org/en/docs/Web/API/MessagePort) to Kotlin\n */\npublic external abstract class MessagePort : EventTarget, UnionMessagePortOrWindowProxy, UnionMessagePortOrServiceWorker, UnionClientOrMessagePortOrServiceWorker {\n    open var onmessage: ((MessageEvent) -> dynamic)?\n    fun postMessage(message: Any?, transfer: Array<dynamic> = definedExternally)\n    fun start()\n    fun close()\n}\n\n/**\n * Exposes the JavaScript [BroadcastChannel](https://developer.mozilla.org/en/docs/Web/API/BroadcastChannel) to Kotlin\n */\npublic external open class BroadcastChannel(name: String) : EventTarget {\n    open val name: String\n    var onmessage: ((MessageEvent) -> dynamic)?\n    fun postMessage(message: Any?)\n    fun close()\n}\n\n/**\n * Exposes the JavaScript [WorkerGlobalScope](https://developer.mozilla.org/en/docs/Web/API/WorkerGlobalScope) to Kotlin\n */\npublic external abstract class WorkerGlobalScope : EventTarget, WindowOrWorkerGlobalScope, GlobalPerformance {\n    open val self: WorkerGlobalScope\n    open val location: WorkerLocation\n    open val navigator: WorkerNavigator\n    open var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n    open var onlanguagechange: ((Event) -> dynamic)?\n    open var onoffline: ((Event) -> dynamic)?\n    open var ononline: ((Event) -> dynamic)?\n    open var onrejectionhandled: ((Event) -> dynamic)?\n    open var onunhandledrejection: ((PromiseRejectionEvent) -> dynamic)?\n    fun importScripts(vararg urls: String)\n}\n\n/**\n * Exposes the JavaScript [DedicatedWorkerGlobalScope](https://developer.mozilla.org/en/docs/Web/API/DedicatedWorkerGlobalScope) to Kotlin\n */\npublic external abstract class DedicatedWorkerGlobalScope : WorkerGlobalScope {\n    open var onmessage: ((MessageEvent) -> dynamic)?\n    fun postMessage(message: Any?, transfer: Array<dynamic> = definedExternally)\n    fun close()\n}\n\n/**\n * Exposes the JavaScript [SharedWorkerGlobalScope](https://developer.mozilla.org/en/docs/Web/API/SharedWorkerGlobalScope) to Kotlin\n */\npublic external abstract class SharedWorkerGlobalScope : WorkerGlobalScope {\n    open val name: String\n    open val applicationCache: ApplicationCache\n    open var onconnect: ((Event) -> dynamic)?\n    fun close()\n}\n\n/**\n * Exposes the JavaScript [AbstractWorker](https://developer.mozilla.org/en/docs/Web/API/AbstractWorker) to Kotlin\n */\npublic external interface AbstractWorker {\n    var onerror: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n/**\n * Exposes the JavaScript [Worker](https://developer.mozilla.org/en/docs/Web/API/Worker) to Kotlin\n */\npublic external open class Worker(scriptURL: String, options: WorkerOptions = definedExternally) : EventTarget, AbstractWorker {\n    var onmessage: ((MessageEvent) -> dynamic)?\n    override var onerror: ((Event) -> dynamic)?\n    fun terminate()\n    fun postMessage(message: Any?, transfer: Array<dynamic> = definedExternally)\n}\n\npublic external interface WorkerOptions {\n    var type: WorkerType? /* = WorkerType.CLASSIC */\n        get() = definedExternally\n        set(value) = definedExternally\n    var credentials: RequestCredentials? /* = RequestCredentials.OMIT */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun WorkerOptions(type: WorkerType? = WorkerType.CLASSIC, credentials: RequestCredentials? = RequestCredentials.OMIT): WorkerOptions {\n    val o = js(\"({})\")\n    o[\"type\"] = type\n    o[\"credentials\"] = credentials\n    return o\n}\n\n/**\n * Exposes the JavaScript [SharedWorker](https://developer.mozilla.org/en/docs/Web/API/SharedWorker) to Kotlin\n */\npublic external open class SharedWorker(scriptURL: String, name: String = definedExternally, options: WorkerOptions = definedExternally) : EventTarget, AbstractWorker {\n    open val port: MessagePort\n    override var onerror: ((Event) -> dynamic)?\n}\n\n/**\n * Exposes the JavaScript [NavigatorConcurrentHardware](https://developer.mozilla.org/en/docs/Web/API/NavigatorConcurrentHardware) to Kotlin\n */\npublic external interface NavigatorConcurrentHardware {\n    val hardwareConcurrency: Number\n}\n\n/**\n * Exposes the JavaScript [WorkerNavigator](https://developer.mozilla.org/en/docs/Web/API/WorkerNavigator) to Kotlin\n */\npublic external abstract class WorkerNavigator : NavigatorID, NavigatorLanguage, NavigatorOnLine, NavigatorConcurrentHardware {\n    open val serviceWorker: ServiceWorkerContainer\n}\n\n/**\n * Exposes the JavaScript [WorkerLocation](https://developer.mozilla.org/en/docs/Web/API/WorkerLocation) to Kotlin\n */\npublic external abstract class WorkerLocation {\n    open val href: String\n    open val origin: String\n    open val protocol: String\n    open val host: String\n    open val hostname: String\n    open val port: String\n    open val pathname: String\n    open val search: String\n    open val hash: String\n}\n\n/**\n * Exposes the JavaScript [Storage](https://developer.mozilla.org/en/docs/Web/API/Storage) to Kotlin\n */\npublic external abstract class Storage {\n    open val length: Int\n    fun key(index: Int): String?\n    fun removeItem(key: String)\n    fun clear()\n    fun getItem(key: String): String?\n    fun setItem(key: String, value: String)\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Storage.get(key: String): String? = asDynamic()[key]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Storage.set(key: String, value: String) { asDynamic()[key] = value }\n\n/**\n * Exposes the JavaScript [WindowSessionStorage](https://developer.mozilla.org/en/docs/Web/API/WindowSessionStorage) to Kotlin\n */\npublic external interface WindowSessionStorage {\n    val sessionStorage: Storage\n}\n\n/**\n * Exposes the JavaScript [WindowLocalStorage](https://developer.mozilla.org/en/docs/Web/API/WindowLocalStorage) to Kotlin\n */\npublic external interface WindowLocalStorage {\n    val localStorage: Storage\n}\n\n/**\n * Exposes the JavaScript [StorageEvent](https://developer.mozilla.org/en/docs/Web/API/StorageEvent) to Kotlin\n */\npublic external open class StorageEvent(type: String, eventInitDict: StorageEventInit = definedExternally) : Event {\n    open val key: String?\n    open val oldValue: String?\n    open val newValue: String?\n    open val url: String\n    open val storageArea: Storage?\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface StorageEventInit : EventInit {\n    var key: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var oldValue: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var newValue: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var url: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var storageArea: Storage? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun StorageEventInit(key: String? = null, oldValue: String? = null, newValue: String? = null, url: String? = \"\", storageArea: Storage? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): StorageEventInit {\n    val o = js(\"({})\")\n    o[\"key\"] = key\n    o[\"oldValue\"] = oldValue\n    o[\"newValue\"] = newValue\n    o[\"url\"] = url\n    o[\"storageArea\"] = storageArea\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\npublic external abstract class HTMLAppletElement : HTMLElement {\n    open var align: String\n    open var alt: String\n    open var archive: String\n    open var code: String\n    open var codeBase: String\n    open var height: String\n    open var hspace: Int\n    open var name: String\n    open var _object: String\n    open var vspace: Int\n    open var width: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLMarqueeElement](https://developer.mozilla.org/en/docs/Web/API/HTMLMarqueeElement) to Kotlin\n */\npublic external abstract class HTMLMarqueeElement : HTMLElement {\n    open var behavior: String\n    open var bgColor: String\n    open var direction: String\n    open var height: String\n    open var hspace: Int\n    open var loop: Int\n    open var scrollAmount: Int\n    open var scrollDelay: Int\n    open var trueSpeed: Boolean\n    open var vspace: Int\n    open var width: String\n    open var onbounce: ((Event) -> dynamic)?\n    open var onfinish: ((Event) -> dynamic)?\n    open var onstart: ((Event) -> dynamic)?\n    fun start()\n    fun stop()\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLFrameSetElement](https://developer.mozilla.org/en/docs/Web/API/HTMLFrameSetElement) to Kotlin\n */\npublic external abstract class HTMLFrameSetElement : HTMLElement, WindowEventHandlers {\n    open var cols: String\n    open var rows: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external abstract class HTMLFrameElement : HTMLElement {\n    open var name: String\n    open var scrolling: String\n    open var src: String\n    open var frameBorder: String\n    open var longDesc: String\n    open var noResize: Boolean\n    open val contentDocument: Document?\n    open val contentWindow: Window?\n    open var marginHeight: String\n    open var marginWidth: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external abstract class HTMLDirectoryElement : HTMLElement {\n    open var compact: Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLFontElement](https://developer.mozilla.org/en/docs/Web/API/HTMLFontElement) to Kotlin\n */\npublic external abstract class HTMLFontElement : HTMLElement {\n    open var color: String\n    open var face: String\n    open var size: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external interface External {\n    fun AddSearchProvider()\n    fun IsSearchProviderInstalled()\n}\n\npublic external interface EventInit {\n    var bubbles: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var cancelable: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var composed: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun EventInit(bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): EventInit {\n    val o = js(\"({})\")\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [CustomEvent](https://developer.mozilla.org/en/docs/Web/API/CustomEvent) to Kotlin\n */\npublic external open class CustomEvent(type: String, eventInitDict: CustomEventInit = definedExternally) : Event {\n    open val detail: Any?\n    fun initCustomEvent(type: String, bubbles: Boolean, cancelable: Boolean, detail: Any?)\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface CustomEventInit : EventInit {\n    var detail: Any? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun CustomEventInit(detail: Any? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): CustomEventInit {\n    val o = js(\"({})\")\n    o[\"detail\"] = detail\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\npublic external interface EventListenerOptions {\n    var capture: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun EventListenerOptions(capture: Boolean? = false): EventListenerOptions {\n    val o = js(\"({})\")\n    o[\"capture\"] = capture\n    return o\n}\n\npublic external interface AddEventListenerOptions : EventListenerOptions {\n    var passive: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var once: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun AddEventListenerOptions(passive: Boolean? = false, once: Boolean? = false, capture: Boolean? = false): AddEventListenerOptions {\n    val o = js(\"({})\")\n    o[\"passive\"] = passive\n    o[\"once\"] = once\n    o[\"capture\"] = capture\n    return o\n}\n\npublic external interface NonElementParentNode {\n    fun getElementById(elementId: String): Element?\n}\n\n/**\n * Exposes the JavaScript [DocumentOrShadowRoot](https://developer.mozilla.org/en/docs/Web/API/DocumentOrShadowRoot) to Kotlin\n */\npublic external interface DocumentOrShadowRoot {\n    val fullscreenElement: Element?\n        get() = definedExternally\n}\n\n/**\n * Exposes the JavaScript [ParentNode](https://developer.mozilla.org/en/docs/Web/API/ParentNode) to Kotlin\n */\npublic external interface ParentNode {\n    val children: HTMLCollection\n    val firstElementChild: Element?\n        get() = definedExternally\n    val lastElementChild: Element?\n        get() = definedExternally\n    val childElementCount: Int\n    fun prepend(vararg nodes: dynamic)\n    fun append(vararg nodes: dynamic)\n    fun querySelector(selectors: String): Element?\n    fun querySelectorAll(selectors: String): NodeList\n}\n\n/**\n * Exposes the JavaScript [NonDocumentTypeChildNode](https://developer.mozilla.org/en/docs/Web/API/NonDocumentTypeChildNode) to Kotlin\n */\npublic external interface NonDocumentTypeChildNode {\n    val previousElementSibling: Element?\n        get() = definedExternally\n    val nextElementSibling: Element?\n        get() = definedExternally\n}\n\n/**\n * Exposes the JavaScript [ChildNode](https://developer.mozilla.org/en/docs/Web/API/ChildNode) to Kotlin\n */\npublic external interface ChildNode {\n    fun before(vararg nodes: dynamic)\n    fun after(vararg nodes: dynamic)\n    fun replaceWith(vararg nodes: dynamic)\n    fun remove()\n}\n\n/**\n * Exposes the JavaScript [Slotable](https://developer.mozilla.org/en/docs/Web/API/Slotable) to Kotlin\n */\npublic external interface Slotable {\n    val assignedSlot: HTMLSlotElement?\n        get() = definedExternally\n}\n\n/**\n * Exposes the JavaScript [NodeList](https://developer.mozilla.org/en/docs/Web/API/NodeList) to Kotlin\n */\npublic external abstract class NodeList : ItemArrayLike<Node> {\n    override fun item(index: Int): Node?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun NodeList.get(index: Int): Node? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [HTMLCollection](https://developer.mozilla.org/en/docs/Web/API/HTMLCollection) to Kotlin\n */\npublic external abstract class HTMLCollection : ItemArrayLike<Element>, UnionElementOrHTMLCollection {\n    override fun item(index: Int): Element?\n    fun namedItem(name: String): Element?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLCollection.get(index: Int): Element? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLCollection.get(name: String): Element? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [MutationObserver](https://developer.mozilla.org/en/docs/Web/API/MutationObserver) to Kotlin\n */\npublic external open class MutationObserver(callback: (Array<MutationRecord>, MutationObserver) -> Unit) {\n    fun observe(target: Node, options: MutationObserverInit = definedExternally)\n    fun disconnect()\n    fun takeRecords(): Array<MutationRecord>\n}\n\n/**\n * Exposes the JavaScript [MutationObserverInit](https://developer.mozilla.org/en/docs/Web/API/MutationObserverInit) to Kotlin\n */\npublic external interface MutationObserverInit {\n    var childList: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var attributes: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var characterData: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var subtree: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var attributeOldValue: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var characterDataOldValue: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var attributeFilter: Array<String>?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun MutationObserverInit(childList: Boolean? = false, attributes: Boolean? = undefined, characterData: Boolean? = undefined, subtree: Boolean? = false, attributeOldValue: Boolean? = undefined, characterDataOldValue: Boolean? = undefined, attributeFilter: Array<String>? = undefined): MutationObserverInit {\n    val o = js(\"({})\")\n    o[\"childList\"] = childList\n    o[\"attributes\"] = attributes\n    o[\"characterData\"] = characterData\n    o[\"subtree\"] = subtree\n    o[\"attributeOldValue\"] = attributeOldValue\n    o[\"characterDataOldValue\"] = characterDataOldValue\n    o[\"attributeFilter\"] = attributeFilter\n    return o\n}\n\n/**\n * Exposes the JavaScript [MutationRecord](https://developer.mozilla.org/en/docs/Web/API/MutationRecord) to Kotlin\n */\npublic external abstract class MutationRecord {\n    open val type: String\n    open val target: Node\n    open val addedNodes: NodeList\n    open val removedNodes: NodeList\n    open val previousSibling: Node?\n    open val nextSibling: Node?\n    open val attributeName: String?\n    open val attributeNamespace: String?\n    open val oldValue: String?\n}\n\n/**\n * Exposes the JavaScript [Node](https://developer.mozilla.org/en/docs/Web/API/Node) to Kotlin\n */\npublic external abstract class Node : EventTarget {\n    open val nodeType: Short\n    open val nodeName: String\n    open val baseURI: String\n    open val isConnected: Boolean\n    open val ownerDocument: Document?\n    open val parentNode: Node?\n    open val parentElement: Element?\n    open val childNodes: NodeList\n    open val firstChild: Node?\n    open val lastChild: Node?\n    open val previousSibling: Node?\n    open val nextSibling: Node?\n    open var nodeValue: String?\n    open var textContent: String?\n    fun getRootNode(options: GetRootNodeOptions = definedExternally): Node\n    fun hasChildNodes(): Boolean\n    fun normalize()\n    fun cloneNode(deep: Boolean = definedExternally): Node\n    fun isEqualNode(otherNode: Node?): Boolean\n    fun isSameNode(otherNode: Node?): Boolean\n    fun compareDocumentPosition(other: Node): Short\n    fun contains(other: Node?): Boolean\n    fun lookupPrefix(namespace: String?): String?\n    fun lookupNamespaceURI(prefix: String?): String?\n    fun isDefaultNamespace(namespace: String?): Boolean\n    fun insertBefore(node: Node, child: Node?): Node\n    fun appendChild(node: Node): Node\n    fun replaceChild(node: Node, child: Node): Node\n    fun removeChild(child: Node): Node\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external interface GetRootNodeOptions {\n    var composed: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun GetRootNodeOptions(composed: Boolean? = false): GetRootNodeOptions {\n    val o = js(\"({})\")\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [Document](https://developer.mozilla.org/en/docs/Web/API/Document) to Kotlin\n */\npublic external open class Document : Node, GlobalEventHandlers, DocumentAndElementEventHandlers, NonElementParentNode, DocumentOrShadowRoot, ParentNode, GeometryUtils {\n    open val implementation: DOMImplementation\n    open val URL: String\n    open val documentURI: String\n    open val origin: String\n    open val compatMode: String\n    open val characterSet: String\n    open val charset: String\n    open val inputEncoding: String\n    open val contentType: String\n    open val doctype: DocumentType?\n    open val documentElement: Element?\n    open val location: Location?\n    var domain: String\n    open val referrer: String\n    var cookie: String\n    open val lastModified: String\n    open val readyState: DocumentReadyState\n    var title: String\n    var dir: String\n    var body: HTMLElement?\n    open val head: HTMLHeadElement?\n    open val images: HTMLCollection\n    open val embeds: HTMLCollection\n    open val plugins: HTMLCollection\n    open val links: HTMLCollection\n    open val forms: HTMLCollection\n    open val scripts: HTMLCollection\n    open val currentScript: HTMLOrSVGScriptElement?\n    open val defaultView: Window?\n    open val activeElement: Element?\n    var designMode: String\n    var onreadystatechange: ((Event) -> dynamic)?\n    var fgColor: String\n    var linkColor: String\n    var vlinkColor: String\n    var alinkColor: String\n    var bgColor: String\n    open val anchors: HTMLCollection\n    open val applets: HTMLCollection\n    open val all: HTMLAllCollection\n    open val scrollingElement: Element?\n    open val styleSheets: StyleSheetList\n    open val rootElement: SVGSVGElement?\n    open val fullscreenEnabled: Boolean\n    open val fullscreen: Boolean\n    var onfullscreenchange: ((Event) -> dynamic)?\n    var onfullscreenerror: ((Event) -> dynamic)?\n    override var onabort: ((Event) -> dynamic)?\n    override var onblur: ((FocusEvent) -> dynamic)?\n    override var oncancel: ((Event) -> dynamic)?\n    override var oncanplay: ((Event) -> dynamic)?\n    override var oncanplaythrough: ((Event) -> dynamic)?\n    override var onchange: ((Event) -> dynamic)?\n    override var onclick: ((MouseEvent) -> dynamic)?\n    override var onclose: ((Event) -> dynamic)?\n    override var oncontextmenu: ((MouseEvent) -> dynamic)?\n    override var oncuechange: ((Event) -> dynamic)?\n    override var ondblclick: ((MouseEvent) -> dynamic)?\n    override var ondrag: ((DragEvent) -> dynamic)?\n    override var ondragend: ((DragEvent) -> dynamic)?\n    override var ondragenter: ((DragEvent) -> dynamic)?\n    override var ondragexit: ((DragEvent) -> dynamic)?\n    override var ondragleave: ((DragEvent) -> dynamic)?\n    override var ondragover: ((DragEvent) -> dynamic)?\n    override var ondragstart: ((DragEvent) -> dynamic)?\n    override var ondrop: ((DragEvent) -> dynamic)?\n    override var ondurationchange: ((Event) -> dynamic)?\n    override var onemptied: ((Event) -> dynamic)?\n    override var onended: ((Event) -> dynamic)?\n    override var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n    override var onfocus: ((FocusEvent) -> dynamic)?\n    override var oninput: ((InputEvent) -> dynamic)?\n    override var oninvalid: ((Event) -> dynamic)?\n    override var onkeydown: ((KeyboardEvent) -> dynamic)?\n    override var onkeypress: ((KeyboardEvent) -> dynamic)?\n    override var onkeyup: ((KeyboardEvent) -> dynamic)?\n    override var onload: ((Event) -> dynamic)?\n    override var onloadeddata: ((Event) -> dynamic)?\n    override var onloadedmetadata: ((Event) -> dynamic)?\n    override var onloadend: ((Event) -> dynamic)?\n    override var onloadstart: ((ProgressEvent) -> dynamic)?\n    override var onmousedown: ((MouseEvent) -> dynamic)?\n    override var onmouseenter: ((MouseEvent) -> dynamic)?\n    override var onmouseleave: ((MouseEvent) -> dynamic)?\n    override var onmousemove: ((MouseEvent) -> dynamic)?\n    override var onmouseout: ((MouseEvent) -> dynamic)?\n    override var onmouseover: ((MouseEvent) -> dynamic)?\n    override var onmouseup: ((MouseEvent) -> dynamic)?\n    override var onwheel: ((WheelEvent) -> dynamic)?\n    override var onpause: ((Event) -> dynamic)?\n    override var onplay: ((Event) -> dynamic)?\n    override var onplaying: ((Event) -> dynamic)?\n    override var onprogress: ((ProgressEvent) -> dynamic)?\n    override var onratechange: ((Event) -> dynamic)?\n    override var onreset: ((Event) -> dynamic)?\n    override var onresize: ((Event) -> dynamic)?\n    override var onscroll: ((Event) -> dynamic)?\n    override var onseeked: ((Event) -> dynamic)?\n    override var onseeking: ((Event) -> dynamic)?\n    override var onselect: ((Event) -> dynamic)?\n    override var onshow: ((Event) -> dynamic)?\n    override var onstalled: ((Event) -> dynamic)?\n    override var onsubmit: ((Event) -> dynamic)?\n    override var onsuspend: ((Event) -> dynamic)?\n    override var ontimeupdate: ((Event) -> dynamic)?\n    override var ontoggle: ((Event) -> dynamic)?\n    override var onvolumechange: ((Event) -> dynamic)?\n    override var onwaiting: ((Event) -> dynamic)?\n    override var ongotpointercapture: ((PointerEvent) -> dynamic)?\n    override var onlostpointercapture: ((PointerEvent) -> dynamic)?\n    override var onpointerdown: ((PointerEvent) -> dynamic)?\n    override var onpointermove: ((PointerEvent) -> dynamic)?\n    override var onpointerup: ((PointerEvent) -> dynamic)?\n    override var onpointercancel: ((PointerEvent) -> dynamic)?\n    override var onpointerover: ((PointerEvent) -> dynamic)?\n    override var onpointerout: ((PointerEvent) -> dynamic)?\n    override var onpointerenter: ((PointerEvent) -> dynamic)?\n    override var onpointerleave: ((PointerEvent) -> dynamic)?\n    override var oncopy: ((ClipboardEvent) -> dynamic)?\n    override var oncut: ((ClipboardEvent) -> dynamic)?\n    override var onpaste: ((ClipboardEvent) -> dynamic)?\n    override val fullscreenElement: Element?\n    override val children: HTMLCollection\n    override val firstElementChild: Element?\n    override val lastElementChild: Element?\n    override val childElementCount: Int\n    fun getElementsByTagName(qualifiedName: String): HTMLCollection\n    fun getElementsByTagNameNS(namespace: String?, localName: String): HTMLCollection\n    fun getElementsByClassName(classNames: String): HTMLCollection\n    fun createElement(localName: String, options: ElementCreationOptions = definedExternally): Element\n    fun createElementNS(namespace: String?, qualifiedName: String, options: ElementCreationOptions = definedExternally): Element\n    fun createDocumentFragment(): DocumentFragment\n    fun createTextNode(data: String): Text\n    fun createCDATASection(data: String): CDATASection\n    fun createComment(data: String): Comment\n    fun createProcessingInstruction(target: String, data: String): ProcessingInstruction\n    fun importNode(node: Node, deep: Boolean = definedExternally): Node\n    fun adoptNode(node: Node): Node\n    fun createAttribute(localName: String): Attr\n    fun createAttributeNS(namespace: String?, qualifiedName: String): Attr\n    fun createEvent(`interface`: String): Event\n    fun createRange(): Range\n    fun createNodeIterator(root: Node, whatToShow: Int = definedExternally, filter: NodeFilter? = definedExternally): NodeIterator\n    fun createNodeIterator(root: Node, whatToShow: Int = definedExternally, filter: ((Node) -> Short)? = definedExternally): NodeIterator\n    fun createTreeWalker(root: Node, whatToShow: Int = definedExternally, filter: NodeFilter? = definedExternally): TreeWalker\n    fun createTreeWalker(root: Node, whatToShow: Int = definedExternally, filter: ((Node) -> Short)? = definedExternally): TreeWalker\n    fun getElementsByName(elementName: String): NodeList\n    fun open(type: String = definedExternally, replace: String = definedExternally): Document\n    fun open(url: String, name: String, features: String): Window\n    fun close()\n    fun write(vararg text: String)\n    fun writeln(vararg text: String)\n    fun hasFocus(): Boolean\n    fun execCommand(commandId: String, showUI: Boolean = definedExternally, value: String = definedExternally): Boolean\n    fun queryCommandEnabled(commandId: String): Boolean\n    fun queryCommandIndeterm(commandId: String): Boolean\n    fun queryCommandState(commandId: String): Boolean\n    fun queryCommandSupported(commandId: String): Boolean\n    fun queryCommandValue(commandId: String): String\n    fun clear()\n    fun captureEvents()\n    fun releaseEvents()\n    fun elementFromPoint(x: Double, y: Double): Element?\n    fun elementsFromPoint(x: Double, y: Double): Array<Element>\n    fun caretPositionFromPoint(x: Double, y: Double): CaretPosition?\n    fun createTouch(view: Window, target: EventTarget, identifier: Int, pageX: Int, pageY: Int, screenX: Int, screenY: Int): Touch\n    fun createTouchList(vararg touches: Touch): TouchList\n    fun exitFullscreen(): Promise<Unit>\n    override fun getElementById(elementId: String): Element?\n    override fun prepend(vararg nodes: dynamic)\n    override fun append(vararg nodes: dynamic)\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Document.get(name: String): dynamic = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [XMLDocument](https://developer.mozilla.org/en/docs/Web/API/XMLDocument) to Kotlin\n */\npublic external open class XMLDocument : Document {\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external interface ElementCreationOptions {\n    var `is`: String?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ElementCreationOptions(`is`: String? = undefined): ElementCreationOptions {\n    val o = js(\"({})\")\n    o[\"is\"] = `is`\n    return o\n}\n\n/**\n * Exposes the JavaScript [DOMImplementation](https://developer.mozilla.org/en/docs/Web/API/DOMImplementation) to Kotlin\n */\npublic external abstract class DOMImplementation {\n    fun createDocumentType(qualifiedName: String, publicId: String, systemId: String): DocumentType\n    fun createDocument(namespace: String?, qualifiedName: String, doctype: DocumentType? = definedExternally): XMLDocument\n    fun createHTMLDocument(title: String = definedExternally): Document\n    fun hasFeature(): Boolean\n}\n\n/**\n * Exposes the JavaScript [DocumentType](https://developer.mozilla.org/en/docs/Web/API/DocumentType) to Kotlin\n */\npublic external abstract class DocumentType : Node, ChildNode {\n    open val name: String\n    open val publicId: String\n    open val systemId: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [DocumentFragment](https://developer.mozilla.org/en/docs/Web/API/DocumentFragment) to Kotlin\n */\npublic external open class DocumentFragment : Node, NonElementParentNode, ParentNode {\n    override val children: HTMLCollection\n    override val firstElementChild: Element?\n    override val lastElementChild: Element?\n    override val childElementCount: Int\n    override fun getElementById(elementId: String): Element?\n    override fun prepend(vararg nodes: dynamic)\n    override fun append(vararg nodes: dynamic)\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [ShadowRoot](https://developer.mozilla.org/en/docs/Web/API/ShadowRoot) to Kotlin\n */\npublic external open class ShadowRoot : DocumentFragment, DocumentOrShadowRoot {\n    open val mode: ShadowRootMode\n    open val host: Element\n    override val fullscreenElement: Element?\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [Element](https://developer.mozilla.org/en/docs/Web/API/Element) to Kotlin\n */\npublic external abstract class Element : Node, ParentNode, NonDocumentTypeChildNode, ChildNode, Slotable, GeometryUtils, UnionElementOrHTMLCollection, UnionElementOrRadioNodeList, UnionElementOrMouseEvent, UnionElementOrProcessingInstruction {\n    open val namespaceURI: String?\n    open val prefix: String?\n    open val localName: String\n    open val tagName: String\n    open var id: String\n    open var className: String\n    open val classList: DOMTokenList\n    open var slot: String\n    open val attributes: NamedNodeMap\n    open val shadowRoot: ShadowRoot?\n    open var scrollTop: Double\n    open var scrollLeft: Double\n    open val scrollWidth: Int\n    open val scrollHeight: Int\n    open val clientTop: Int\n    open val clientLeft: Int\n    open val clientWidth: Int\n    open val clientHeight: Int\n    open var innerHTML: String\n    open var outerHTML: String\n    fun hasAttributes(): Boolean\n    fun getAttributeNames(): Array<String>\n    fun getAttribute(qualifiedName: String): String?\n    fun getAttributeNS(namespace: String?, localName: String): String?\n    fun setAttribute(qualifiedName: String, value: String)\n    fun setAttributeNS(namespace: String?, qualifiedName: String, value: String)\n    fun removeAttribute(qualifiedName: String)\n    fun removeAttributeNS(namespace: String?, localName: String)\n    fun hasAttribute(qualifiedName: String): Boolean\n    fun hasAttributeNS(namespace: String?, localName: String): Boolean\n    fun getAttributeNode(qualifiedName: String): Attr?\n    fun getAttributeNodeNS(namespace: String?, localName: String): Attr?\n    fun setAttributeNode(attr: Attr): Attr?\n    fun setAttributeNodeNS(attr: Attr): Attr?\n    fun removeAttributeNode(attr: Attr): Attr\n    fun attachShadow(init: ShadowRootInit): ShadowRoot\n    fun closest(selectors: String): Element?\n    fun matches(selectors: String): Boolean\n    fun webkitMatchesSelector(selectors: String): Boolean\n    fun getElementsByTagName(qualifiedName: String): HTMLCollection\n    fun getElementsByTagNameNS(namespace: String?, localName: String): HTMLCollection\n    fun getElementsByClassName(classNames: String): HTMLCollection\n    fun insertAdjacentElement(where: String, element: Element): Element?\n    fun insertAdjacentText(where: String, data: String)\n    fun getClientRects(): Array<DOMRect>\n    fun getBoundingClientRect(): DOMRect\n    fun scrollIntoView()\n    fun scrollIntoView(arg: dynamic)\n    fun scroll(options: ScrollToOptions = definedExternally)\n    fun scroll(x: Double, y: Double)\n    fun scrollTo(options: ScrollToOptions = definedExternally)\n    fun scrollTo(x: Double, y: Double)\n    fun scrollBy(options: ScrollToOptions = definedExternally)\n    fun scrollBy(x: Double, y: Double)\n    fun insertAdjacentHTML(position: String, text: String)\n    fun setPointerCapture(pointerId: Int)\n    fun releasePointerCapture(pointerId: Int)\n    fun hasPointerCapture(pointerId: Int): Boolean\n    fun requestFullscreen(): Promise<Unit>\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external interface ShadowRootInit {\n    var mode: ShadowRootMode?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ShadowRootInit(mode: ShadowRootMode?): ShadowRootInit {\n    val o = js(\"({})\")\n    o[\"mode\"] = mode\n    return o\n}\n\n/**\n * Exposes the JavaScript [NamedNodeMap](https://developer.mozilla.org/en/docs/Web/API/NamedNodeMap) to Kotlin\n */\npublic external abstract class NamedNodeMap : ItemArrayLike<Attr> {\n    fun getNamedItemNS(namespace: String?, localName: String): Attr?\n    fun setNamedItem(attr: Attr): Attr?\n    fun setNamedItemNS(attr: Attr): Attr?\n    fun removeNamedItem(qualifiedName: String): Attr\n    fun removeNamedItemNS(namespace: String?, localName: String): Attr\n    override fun item(index: Int): Attr?\n    fun getNamedItem(qualifiedName: String): Attr?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun NamedNodeMap.get(index: Int): Attr? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun NamedNodeMap.get(qualifiedName: String): Attr? = asDynamic()[qualifiedName]\n\n/**\n * Exposes the JavaScript [Attr](https://developer.mozilla.org/en/docs/Web/API/Attr) to Kotlin\n */\npublic external abstract class Attr : Node {\n    open val namespaceURI: String?\n    open val prefix: String?\n    open val localName: String\n    open val name: String\n    open var value: String\n    open val ownerElement: Element?\n    open val specified: Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [CharacterData](https://developer.mozilla.org/en/docs/Web/API/CharacterData) to Kotlin\n */\npublic external abstract class CharacterData : Node, NonDocumentTypeChildNode, ChildNode {\n    open var data: String\n    open val length: Int\n    fun substringData(offset: Int, count: Int): String\n    fun appendData(data: String)\n    fun insertData(offset: Int, data: String)\n    fun deleteData(offset: Int, count: Int)\n    fun replaceData(offset: Int, count: Int, data: String)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [Text](https://developer.mozilla.org/en/docs/Web/API/Text) to Kotlin\n */\npublic external open class Text(data: String = definedExternally) : CharacterData, Slotable, GeometryUtils {\n    open val wholeText: String\n    override val assignedSlot: HTMLSlotElement?\n    override val previousElementSibling: Element?\n    override val nextElementSibling: Element?\n    fun splitText(offset: Int): Text\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n    override fun before(vararg nodes: dynamic)\n    override fun after(vararg nodes: dynamic)\n    override fun replaceWith(vararg nodes: dynamic)\n    override fun remove()\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [CDATASection](https://developer.mozilla.org/en/docs/Web/API/CDATASection) to Kotlin\n */\npublic external open class CDATASection : Text {\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [ProcessingInstruction](https://developer.mozilla.org/en/docs/Web/API/ProcessingInstruction) to Kotlin\n */\npublic external abstract class ProcessingInstruction : CharacterData, LinkStyle, UnionElementOrProcessingInstruction {\n    open val target: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [Comment](https://developer.mozilla.org/en/docs/Web/API/Comment) to Kotlin\n */\npublic external open class Comment(data: String = definedExternally) : CharacterData {\n    override val previousElementSibling: Element?\n    override val nextElementSibling: Element?\n    override fun before(vararg nodes: dynamic)\n    override fun after(vararg nodes: dynamic)\n    override fun replaceWith(vararg nodes: dynamic)\n    override fun remove()\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [Range](https://developer.mozilla.org/en/docs/Web/API/Range) to Kotlin\n */\npublic external open class Range {\n    open val startContainer: Node\n    open val startOffset: Int\n    open val endContainer: Node\n    open val endOffset: Int\n    open val collapsed: Boolean\n    open val commonAncestorContainer: Node\n    fun setStart(node: Node, offset: Int)\n    fun setEnd(node: Node, offset: Int)\n    fun setStartBefore(node: Node)\n    fun setStartAfter(node: Node)\n    fun setEndBefore(node: Node)\n    fun setEndAfter(node: Node)\n    fun collapse(toStart: Boolean = definedExternally)\n    fun selectNode(node: Node)\n    fun selectNodeContents(node: Node)\n    fun compareBoundaryPoints(how: Short, sourceRange: Range): Short\n    fun deleteContents()\n    fun extractContents(): DocumentFragment\n    fun cloneContents(): DocumentFragment\n    fun insertNode(node: Node)\n    fun surroundContents(newParent: Node)\n    fun cloneRange(): Range\n    fun detach()\n    fun isPointInRange(node: Node, offset: Int): Boolean\n    fun comparePoint(node: Node, offset: Int): Short\n    fun intersectsNode(node: Node): Boolean\n    fun getClientRects(): Array<DOMRect>\n    fun getBoundingClientRect(): DOMRect\n    fun createContextualFragment(fragment: String): DocumentFragment\n\n    companion object {\n        val START_TO_START: Short\n        val START_TO_END: Short\n        val END_TO_END: Short\n        val END_TO_START: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [NodeIterator](https://developer.mozilla.org/en/docs/Web/API/NodeIterator) to Kotlin\n */\npublic external abstract class NodeIterator {\n    open val root: Node\n    open val referenceNode: Node\n    open val pointerBeforeReferenceNode: Boolean\n    open val whatToShow: Int\n    open val filter: NodeFilter?\n    fun nextNode(): Node?\n    fun previousNode(): Node?\n    fun detach()\n}\n\n/**\n * Exposes the JavaScript [TreeWalker](https://developer.mozilla.org/en/docs/Web/API/TreeWalker) to Kotlin\n */\npublic external abstract class TreeWalker {\n    open val root: Node\n    open val whatToShow: Int\n    open val filter: NodeFilter?\n    open var currentNode: Node\n    fun parentNode(): Node?\n    fun firstChild(): Node?\n    fun lastChild(): Node?\n    fun previousSibling(): Node?\n    fun nextSibling(): Node?\n    fun previousNode(): Node?\n    fun nextNode(): Node?\n}\n\n/**\n * Exposes the JavaScript [NodeFilter](https://developer.mozilla.org/en/docs/Web/API/NodeFilter) to Kotlin\n */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface NodeFilter {\n    fun acceptNode(node: Node): Short\n\n    companion object {\n        val FILTER_ACCEPT: Short\n        val FILTER_REJECT: Short\n        val FILTER_SKIP: Short\n        val SHOW_ALL: Int\n        val SHOW_ELEMENT: Int\n        val SHOW_ATTRIBUTE: Int\n        val SHOW_TEXT: Int\n        val SHOW_CDATA_SECTION: Int\n        val SHOW_ENTITY_REFERENCE: Int\n        val SHOW_ENTITY: Int\n        val SHOW_PROCESSING_INSTRUCTION: Int\n        val SHOW_COMMENT: Int\n        val SHOW_DOCUMENT: Int\n        val SHOW_DOCUMENT_TYPE: Int\n        val SHOW_DOCUMENT_FRAGMENT: Int\n        val SHOW_NOTATION: Int\n    }\n}\n\n/**\n * Exposes the JavaScript [DOMTokenList](https://developer.mozilla.org/en/docs/Web/API/DOMTokenList) to Kotlin\n */\npublic external abstract class DOMTokenList : ItemArrayLike<String> {\n    open var value: String\n    fun contains(token: String): Boolean\n    fun add(vararg tokens: String)\n    fun remove(vararg tokens: String)\n    fun toggle(token: String, force: Boolean = definedExternally): Boolean\n    fun replace(token: String, newToken: String)\n    fun supports(token: String): Boolean\n    override fun item(index: Int): String?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun DOMTokenList.get(index: Int): String? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [DOMPointReadOnly](https://developer.mozilla.org/en/docs/Web/API/DOMPointReadOnly) to Kotlin\n */\npublic external open class DOMPointReadOnly(x: Double, y: Double, z: Double, w: Double) {\n    open val x: Double\n    open val y: Double\n    open val z: Double\n    open val w: Double\n    fun matrixTransform(matrix: DOMMatrixReadOnly): DOMPoint\n}\n\n/**\n * Exposes the JavaScript [DOMPoint](https://developer.mozilla.org/en/docs/Web/API/DOMPoint) to Kotlin\n */\npublic external open class DOMPoint : DOMPointReadOnly {\n    constructor(point: DOMPointInit)\n    constructor(x: Double = definedExternally, y: Double = definedExternally, z: Double = definedExternally, w: Double = definedExternally)\n    override var x: Double\n    override var y: Double\n    override var z: Double\n    override var w: Double\n}\n\n/**\n * Exposes the JavaScript [DOMPointInit](https://developer.mozilla.org/en/docs/Web/API/DOMPointInit) to Kotlin\n */\npublic external interface DOMPointInit {\n    var x: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var y: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var z: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var w: Double? /* = 1.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun DOMPointInit(x: Double? = 0.0, y: Double? = 0.0, z: Double? = 0.0, w: Double? = 1.0): DOMPointInit {\n    val o = js(\"({})\")\n    o[\"x\"] = x\n    o[\"y\"] = y\n    o[\"z\"] = z\n    o[\"w\"] = w\n    return o\n}\n\n/**\n * Exposes the JavaScript [DOMRect](https://developer.mozilla.org/en/docs/Web/API/DOMRect) to Kotlin\n */\npublic external open class DOMRect(x: Double = definedExternally, y: Double = definedExternally, width: Double = definedExternally, height: Double = definedExternally) : DOMRectReadOnly {\n    override var x: Double\n    override var y: Double\n    override var width: Double\n    override var height: Double\n}\n\n/**\n * Exposes the JavaScript [DOMRectReadOnly](https://developer.mozilla.org/en/docs/Web/API/DOMRectReadOnly) to Kotlin\n */\npublic external open class DOMRectReadOnly(x: Double, y: Double, width: Double, height: Double) {\n    open val x: Double\n    open val y: Double\n    open val width: Double\n    open val height: Double\n    open val top: Double\n    open val right: Double\n    open val bottom: Double\n    open val left: Double\n}\n\npublic external interface DOMRectInit {\n    var x: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var y: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var width: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var height: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun DOMRectInit(x: Double? = 0.0, y: Double? = 0.0, width: Double? = 0.0, height: Double? = 0.0): DOMRectInit {\n    val o = js(\"({})\")\n    o[\"x\"] = x\n    o[\"y\"] = y\n    o[\"width\"] = width\n    o[\"height\"] = height\n    return o\n}\n\npublic external interface DOMRectList : ItemArrayLike<DOMRect> {\n    override fun item(index: Int): DOMRect?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun DOMRectList.get(index: Int): DOMRect? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [DOMQuad](https://developer.mozilla.org/en/docs/Web/API/DOMQuad) to Kotlin\n */\npublic external open class DOMQuad {\n    constructor(p1: DOMPointInit = definedExternally, p2: DOMPointInit = definedExternally, p3: DOMPointInit = definedExternally, p4: DOMPointInit = definedExternally)\n    constructor(rect: DOMRectInit)\n    open val p1: DOMPoint\n    open val p2: DOMPoint\n    open val p3: DOMPoint\n    open val p4: DOMPoint\n    open val bounds: DOMRectReadOnly\n}\n\n/**\n * Exposes the JavaScript [DOMMatrixReadOnly](https://developer.mozilla.org/en/docs/Web/API/DOMMatrixReadOnly) to Kotlin\n */\npublic external open class DOMMatrixReadOnly(numberSequence: Array<Double>) {\n    open val a: Double\n    open val b: Double\n    open val c: Double\n    open val d: Double\n    open val e: Double\n    open val f: Double\n    open val m11: Double\n    open val m12: Double\n    open val m13: Double\n    open val m14: Double\n    open val m21: Double\n    open val m22: Double\n    open val m23: Double\n    open val m24: Double\n    open val m31: Double\n    open val m32: Double\n    open val m33: Double\n    open val m34: Double\n    open val m41: Double\n    open val m42: Double\n    open val m43: Double\n    open val m44: Double\n    open val is2D: Boolean\n    open val isIdentity: Boolean\n    fun translate(tx: Double, ty: Double, tz: Double = definedExternally): DOMMatrix\n    fun scale(scale: Double, originX: Double = definedExternally, originY: Double = definedExternally): DOMMatrix\n    fun scale3d(scale: Double, originX: Double = definedExternally, originY: Double = definedExternally, originZ: Double = definedExternally): DOMMatrix\n    fun scaleNonUniform(scaleX: Double, scaleY: Double = definedExternally, scaleZ: Double = definedExternally, originX: Double = definedExternally, originY: Double = definedExternally, originZ: Double = definedExternally): DOMMatrix\n    fun rotate(angle: Double, originX: Double = definedExternally, originY: Double = definedExternally): DOMMatrix\n    fun rotateFromVector(x: Double, y: Double): DOMMatrix\n    fun rotateAxisAngle(x: Double, y: Double, z: Double, angle: Double): DOMMatrix\n    fun skewX(sx: Double): DOMMatrix\n    fun skewY(sy: Double): DOMMatrix\n    fun multiply(other: DOMMatrix): DOMMatrix\n    fun flipX(): DOMMatrix\n    fun flipY(): DOMMatrix\n    fun inverse(): DOMMatrix\n    fun transformPoint(point: DOMPointInit = definedExternally): DOMPoint\n    fun toFloat32Array(): Float32Array\n    fun toFloat64Array(): Float64Array\n}\n\n/**\n * Exposes the JavaScript [DOMMatrix](https://developer.mozilla.org/en/docs/Web/API/DOMMatrix) to Kotlin\n */\npublic external open class DOMMatrix() : DOMMatrixReadOnly {\n    constructor(transformList: String)\n    constructor(other: DOMMatrixReadOnly)\n    constructor(array32: Float32Array)\n    constructor(array64: Float64Array)\n    constructor(numberSequence: Array<Double>)\n    override var a: Double\n    override var b: Double\n    override var c: Double\n    override var d: Double\n    override var e: Double\n    override var f: Double\n    override var m11: Double\n    override var m12: Double\n    override var m13: Double\n    override var m14: Double\n    override var m21: Double\n    override var m22: Double\n    override var m23: Double\n    override var m24: Double\n    override var m31: Double\n    override var m32: Double\n    override var m33: Double\n    override var m34: Double\n    override var m41: Double\n    override var m42: Double\n    override var m43: Double\n    override var m44: Double\n    fun multiplySelf(other: DOMMatrix): DOMMatrix\n    fun preMultiplySelf(other: DOMMatrix): DOMMatrix\n    fun translateSelf(tx: Double, ty: Double, tz: Double = definedExternally): DOMMatrix\n    fun scaleSelf(scale: Double, originX: Double = definedExternally, originY: Double = definedExternally): DOMMatrix\n    fun scale3dSelf(scale: Double, originX: Double = definedExternally, originY: Double = definedExternally, originZ: Double = definedExternally): DOMMatrix\n    fun scaleNonUniformSelf(scaleX: Double, scaleY: Double = definedExternally, scaleZ: Double = definedExternally, originX: Double = definedExternally, originY: Double = definedExternally, originZ: Double = definedExternally): DOMMatrix\n    fun rotateSelf(angle: Double, originX: Double = definedExternally, originY: Double = definedExternally): DOMMatrix\n    fun rotateFromVectorSelf(x: Double, y: Double): DOMMatrix\n    fun rotateAxisAngleSelf(x: Double, y: Double, z: Double, angle: Double): DOMMatrix\n    fun skewXSelf(sx: Double): DOMMatrix\n    fun skewYSelf(sy: Double): DOMMatrix\n    fun invertSelf(): DOMMatrix\n    fun setMatrixValue(transformList: String): DOMMatrix\n}\n\npublic external interface ScrollOptions {\n    var behavior: ScrollBehavior? /* = ScrollBehavior.AUTO */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ScrollOptions(behavior: ScrollBehavior? = ScrollBehavior.AUTO): ScrollOptions {\n    val o = js(\"({})\")\n    o[\"behavior\"] = behavior\n    return o\n}\n\n/**\n * Exposes the JavaScript [ScrollToOptions](https://developer.mozilla.org/en/docs/Web/API/ScrollToOptions) to Kotlin\n */\npublic external interface ScrollToOptions : ScrollOptions {\n    var left: Double?\n        get() = definedExternally\n        set(value) = definedExternally\n    var top: Double?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ScrollToOptions(left: Double? = undefined, top: Double? = undefined, behavior: ScrollBehavior? = ScrollBehavior.AUTO): ScrollToOptions {\n    val o = js(\"({})\")\n    o[\"left\"] = left\n    o[\"top\"] = top\n    o[\"behavior\"] = behavior\n    return o\n}\n\n/**\n * Exposes the JavaScript [MediaQueryList](https://developer.mozilla.org/en/docs/Web/API/MediaQueryList) to Kotlin\n */\npublic external abstract class MediaQueryList : EventTarget {\n    open val media: String\n    open val matches: Boolean\n    open var onchange: ((Event) -> dynamic)?\n    fun addListener(listener: EventListener?)\n    fun addListener(listener: ((Event) -> Unit)?)\n    fun removeListener(listener: EventListener?)\n    fun removeListener(listener: ((Event) -> Unit)?)\n}\n\n/**\n * Exposes the JavaScript [MediaQueryListEvent](https://developer.mozilla.org/en/docs/Web/API/MediaQueryListEvent) to Kotlin\n */\npublic external open class MediaQueryListEvent(type: String, eventInitDict: MediaQueryListEventInit = definedExternally) : Event {\n    open val media: String\n    open val matches: Boolean\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface MediaQueryListEventInit : EventInit {\n    var media: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var matches: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun MediaQueryListEventInit(media: String? = \"\", matches: Boolean? = false, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): MediaQueryListEventInit {\n    val o = js(\"({})\")\n    o[\"media\"] = media\n    o[\"matches\"] = matches\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [Screen](https://developer.mozilla.org/en/docs/Web/API/Screen) to Kotlin\n */\npublic external abstract class Screen {\n    open val availWidth: Int\n    open val availHeight: Int\n    open val width: Int\n    open val height: Int\n    open val colorDepth: Int\n    open val pixelDepth: Int\n}\n\n/**\n * Exposes the JavaScript [CaretPosition](https://developer.mozilla.org/en/docs/Web/API/CaretPosition) to Kotlin\n */\npublic external abstract class CaretPosition {\n    open val offsetNode: Node\n    open val offset: Int\n    fun getClientRect(): DOMRect?\n}\n\npublic external interface ScrollIntoViewOptions : ScrollOptions {\n    var block: ScrollLogicalPosition? /* = ScrollLogicalPosition.CENTER */\n        get() = definedExternally\n        set(value) = definedExternally\n    var inline: ScrollLogicalPosition? /* = ScrollLogicalPosition.CENTER */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ScrollIntoViewOptions(block: ScrollLogicalPosition? = ScrollLogicalPosition.CENTER, inline: ScrollLogicalPosition? = ScrollLogicalPosition.CENTER, behavior: ScrollBehavior? = ScrollBehavior.AUTO): ScrollIntoViewOptions {\n    val o = js(\"({})\")\n    o[\"block\"] = block\n    o[\"inline\"] = inline\n    o[\"behavior\"] = behavior\n    return o\n}\n\npublic external interface BoxQuadOptions {\n    var box: CSSBoxType? /* = CSSBoxType.BORDER */\n        get() = definedExternally\n        set(value) = definedExternally\n    var relativeTo: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun BoxQuadOptions(box: CSSBoxType? = CSSBoxType.BORDER, relativeTo: dynamic = undefined): BoxQuadOptions {\n    val o = js(\"({})\")\n    o[\"box\"] = box\n    o[\"relativeTo\"] = relativeTo\n    return o\n}\n\npublic external interface ConvertCoordinateOptions {\n    var fromBox: CSSBoxType? /* = CSSBoxType.BORDER */\n        get() = definedExternally\n        set(value) = definedExternally\n    var toBox: CSSBoxType? /* = CSSBoxType.BORDER */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ConvertCoordinateOptions(fromBox: CSSBoxType? = CSSBoxType.BORDER, toBox: CSSBoxType? = CSSBoxType.BORDER): ConvertCoordinateOptions {\n    val o = js(\"({})\")\n    o[\"fromBox\"] = fromBox\n    o[\"toBox\"] = toBox\n    return o\n}\n\n/**\n * Exposes the JavaScript [GeometryUtils](https://developer.mozilla.org/en/docs/Web/API/GeometryUtils) to Kotlin\n */\npublic external interface GeometryUtils {\n    fun getBoxQuads(options: BoxQuadOptions = definedExternally): Array<DOMQuad>\n    fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions = definedExternally): DOMQuad\n    fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions = definedExternally): DOMQuad\n    fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions = definedExternally): DOMPoint\n}\n\n/**\n * Exposes the JavaScript [Touch](https://developer.mozilla.org/en/docs/Web/API/Touch) to Kotlin\n */\npublic external abstract class Touch {\n    open val identifier: Int\n    open val target: EventTarget\n    open val screenX: Int\n    open val screenY: Int\n    open val clientX: Int\n    open val clientY: Int\n    open val pageX: Int\n    open val pageY: Int\n    open val region: String?\n}\n\npublic external abstract class TouchList : ItemArrayLike<Touch> {\n    override fun item(index: Int): Touch?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun TouchList.get(index: Int): Touch? = asDynamic()[index]\n\npublic external open class TouchEvent : UIEvent {\n    open val touches: TouchList\n    open val targetTouches: TouchList\n    open val changedTouches: TouchList\n    open val altKey: Boolean\n    open val metaKey: Boolean\n    open val ctrlKey: Boolean\n    open val shiftKey: Boolean\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [Image](https://developer.mozilla.org/en/docs/Web/API/Image) to Kotlin\n */\npublic external open class Image(width: Int = definedExternally, height: Int = definedExternally) : HTMLImageElement {\n    override var onabort: ((Event) -> dynamic)?\n    override var onblur: ((FocusEvent) -> dynamic)?\n    override var oncancel: ((Event) -> dynamic)?\n    override var oncanplay: ((Event) -> dynamic)?\n    override var oncanplaythrough: ((Event) -> dynamic)?\n    override var onchange: ((Event) -> dynamic)?\n    override var onclick: ((MouseEvent) -> dynamic)?\n    override var onclose: ((Event) -> dynamic)?\n    override var oncontextmenu: ((MouseEvent) -> dynamic)?\n    override var oncuechange: ((Event) -> dynamic)?\n    override var ondblclick: ((MouseEvent) -> dynamic)?\n    override var ondrag: ((DragEvent) -> dynamic)?\n    override var ondragend: ((DragEvent) -> dynamic)?\n    override var ondragenter: ((DragEvent) -> dynamic)?\n    override var ondragexit: ((DragEvent) -> dynamic)?\n    override var ondragleave: ((DragEvent) -> dynamic)?\n    override var ondragover: ((DragEvent) -> dynamic)?\n    override var ondragstart: ((DragEvent) -> dynamic)?\n    override var ondrop: ((DragEvent) -> dynamic)?\n    override var ondurationchange: ((Event) -> dynamic)?\n    override var onemptied: ((Event) -> dynamic)?\n    override var onended: ((Event) -> dynamic)?\n    override var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n    override var onfocus: ((FocusEvent) -> dynamic)?\n    override var oninput: ((InputEvent) -> dynamic)?\n    override var oninvalid: ((Event) -> dynamic)?\n    override var onkeydown: ((KeyboardEvent) -> dynamic)?\n    override var onkeypress: ((KeyboardEvent) -> dynamic)?\n    override var onkeyup: ((KeyboardEvent) -> dynamic)?\n    override var onload: ((Event) -> dynamic)?\n    override var onloadeddata: ((Event) -> dynamic)?\n    override var onloadedmetadata: ((Event) -> dynamic)?\n    override var onloadend: ((Event) -> dynamic)?\n    override var onloadstart: ((ProgressEvent) -> dynamic)?\n    override var onmousedown: ((MouseEvent) -> dynamic)?\n    override var onmouseenter: ((MouseEvent) -> dynamic)?\n    override var onmouseleave: ((MouseEvent) -> dynamic)?\n    override var onmousemove: ((MouseEvent) -> dynamic)?\n    override var onmouseout: ((MouseEvent) -> dynamic)?\n    override var onmouseover: ((MouseEvent) -> dynamic)?\n    override var onmouseup: ((MouseEvent) -> dynamic)?\n    override var onwheel: ((WheelEvent) -> dynamic)?\n    override var onpause: ((Event) -> dynamic)?\n    override var onplay: ((Event) -> dynamic)?\n    override var onplaying: ((Event) -> dynamic)?\n    override var onprogress: ((ProgressEvent) -> dynamic)?\n    override var onratechange: ((Event) -> dynamic)?\n    override var onreset: ((Event) -> dynamic)?\n    override var onresize: ((Event) -> dynamic)?\n    override var onscroll: ((Event) -> dynamic)?\n    override var onseeked: ((Event) -> dynamic)?\n    override var onseeking: ((Event) -> dynamic)?\n    override var onselect: ((Event) -> dynamic)?\n    override var onshow: ((Event) -> dynamic)?\n    override var onstalled: ((Event) -> dynamic)?\n    override var onsubmit: ((Event) -> dynamic)?\n    override var onsuspend: ((Event) -> dynamic)?\n    override var ontimeupdate: ((Event) -> dynamic)?\n    override var ontoggle: ((Event) -> dynamic)?\n    override var onvolumechange: ((Event) -> dynamic)?\n    override var onwaiting: ((Event) -> dynamic)?\n    override var ongotpointercapture: ((PointerEvent) -> dynamic)?\n    override var onlostpointercapture: ((PointerEvent) -> dynamic)?\n    override var onpointerdown: ((PointerEvent) -> dynamic)?\n    override var onpointermove: ((PointerEvent) -> dynamic)?\n    override var onpointerup: ((PointerEvent) -> dynamic)?\n    override var onpointercancel: ((PointerEvent) -> dynamic)?\n    override var onpointerover: ((PointerEvent) -> dynamic)?\n    override var onpointerout: ((PointerEvent) -> dynamic)?\n    override var onpointerenter: ((PointerEvent) -> dynamic)?\n    override var onpointerleave: ((PointerEvent) -> dynamic)?\n    override var oncopy: ((ClipboardEvent) -> dynamic)?\n    override var oncut: ((ClipboardEvent) -> dynamic)?\n    override var onpaste: ((ClipboardEvent) -> dynamic)?\n    override var contentEditable: String\n    override val isContentEditable: Boolean\n    override val style: CSSStyleDeclaration\n    override val children: HTMLCollection\n    override val firstElementChild: Element?\n    override val lastElementChild: Element?\n    override val childElementCount: Int\n    override val previousElementSibling: Element?\n    override val nextElementSibling: Element?\n    override val assignedSlot: HTMLSlotElement?\n    override fun prepend(vararg nodes: dynamic)\n    override fun append(vararg nodes: dynamic)\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n    override fun before(vararg nodes: dynamic)\n    override fun after(vararg nodes: dynamic)\n    override fun replaceWith(vararg nodes: dynamic)\n    override fun remove()\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external open class Audio(src: String = definedExternally) : HTMLAudioElement {\n    override var onabort: ((Event) -> dynamic)?\n    override var onblur: ((FocusEvent) -> dynamic)?\n    override var oncancel: ((Event) -> dynamic)?\n    override var oncanplay: ((Event) -> dynamic)?\n    override var oncanplaythrough: ((Event) -> dynamic)?\n    override var onchange: ((Event) -> dynamic)?\n    override var onclick: ((MouseEvent) -> dynamic)?\n    override var onclose: ((Event) -> dynamic)?\n    override var oncontextmenu: ((MouseEvent) -> dynamic)?\n    override var oncuechange: ((Event) -> dynamic)?\n    override var ondblclick: ((MouseEvent) -> dynamic)?\n    override var ondrag: ((DragEvent) -> dynamic)?\n    override var ondragend: ((DragEvent) -> dynamic)?\n    override var ondragenter: ((DragEvent) -> dynamic)?\n    override var ondragexit: ((DragEvent) -> dynamic)?\n    override var ondragleave: ((DragEvent) -> dynamic)?\n    override var ondragover: ((DragEvent) -> dynamic)?\n    override var ondragstart: ((DragEvent) -> dynamic)?\n    override var ondrop: ((DragEvent) -> dynamic)?\n    override var ondurationchange: ((Event) -> dynamic)?\n    override var onemptied: ((Event) -> dynamic)?\n    override var onended: ((Event) -> dynamic)?\n    override var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n    override var onfocus: ((FocusEvent) -> dynamic)?\n    override var oninput: ((InputEvent) -> dynamic)?\n    override var oninvalid: ((Event) -> dynamic)?\n    override var onkeydown: ((KeyboardEvent) -> dynamic)?\n    override var onkeypress: ((KeyboardEvent) -> dynamic)?\n    override var onkeyup: ((KeyboardEvent) -> dynamic)?\n    override var onload: ((Event) -> dynamic)?\n    override var onloadeddata: ((Event) -> dynamic)?\n    override var onloadedmetadata: ((Event) -> dynamic)?\n    override var onloadend: ((Event) -> dynamic)?\n    override var onloadstart: ((ProgressEvent) -> dynamic)?\n    override var onmousedown: ((MouseEvent) -> dynamic)?\n    override var onmouseenter: ((MouseEvent) -> dynamic)?\n    override var onmouseleave: ((MouseEvent) -> dynamic)?\n    override var onmousemove: ((MouseEvent) -> dynamic)?\n    override var onmouseout: ((MouseEvent) -> dynamic)?\n    override var onmouseover: ((MouseEvent) -> dynamic)?\n    override var onmouseup: ((MouseEvent) -> dynamic)?\n    override var onwheel: ((WheelEvent) -> dynamic)?\n    override var onpause: ((Event) -> dynamic)?\n    override var onplay: ((Event) -> dynamic)?\n    override var onplaying: ((Event) -> dynamic)?\n    override var onprogress: ((ProgressEvent) -> dynamic)?\n    override var onratechange: ((Event) -> dynamic)?\n    override var onreset: ((Event) -> dynamic)?\n    override var onresize: ((Event) -> dynamic)?\n    override var onscroll: ((Event) -> dynamic)?\n    override var onseeked: ((Event) -> dynamic)?\n    override var onseeking: ((Event) -> dynamic)?\n    override var onselect: ((Event) -> dynamic)?\n    override var onshow: ((Event) -> dynamic)?\n    override var onstalled: ((Event) -> dynamic)?\n    override var onsubmit: ((Event) -> dynamic)?\n    override var onsuspend: ((Event) -> dynamic)?\n    override var ontimeupdate: ((Event) -> dynamic)?\n    override var ontoggle: ((Event) -> dynamic)?\n    override var onvolumechange: ((Event) -> dynamic)?\n    override var onwaiting: ((Event) -> dynamic)?\n    override var ongotpointercapture: ((PointerEvent) -> dynamic)?\n    override var onlostpointercapture: ((PointerEvent) -> dynamic)?\n    override var onpointerdown: ((PointerEvent) -> dynamic)?\n    override var onpointermove: ((PointerEvent) -> dynamic)?\n    override var onpointerup: ((PointerEvent) -> dynamic)?\n    override var onpointercancel: ((PointerEvent) -> dynamic)?\n    override var onpointerover: ((PointerEvent) -> dynamic)?\n    override var onpointerout: ((PointerEvent) -> dynamic)?\n    override var onpointerenter: ((PointerEvent) -> dynamic)?\n    override var onpointerleave: ((PointerEvent) -> dynamic)?\n    override var oncopy: ((ClipboardEvent) -> dynamic)?\n    override var oncut: ((ClipboardEvent) -> dynamic)?\n    override var onpaste: ((ClipboardEvent) -> dynamic)?\n    override var contentEditable: String\n    override val isContentEditable: Boolean\n    override val style: CSSStyleDeclaration\n    override val children: HTMLCollection\n    override val firstElementChild: Element?\n    override val lastElementChild: Element?\n    override val childElementCount: Int\n    override val previousElementSibling: Element?\n    override val nextElementSibling: Element?\n    override val assignedSlot: HTMLSlotElement?\n    override fun prepend(vararg nodes: dynamic)\n    override fun append(vararg nodes: dynamic)\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n    override fun before(vararg nodes: dynamic)\n    override fun after(vararg nodes: dynamic)\n    override fun replaceWith(vararg nodes: dynamic)\n    override fun remove()\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n\n    companion object {\n        val NETWORK_EMPTY: Short\n        val NETWORK_IDLE: Short\n        val NETWORK_LOADING: Short\n        val NETWORK_NO_SOURCE: Short\n        val HAVE_NOTHING: Short\n        val HAVE_METADATA: Short\n        val HAVE_CURRENT_DATA: Short\n        val HAVE_FUTURE_DATA: Short\n        val HAVE_ENOUGH_DATA: Short\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [Option](https://developer.mozilla.org/en/docs/Web/API/Option) to Kotlin\n */\npublic external open class Option(text: String = definedExternally, value: String = definedExternally, defaultSelected: Boolean = definedExternally, selected: Boolean = definedExternally) : HTMLOptionElement {\n    override var onabort: ((Event) -> dynamic)?\n    override var onblur: ((FocusEvent) -> dynamic)?\n    override var oncancel: ((Event) -> dynamic)?\n    override var oncanplay: ((Event) -> dynamic)?\n    override var oncanplaythrough: ((Event) -> dynamic)?\n    override var onchange: ((Event) -> dynamic)?\n    override var onclick: ((MouseEvent) -> dynamic)?\n    override var onclose: ((Event) -> dynamic)?\n    override var oncontextmenu: ((MouseEvent) -> dynamic)?\n    override var oncuechange: ((Event) -> dynamic)?\n    override var ondblclick: ((MouseEvent) -> dynamic)?\n    override var ondrag: ((DragEvent) -> dynamic)?\n    override var ondragend: ((DragEvent) -> dynamic)?\n    override var ondragenter: ((DragEvent) -> dynamic)?\n    override var ondragexit: ((DragEvent) -> dynamic)?\n    override var ondragleave: ((DragEvent) -> dynamic)?\n    override var ondragover: ((DragEvent) -> dynamic)?\n    override var ondragstart: ((DragEvent) -> dynamic)?\n    override var ondrop: ((DragEvent) -> dynamic)?\n    override var ondurationchange: ((Event) -> dynamic)?\n    override var onemptied: ((Event) -> dynamic)?\n    override var onended: ((Event) -> dynamic)?\n    override var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n    override var onfocus: ((FocusEvent) -> dynamic)?\n    override var oninput: ((InputEvent) -> dynamic)?\n    override var oninvalid: ((Event) -> dynamic)?\n    override var onkeydown: ((KeyboardEvent) -> dynamic)?\n    override var onkeypress: ((KeyboardEvent) -> dynamic)?\n    override var onkeyup: ((KeyboardEvent) -> dynamic)?\n    override var onload: ((Event) -> dynamic)?\n    override var onloadeddata: ((Event) -> dynamic)?\n    override var onloadedmetadata: ((Event) -> dynamic)?\n    override var onloadend: ((Event) -> dynamic)?\n    override var onloadstart: ((ProgressEvent) -> dynamic)?\n    override var onmousedown: ((MouseEvent) -> dynamic)?\n    override var onmouseenter: ((MouseEvent) -> dynamic)?\n    override var onmouseleave: ((MouseEvent) -> dynamic)?\n    override var onmousemove: ((MouseEvent) -> dynamic)?\n    override var onmouseout: ((MouseEvent) -> dynamic)?\n    override var onmouseover: ((MouseEvent) -> dynamic)?\n    override var onmouseup: ((MouseEvent) -> dynamic)?\n    override var onwheel: ((WheelEvent) -> dynamic)?\n    override var onpause: ((Event) -> dynamic)?\n    override var onplay: ((Event) -> dynamic)?\n    override var onplaying: ((Event) -> dynamic)?\n    override var onprogress: ((ProgressEvent) -> dynamic)?\n    override var onratechange: ((Event) -> dynamic)?\n    override var onreset: ((Event) -> dynamic)?\n    override var onresize: ((Event) -> dynamic)?\n    override var onscroll: ((Event) -> dynamic)?\n    override var onseeked: ((Event) -> dynamic)?\n    override var onseeking: ((Event) -> dynamic)?\n    override var onselect: ((Event) -> dynamic)?\n    override var onshow: ((Event) -> dynamic)?\n    override var onstalled: ((Event) -> dynamic)?\n    override var onsubmit: ((Event) -> dynamic)?\n    override var onsuspend: ((Event) -> dynamic)?\n    override var ontimeupdate: ((Event) -> dynamic)?\n    override var ontoggle: ((Event) -> dynamic)?\n    override var onvolumechange: ((Event) -> dynamic)?\n    override var onwaiting: ((Event) -> dynamic)?\n    override var ongotpointercapture: ((PointerEvent) -> dynamic)?\n    override var onlostpointercapture: ((PointerEvent) -> dynamic)?\n    override var onpointerdown: ((PointerEvent) -> dynamic)?\n    override var onpointermove: ((PointerEvent) -> dynamic)?\n    override var onpointerup: ((PointerEvent) -> dynamic)?\n    override var onpointercancel: ((PointerEvent) -> dynamic)?\n    override var onpointerover: ((PointerEvent) -> dynamic)?\n    override var onpointerout: ((PointerEvent) -> dynamic)?\n    override var onpointerenter: ((PointerEvent) -> dynamic)?\n    override var onpointerleave: ((PointerEvent) -> dynamic)?\n    override var oncopy: ((ClipboardEvent) -> dynamic)?\n    override var oncut: ((ClipboardEvent) -> dynamic)?\n    override var onpaste: ((ClipboardEvent) -> dynamic)?\n    override var contentEditable: String\n    override val isContentEditable: Boolean\n    override val style: CSSStyleDeclaration\n    override val children: HTMLCollection\n    override val firstElementChild: Element?\n    override val lastElementChild: Element?\n    override val childElementCount: Int\n    override val previousElementSibling: Element?\n    override val nextElementSibling: Element?\n    override val assignedSlot: HTMLSlotElement?\n    override fun prepend(vararg nodes: dynamic)\n    override fun append(vararg nodes: dynamic)\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n    override fun before(vararg nodes: dynamic)\n    override fun after(vararg nodes: dynamic)\n    override fun replaceWith(vararg nodes: dynamic)\n    override fun remove()\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external interface UnionElementOrHTMLCollection\n\npublic external interface UnionElementOrRadioNodeList\n\npublic external interface UnionHTMLOptGroupElementOrHTMLOptionElement\n\npublic external interface UnionAudioTrackOrTextTrackOrVideoTrack\n\npublic external interface UnionElementOrMouseEvent\n\npublic external interface RenderingContext\n\npublic external interface HTMLOrSVGImageElement : CanvasImageSource\n\npublic external interface CanvasImageSource : ImageBitmapSource\n\npublic external interface ImageBitmapSource\n\npublic external interface UnionMessagePortOrWindowProxy\n\npublic external interface HTMLOrSVGScriptElement\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface DocumentReadyState {\n    companion object\n}\n\npublic inline val DocumentReadyState.Companion.LOADING: DocumentReadyState get() = \"loading\".asDynamic().unsafeCast<DocumentReadyState>()\n\npublic inline val DocumentReadyState.Companion.INTERACTIVE: DocumentReadyState get() = \"interactive\".asDynamic().unsafeCast<DocumentReadyState>()\n\npublic inline val DocumentReadyState.Companion.COMPLETE: DocumentReadyState get() = \"complete\".asDynamic().unsafeCast<DocumentReadyState>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface CanPlayTypeResult {\n    companion object\n}\n\npublic inline val CanPlayTypeResult.Companion.EMPTY: CanPlayTypeResult get() = \"\".asDynamic().unsafeCast<CanPlayTypeResult>()\n\npublic inline val CanPlayTypeResult.Companion.MAYBE: CanPlayTypeResult get() = \"maybe\".asDynamic().unsafeCast<CanPlayTypeResult>()\n\npublic inline val CanPlayTypeResult.Companion.PROBABLY: CanPlayTypeResult get() = \"probably\".asDynamic().unsafeCast<CanPlayTypeResult>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface TextTrackMode {\n    companion object\n}\n\npublic inline val TextTrackMode.Companion.DISABLED: TextTrackMode get() = \"disabled\".asDynamic().unsafeCast<TextTrackMode>()\n\npublic inline val TextTrackMode.Companion.HIDDEN: TextTrackMode get() = \"hidden\".asDynamic().unsafeCast<TextTrackMode>()\n\npublic inline val TextTrackMode.Companion.SHOWING: TextTrackMode get() = \"showing\".asDynamic().unsafeCast<TextTrackMode>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface TextTrackKind {\n    companion object\n}\n\npublic inline val TextTrackKind.Companion.SUBTITLES: TextTrackKind get() = \"subtitles\".asDynamic().unsafeCast<TextTrackKind>()\n\npublic inline val TextTrackKind.Companion.CAPTIONS: TextTrackKind get() = \"captions\".asDynamic().unsafeCast<TextTrackKind>()\n\npublic inline val TextTrackKind.Companion.DESCRIPTIONS: TextTrackKind get() = \"descriptions\".asDynamic().unsafeCast<TextTrackKind>()\n\npublic inline val TextTrackKind.Companion.CHAPTERS: TextTrackKind get() = \"chapters\".asDynamic().unsafeCast<TextTrackKind>()\n\npublic inline val TextTrackKind.Companion.METADATA: TextTrackKind get() = \"metadata\".asDynamic().unsafeCast<TextTrackKind>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface SelectionMode {\n    companion object\n}\n\npublic inline val SelectionMode.Companion.SELECT: SelectionMode get() = \"select\".asDynamic().unsafeCast<SelectionMode>()\n\npublic inline val SelectionMode.Companion.START: SelectionMode get() = \"start\".asDynamic().unsafeCast<SelectionMode>()\n\npublic inline val SelectionMode.Companion.END: SelectionMode get() = \"end\".asDynamic().unsafeCast<SelectionMode>()\n\npublic inline val SelectionMode.Companion.PRESERVE: SelectionMode get() = \"preserve\".asDynamic().unsafeCast<SelectionMode>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface CanvasFillRule {\n    companion object\n}\n\npublic inline val CanvasFillRule.Companion.NONZERO: CanvasFillRule get() = \"nonzero\".asDynamic().unsafeCast<CanvasFillRule>()\n\npublic inline val CanvasFillRule.Companion.EVENODD: CanvasFillRule get() = \"evenodd\".asDynamic().unsafeCast<CanvasFillRule>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface ImageSmoothingQuality {\n    companion object\n}\n\npublic inline val ImageSmoothingQuality.Companion.LOW: ImageSmoothingQuality get() = \"low\".asDynamic().unsafeCast<ImageSmoothingQuality>()\n\npublic inline val ImageSmoothingQuality.Companion.MEDIUM: ImageSmoothingQuality get() = \"medium\".asDynamic().unsafeCast<ImageSmoothingQuality>()\n\npublic inline val ImageSmoothingQuality.Companion.HIGH: ImageSmoothingQuality get() = \"high\".asDynamic().unsafeCast<ImageSmoothingQuality>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface CanvasLineCap {\n    companion object\n}\n\npublic inline val CanvasLineCap.Companion.BUTT: CanvasLineCap get() = \"butt\".asDynamic().unsafeCast<CanvasLineCap>()\n\npublic inline val CanvasLineCap.Companion.ROUND: CanvasLineCap get() = \"round\".asDynamic().unsafeCast<CanvasLineCap>()\n\npublic inline val CanvasLineCap.Companion.SQUARE: CanvasLineCap get() = \"square\".asDynamic().unsafeCast<CanvasLineCap>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface CanvasLineJoin {\n    companion object\n}\n\npublic inline val CanvasLineJoin.Companion.ROUND: CanvasLineJoin get() = \"round\".asDynamic().unsafeCast<CanvasLineJoin>()\n\npublic inline val CanvasLineJoin.Companion.BEVEL: CanvasLineJoin get() = \"bevel\".asDynamic().unsafeCast<CanvasLineJoin>()\n\npublic inline val CanvasLineJoin.Companion.MITER: CanvasLineJoin get() = \"miter\".asDynamic().unsafeCast<CanvasLineJoin>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface CanvasTextAlign {\n    companion object\n}\n\npublic inline val CanvasTextAlign.Companion.START: CanvasTextAlign get() = \"start\".asDynamic().unsafeCast<CanvasTextAlign>()\n\npublic inline val CanvasTextAlign.Companion.END: CanvasTextAlign get() = \"end\".asDynamic().unsafeCast<CanvasTextAlign>()\n\npublic inline val CanvasTextAlign.Companion.LEFT: CanvasTextAlign get() = \"left\".asDynamic().unsafeCast<CanvasTextAlign>()\n\npublic inline val CanvasTextAlign.Companion.RIGHT: CanvasTextAlign get() = \"right\".asDynamic().unsafeCast<CanvasTextAlign>()\n\npublic inline val CanvasTextAlign.Companion.CENTER: CanvasTextAlign get() = \"center\".asDynamic().unsafeCast<CanvasTextAlign>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface CanvasTextBaseline {\n    companion object\n}\n\npublic inline val CanvasTextBaseline.Companion.TOP: CanvasTextBaseline get() = \"top\".asDynamic().unsafeCast<CanvasTextBaseline>()\n\npublic inline val CanvasTextBaseline.Companion.HANGING: CanvasTextBaseline get() = \"hanging\".asDynamic().unsafeCast<CanvasTextBaseline>()\n\npublic inline val CanvasTextBaseline.Companion.MIDDLE: CanvasTextBaseline get() = \"middle\".asDynamic().unsafeCast<CanvasTextBaseline>()\n\npublic inline val CanvasTextBaseline.Companion.ALPHABETIC: CanvasTextBaseline get() = \"alphabetic\".asDynamic().unsafeCast<CanvasTextBaseline>()\n\npublic inline val CanvasTextBaseline.Companion.IDEOGRAPHIC: CanvasTextBaseline get() = \"ideographic\".asDynamic().unsafeCast<CanvasTextBaseline>()\n\npublic inline val CanvasTextBaseline.Companion.BOTTOM: CanvasTextBaseline get() = \"bottom\".asDynamic().unsafeCast<CanvasTextBaseline>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface CanvasDirection {\n    companion object\n}\n\npublic inline val CanvasDirection.Companion.LTR: CanvasDirection get() = \"ltr\".asDynamic().unsafeCast<CanvasDirection>()\n\npublic inline val CanvasDirection.Companion.RTL: CanvasDirection get() = \"rtl\".asDynamic().unsafeCast<CanvasDirection>()\n\npublic inline val CanvasDirection.Companion.INHERIT: CanvasDirection get() = \"inherit\".asDynamic().unsafeCast<CanvasDirection>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface ScrollRestoration {\n    companion object\n}\n\npublic inline val ScrollRestoration.Companion.AUTO: ScrollRestoration get() = \"auto\".asDynamic().unsafeCast<ScrollRestoration>()\n\npublic inline val ScrollRestoration.Companion.MANUAL: ScrollRestoration get() = \"manual\".asDynamic().unsafeCast<ScrollRestoration>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface ImageOrientation {\n    companion object\n}\n\npublic inline val ImageOrientation.Companion.NONE: ImageOrientation get() = \"none\".asDynamic().unsafeCast<ImageOrientation>()\n\npublic inline val ImageOrientation.Companion.FLIPY: ImageOrientation get() = \"flipY\".asDynamic().unsafeCast<ImageOrientation>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface PremultiplyAlpha {\n    companion object\n}\n\npublic inline val PremultiplyAlpha.Companion.NONE: PremultiplyAlpha get() = \"none\".asDynamic().unsafeCast<PremultiplyAlpha>()\n\npublic inline val PremultiplyAlpha.Companion.PREMULTIPLY: PremultiplyAlpha get() = \"premultiply\".asDynamic().unsafeCast<PremultiplyAlpha>()\n\npublic inline val PremultiplyAlpha.Companion.DEFAULT: PremultiplyAlpha get() = \"default\".asDynamic().unsafeCast<PremultiplyAlpha>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface ColorSpaceConversion {\n    companion object\n}\n\npublic inline val ColorSpaceConversion.Companion.NONE: ColorSpaceConversion get() = \"none\".asDynamic().unsafeCast<ColorSpaceConversion>()\n\npublic inline val ColorSpaceConversion.Companion.DEFAULT: ColorSpaceConversion get() = \"default\".asDynamic().unsafeCast<ColorSpaceConversion>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface ResizeQuality {\n    companion object\n}\n\npublic inline val ResizeQuality.Companion.PIXELATED: ResizeQuality get() = \"pixelated\".asDynamic().unsafeCast<ResizeQuality>()\n\npublic inline val ResizeQuality.Companion.LOW: ResizeQuality get() = \"low\".asDynamic().unsafeCast<ResizeQuality>()\n\npublic inline val ResizeQuality.Companion.MEDIUM: ResizeQuality get() = \"medium\".asDynamic().unsafeCast<ResizeQuality>()\n\npublic inline val ResizeQuality.Companion.HIGH: ResizeQuality get() = \"high\".asDynamic().unsafeCast<ResizeQuality>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface BinaryType {\n    companion object\n}\n\npublic inline val BinaryType.Companion.BLOB: BinaryType get() = \"blob\".asDynamic().unsafeCast<BinaryType>()\n\npublic inline val BinaryType.Companion.ARRAYBUFFER: BinaryType get() = \"arraybuffer\".asDynamic().unsafeCast<BinaryType>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface WorkerType {\n    companion object\n}\n\npublic inline val WorkerType.Companion.CLASSIC: WorkerType get() = \"classic\".asDynamic().unsafeCast<WorkerType>()\n\npublic inline val WorkerType.Companion.MODULE: WorkerType get() = \"module\".asDynamic().unsafeCast<WorkerType>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface ShadowRootMode {\n    companion object\n}\n\npublic inline val ShadowRootMode.Companion.OPEN: ShadowRootMode get() = \"open\".asDynamic().unsafeCast<ShadowRootMode>()\n\npublic inline val ShadowRootMode.Companion.CLOSED: ShadowRootMode get() = \"closed\".asDynamic().unsafeCast<ShadowRootMode>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface ScrollBehavior {\n    companion object\n}\n\npublic inline val ScrollBehavior.Companion.AUTO: ScrollBehavior get() = \"auto\".asDynamic().unsafeCast<ScrollBehavior>()\n\npublic inline val ScrollBehavior.Companion.INSTANT: ScrollBehavior get() = \"instant\".asDynamic().unsafeCast<ScrollBehavior>()\n\npublic inline val ScrollBehavior.Companion.SMOOTH: ScrollBehavior get() = \"smooth\".asDynamic().unsafeCast<ScrollBehavior>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface ScrollLogicalPosition {\n    companion object\n}\n\npublic inline val ScrollLogicalPosition.Companion.START: ScrollLogicalPosition get() = \"start\".asDynamic().unsafeCast<ScrollLogicalPosition>()\n\npublic inline val ScrollLogicalPosition.Companion.CENTER: ScrollLogicalPosition get() = \"center\".asDynamic().unsafeCast<ScrollLogicalPosition>()\n\npublic inline val ScrollLogicalPosition.Companion.END: ScrollLogicalPosition get() = \"end\".asDynamic().unsafeCast<ScrollLogicalPosition>()\n\npublic inline val ScrollLogicalPosition.Companion.NEAREST: ScrollLogicalPosition get() = \"nearest\".asDynamic().unsafeCast<ScrollLogicalPosition>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface CSSBoxType {\n    companion object\n}\n\npublic inline val CSSBoxType.Companion.MARGIN: CSSBoxType get() = \"margin\".asDynamic().unsafeCast<CSSBoxType>()\n\npublic inline val CSSBoxType.Companion.BORDER: CSSBoxType get() = \"border\".asDynamic().unsafeCast<CSSBoxType>()\n\npublic inline val CSSBoxType.Companion.PADDING: CSSBoxType get() = \"padding\".asDynamic().unsafeCast<CSSBoxType>()\n\npublic inline val CSSBoxType.Companion.CONTENT: CSSBoxType get() = \"content\".asDynamic().unsafeCast<CSSBoxType>()",null,null],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iCAgBA,iC;eC0+BA,I;mCCr6BA,gD;;;;4BCnFA,iC;qBCgBA,mB;kBC2iBA,mC;;;;;;;;;;kBCvhBA,wD;mBCk9CA,oC;;;;;;;;;gCA1KA,yD;uBAAA,gD;;;;;;yBClvCA,+C;;;;;;;;;;;;;;;;YC9DQ,M;2BAUA,oD;uBCkLR,qB;aAAA,kE;;;;;oBH22BA,6C;sBAAA,0C;6BAAA,mD;;;wBIm2DA,wB;mBCnpFA,mB;;;;;;;;;;;;;;;;;;sBCvLA,wC;kBAAA,gB;;;;;;;;;;;;;;;;;wBN+JA,+C;;;;;;;;;;;;;eOnPA,a;;;;;;;;;;;;;;;;;;;;;;aCyGA,+B;qBC1BA,8C;;6BXsvCA,2B;;;;cYn0CA,yC;yBAAA,qD;iBCyC+B,kD;;;;;;;2BCuV/B,qC;;;;;;;;;;;;;;;cChJ+B,yB;;;;;;WA0KX,gB;;;;;;;;;gBCzZpB,K;kBbgEA,0C;oBcvCwD,sB;;;;;;;;;;;;iBbhBhD,oD;;Wc2C4B,sB;;;;;;;;WC4KV,e;YA3CA,uB;WAwCA,sB;;;;oBClML,+B;;;;;mBlB64BrB,4C;mBmBx6BA,wB;;;8BCsIA,6G;2BAAA,yE;;epBsmCA,wC;;;;;;;;;;;;;;;;;;;;;;;;;eqBznCA,oB;sBAtCQ,mC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iBZlCR,0C;;;;;;;;;;;;;;;;;;;gBNuIA,qE;gBAEA,qE;iBAVA,sE;gBAFA,qE;iBAOA,sE;gBAFA,qE;;;;;;;;;;;;;;;yCmB/EI,8E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ECzGJ,iB;IAAA,qB;IACC,eAAwC,a;G;;;;;;;EADzC,6B;IAAA,4B;MAAA,W;KAAA,qB;G;ECAA,6B;G;;;;;;ECAA,yB;G;;;;;;EAGA,+B;IAAA,mC;G;;;;;;;EAAA,2C;IAAA,0C;MAAA,yB;KAAA,mC;G;ECOqB,iE;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AC/C,aAAO,I;;;M+Bx0C6C,iB;K;GAAvD,C;iIAEA,2C;IAAmB,kB;MAAA,KAAU,C;IAAG,kB;MAAA,KAAU,C;IAAG,qB;MAAA,QAAa,IAAK,MAAL,GAAa,EAAb,I;IAAiB,sB;MAAA,SAAc,IAAK,OAAL,GAAc,EAAd,I;IL9B/D,wB;IAAA,OK8BmI,EL9BnI,GK8B8I,ML9B9I,I;IAAnB,aK8BsJ,EL9BtJ,gB;MACI,QAAQ,mBK6BsI,EL7BtI,EK6B0I,EL7BhI,GAAK,CAAL,IAAV,C;MACW,SK4B2H,EL5B3H,GK4BmI,KL5BnI,I;MAAnB,aK4B8I,EL5B9I,kB;QK4BuL,SAAL,cL3BrK,UK2BqK,EL3BrK,kBK2BqK,WAAe,SL3B/K,CK2B+K,EL3B5K,CK2B4K,CAAf,C;;;G;2IAC7L,2C;IAAwB,kB;MAAA,KAAU,C;IAAG,kB;MAAA,KAAU,C;IAAG,qB;MAAA,QAAa,IAAK,MAAL,GAAa,EAAb,I;IAAiB,sB;MAAA,SAAc,IAAK,OAAL,GAAc,EAAd,I;IL/BpE,wB;IAAA,OK+BoI,EL/BpI,GK+B+I,ML/B/I,I;IAAnB,aK+BuJ,EL/BvJ,gB;MACI,QAAQ,mBK8BuI,EL9BvI,EK8B2I,EL9BjI,GAAK,CAAL,IAAV,C;MACW,SK6B4H,EL7B5H,GK6BoI,KL7BpI,I;MAAnB,aK6B+I,EL7B/I,kB;QACI,WAAS,UAAT,EAAS,kBAAT,S;QK4BoL,SAAL,aAAU,GAAV,EAAe,SAAc,SAAL,aAAU,GAAV,CAAT,CAAf,C;;;G;+IAC3L,2C;IAA0B,kB;MAAA,KAAU,C;IAAG,kB;MAAA,KAAU,C;IAAG,qB;MAAA,QAAa,IAAK,MAAL,GAAa,EAAb,I;IAAiB,sB;MAAA,SAAc,IAAK,OAAL,GAAc,EAAd,I;ILhCzE,wB;IAAA,OKgCyJ,ELhCzJ,GKgCoK,MLhCpK,I;IAAnB,aKgC4K,ELhC5K,gB;MACI,QAAQ,mBK+B4J,EL/B5J,EK+BgK,EL/BtJ,GAAK,CAAL,IAAV,C;MACW,SK8BiJ,EL9BjJ,GK8ByJ,KL9BzJ,I;MAAnB,aK8BoK,EL9BpK,kB;QACI,WAAS,UAAT,EAAS,kBAAT,S;QK6ByM,SAAL,aAAU,GA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,EAEC,OAAJ,GAAa,IAAK,OAAL,GAAc,CAAd,IAAb,GAAkC,MAF/B,EAGM,IAHN,CAIL,gBAAO,KAAP,EAAc,MAAd,C;OAEF,W;MA7J8B,UA6JlC,GA7JoD,MAAL,GAA7B,CAA6B,I;ML9BhC,0B;MAAA,SK8BgB,CL9BhB,IK2Lf,GA7JmF,OAAL,GAA/C,CAA+C,IL9B/D,K;MAAnB,eK8BmC,CL9BnC,sB;QACI,UK0LA,GL1LQ,eK6BU,CL7BV,EK6BuB,CL7Bb,GAAK,GAAL,IAAV,C;QACW,SK4BD,CL5BC,GK4BmI,OL5BnI,I;QAAnB,eK4BkB,CL5BlB,sB;UKyLA,GA7JuL,KAAL,cL3BrK,YK2BqK,EL3BrK,oBK2BqK,WA6J9I,4BLxLlB,GKwLiC,MAAf,ELxLf,GKwLuC,MAAxB,CA7J8I,C;;;;IA+JtL,OAAO,G;EACX,C;mCAEH,Y;IAAsC,gBAAR,Y;ItC1Q3B,SsC0Q2C,oB;IAAhB,OtCzQpB,S;G;yCsC0QP,Y;IAA0B,S;IAlKqB,QAAa,IAAK,MAAL,GAA7B,CAA6B,I;IL/BrC,wB;IAAA,OK+BqB,CL/BrB,IK+BoE,IAAK,OAAL,GAA/C,CAA+C,IL/BpE,K;IAAnB,aK+BwC,CL/BxC,gB;MACI,QAAQ,mBK8Be,CL9Bf,EK8B4B,CL9BlB,GAAK,CAAL,IAAV,C;MACW,SK6BI,CL7BJ,GK6BoI,KL7BpI,I;MAAnB,aK6BuB,CL7BvB,kB;QACI,WAAS,UAAT,EAAS,kBAAT,S;QK4BoL,SAAL,aAAU,GAAV,EAkKlJ,SAAQ,QAlKuK,SAAL,aAAU,GAAV,CAkKlK,CAAU,MAAlB,CAlKkJ,C;;;G;mCAoK9L,Y;IAAsC,gBAAR,Y;ItC7Q3B,SsC6Q2C,oB;IAAhB,OtC5QpB,S;G;yCsC6QP,Y;IAA0B,S;IArKqB,QAAa,IAAK,MAAL,GAA7B,CAA6B,I;IL/BrC,wB;IAAA,OK+BqB,CL/BrB,IK+BoE,IAAK,OAAL,GAA/C,CAA+C,IL/BpE,K;IAAnB,aK+BwC,CL/BxC,gB;MACI,QAAQ,mBK8Be,CL9Bf,EK8B4B,CL9BlB,GAAK,CAAL,IAAV,C;MACW,SK6BI,CL7BJ,GK6BoI,KL7BpI,I;MAAnB,aK6B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IAAc,YAAd,I;G;4CAC9B,gB;IAA8B,0BAAM,CAAN,EAAS,CAAT,IAAc,Y;G;2CAE5C,kB;IpCihBG,UoChhBQ,G9B+zFD,QN/yEP,EoChhB8B,SpCghB9B,EoChhBoC,mBAAM,CAAN,EAAS,CAAT,CpCghBpC,EoChhB2B,CpCghB3B,EoChhB2B,CrCzBa,GqCyBS,WrCzBT,ICyiBxC,C;EoC/gBH,C;2CAEA,kB;IpC6gBG,UoC5gBQ,GpC4gBR,EoC5gBgB,SpC4gBhB,EoC5gBsB,mBAAM,CAAN,EAAS,CAAT,CpC4gBtB,EoC5gBa,CpC4gBb,EoC5gBa,CrC7B2B,GqC6BL,WrC7BK,ICyiBxC,C;EoC3gBH,C;iDAEA,Y;IAC2B,Q;IAAA,OADE,IACV,QAAQ,K;IAA1B,aAAU,CAAV,gB;MACC,UAAyD,YAA3C,CAAF,GAFe,IAED,QAAa,KAA5B,GAAyC,GAAK,C;MAF9B,IAG3B,qBAAQ,CAAR,EAAa,4CAAK,GAAL,EAAU,GAAV,EAAe,GAAf,EAAoB,GAApB,CAAb,C;;IAED,OAL4B,I;G;6CAQ7B,kB;IACC,SAAS,qBAAQ,CAAR,EAAW,EAAX,C;IACT,SAAS,qBAAQ,CAAR,EAAW,EAAX,C;IpC+fP,UoC9fQ,SpC8fR,EoC9fkB,SpC8flB,EoC9fwB,CpC8fxB,EoC9fc,EpC8fd,EoC9fc,ErC3C0B,GqC2Cb,WrC3Ca,ICyiBxC,C;IAAA,UoC7fQ,SpC6fR,EoC7fkB,SpC6flB,EoC7fwB,EpC6fxB,EoC7fc,EpC6fd,EoC7fc,ErC5C0B,GqC4CZ,WrC5CY,ICyiBxC,C;IAAA,UoC5fQ,SpC4fR,EoC5fiB,SpC4fjB,EoC5fuB,EpC4fvB,EoC5fc,CpC4fd,EoC5fc,CrC7C0B,GqC6Cb,WrC7Ca,ICyiBxC,C;EoC3fH,C;4CAEA,mB;IACyB,gBAAhB,SAAQ,WAAR,C;IlCoxCC,kBAAM,eAAa,mCAAwB,EAAxB,CAAb,C;IAqEA,Q;IAAA,2B;IAAb,OAAa,cAAb,C;MAAa,sB;mBACT,W;MkC11C8C,kBAAhB,SAAQ,WAAR,C;MlCoxC3B,oBAAM,eAAa,qCAAwB,EAAxB,CAAb,C;MAqEA,U;MAAA,+B;MAAb,O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AiB,EAAjB,C;IAAsB,8FAAoB,EAApB,C;IAAyB,sFAAgB,EAAhB,C;IAAqB,8EAAY,EAAZ,C;IACpE,oFAAe,EAAf,C;IAAoB,sFAAgB,EAAhB,C;IAAqB,4FAAmB,EAAnB,C;IAAwB,wGAAyB,EAAzB,C;IACjE,sGAAwB,EAAxB,C;IAA6B,0HAAkC,EAAlC,C;IAE7B,uC;G;;EARA,iD;IAAA,4B;IAAA,yC;G;;EAAc,wD;IAAA,4B;IAAA,gD;G;;EAAqB,2D;IAAA,4B;IAAA,mD;G;;EAAwB,sD;IAAA,4B;IAAA,8C;G;;EAC3D,sD;IAAA,4B;IAAA,8C;G;;EAAmB,sD;IAAA,4B;IAAA,8C;G;;EAAmB,uD;IAAA,4B;IAAA,+C;G;;EAAoB,iD;IAAA,4B;IAAA,yC;G;;EAC1D,oD;IAAA,4B;IAAA,4C;G;;EAAiB,gD;IAAA,4B;IAAA,wC;G;;EAAa,mD;IAAA,4B;IAAA,2C;G;;EAAiB,kD;IAAA,4B;IAAA,0C;G;;EAC/C,oD;IAAA,4B;IAAA,4C;G;;EAAkB,2D;IAAA,4B;IAAA,mD;G;;EAAyB,mD;IAAA,4B;IAAA,2C;G;;EAAiB,mD;IAAA,4B;IAAA,2C;G;;EAC5D,wD;IAAA,4B;IAAA,gD;G;;EAAsB,2D;IAAA,4B;IAAA,mD;G;;EAAyB,uD;IAAA,4B;IAAA,+C;G;;EAAqB,mD;IAAA,4B;IAAA,2C;G;;EACpE,sD;IAAA,4B;IAAA,8C;G;;EAAoB,uD;IAAA,4B;IAAA,+C;G;;EAAqB,0D;IAAA,4B;IAAA,kD;G;;EAAwB,gE;IAAA,4B;IAAA,wD;G;;EACjE,+D;IAAA,4B;IAAA,uD;G;;EAA6B,yE;IAAA,4B;IAAA,iE;G;EAE7B,qC;IAAA,yC;IACC,aAAY,wB;G;;;;;;;EADb,iD;IAAA,4B;IAAA,gD;MAAA,+B;KAAA,yC;G;;;;;;EAVD,kC;IAAA,+sC;G;;EAAA,uC;IAAA,a;MAAA,iB;QAAA,8C;MAAA,wB;QAAA,qD;MAAA,2B;QAAA,wD;MAAA,sB;QAAA,mD;MAAA,sB;QAAA,mD;MAAA,sB;QAAA,mD;MAAA,uB;QAAA,oD;MAAA,iB;QAAA,8C;MAAA,oB;QAAA,iD;MAA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Fe,C;YH8Ff,OG9FkB,C;YDyCd,eAAW,KAAK,aCzCL,CDyCK,ECzCF,CDyCE,EFsDT,IEtDS,C;YFsDI,OG/FT,C;YH+FyB,OG/FtB,C;YAHd,K;eAKA,C;YACI,UHwFhB,SGxFwB,KAAK,gBAAM,YAAN,EAAM,oBAAN,U;YACb,UHuFhB,SGvFwB,KAAK,gBAAM,YAAN,EAAM,oBAAN,U;YDqCjB,eAAW,KAAK,aCpCL,GDoCK,ECpCF,GDoCE,EFyDT,KEzDS,C;YFyDK,OG7FV,G;YH6F0B,OG7FvB,G;YH8EoB,oBAgBtC,CAAM,KAAN,C;YGjGI,K;eAKA,C;YACI,SHmFhB,SGnFyB,KAAK,gBAAM,YAAN,EAAM,oBAAN,U;YACd,SHkFhB,SGlFyB,KAAK,gBAAM,YAAN,EAAM,oBAAN,U;YACd,SHiFhB,SGjFyB,KAAK,gBAAM,YAAN,EAAM,oBAAN,U;YACd,SHgFhB,SGhFyB,KAAK,gBAAM,YAAN,EAAM,oBAAN,U;YH2FtB,UAAU,eAAM,kBAAS,IAAT,EAAa,IAAb,EG1FD,EH0FC,EG1FG,EH0FH,CAAN,GAAiC,eAAM,kBG1FlC,EH0FkC,EG1F9B,EH0F8B,EG1F1B,EH0F0B,EG1FtB,EH0FsB,C;YACjD,iBAAqB,YAAJ,GAAI,C;YAgC7B,kBjH60BgD,MAAW,KiH70BrC,UjH60BqC,EiH70BzB,EjH60ByB,C;YiH50B3D,SAAS,MAAM,W;YACf,gBAAY,GAAZ,C;YACA,gBAAY,GAAZ,C;YACA,gBAAY,GAAZ,C;YACA,gBAAY,GAAZ,C;YACA,uBAAmB,CAAnB,C;YAtCsC,kCG3Ff,EH2Fe,EG3FX,EH2FW,EG3FP,EH2FO,EG3FH,EH2FG,CAuCtC,CAAQ,GAAR,EAAa,qCAAb,C;YAIA,eAAU,CAAV,QAAkB,WAAlB,Q;cACI,YAAY,MAAI,E;cA5CkB,kCG3Ff,EH2Fe,EG3FX,EH2FW,EG3FP,EH2FO,EG3FH,EH2FG,CA8ClC,CAAQ,KAAR,EAAe,0BA9C2G,4BE/D5G,qCF+D4G,CA8C3G,2CAAf,C;;;YA7CU,OG5FiB,E;YH4FA,OG5FI,E;YHuEW,oBAsBtC,CAAM,KAAN,C;YGlGI,K;eAOA,C;YACI,WH4EhB,SG5EyB,KAAK,gBAAM,YAAN,EAAM,oBAAN,U;YACd,WH2EhB,SG3EyB,KAAK,gBAAM,YAAN,EAAM,oBAAN,U;YACd,WH0EhB,SG1EyB,KAAK,gBAAM,aAAN,EAAM,qBAAN,W;YACd,WHyEhB,SGzEyB,KAAK,gBAAM,aAAN,EAAM,qBAAN,W;YACd,SHwEhB,SGxEyB,KAAK,gBAAM,aAAN,EAAM,qBAAN,W;YACd,SHuEhB,SGvEyB,KAAK,gBAAM,aAAN,EAAM,qBAAN,W;YHwFtB,YAAU,eAAM,kBAAS,IAAT,EAAa,IAAb,EGvFA,IHuFA,EGvFI,IHuFJ,CAAN,GAAiC,eAAM,kBGvFjC,IHuFiC,EGvF7B,IHuF6B,EGvFzB,IHuFyB,EGvFrB,IHuFqB,CAAvC,GAAkE,eAAM,kBGvF1D,IHuF0D,EGvFtD,IHuFsD,EGvFlD,EHuFkD,EGvF9C,EHuF8C,C;YAClF,mBAAqB,YAAJ,KAAI,C;YA0B7B,oBjH60BgD,MAAW,KiH70BrC,YjH60BqC,EiH70BzB,EjH60ByB,C;YiH50B3D,WAAS,MAAM,a;YACf,kBAAY,GAAZ,C;YACA,kBAAY,GAAZ,C;YACA,kBAAY,GAAZ,C;YACA,kBAAY,GAAZ,C;YACA,yBAAmB,CAAnB,C;YAhCsC,oCGxFd,IHwFc,EGxFV,IHwFU,EGxFN,IHwFM,EGxFF,IHwFE,EGxFE,EHwFF,EGxFM,EHwFN,CAiCtC,CAAQ,GAAR,EAAa,2CAAb,C;YAIA,eAAU,CAAV,QAAkB,aAAlB,Q;cACI,cAAY,MAAI,I;cAtCkB,oCGxFd,IHwFc,EGxFV,IHwFU,EGxFN,IHwFM,EGxFF,IHwFE,EGxFE,EHwFF,EGxFM,EHwFN,CAwClC,CAAQ,OAAR,EAAe,0BAxCmH,4BErEpH,qCFqEoH,CAwCnH,qDAAf,C;;;YAvCU,OGzF0B,E;YHyFT,OGzFa,E;YH8DE,oBA4BtC,CAAM,KAAN,C;YGjGI,K;eASA,C;YDkBA,eAAW,KAAK,aFyEf,IEzEe,EFyEX,IEzEW,EFyEP,KEzEO,C;YF0CkB,oBAgCtC,CAAM,IAAN,C;YE5EI,IF6EE,IE7EF,C;cAAQ,eAAW,KAAK,Q;YChBxB,K;;;MDgBA,IFgFN,KEhFM,C;QAAQ,eAAW,KAAK,Q;KAMhC,eAAW,KAAX,WAA0B,cAAA,KAAM,KAAN,CAAa,Q;IFyC3C,eAAS,GAAT,C;IACA,eAAS,GAAT,C;IACA,eAAS,GAAT,C;IACA,eAAS,GAAT,C;IExCQ,IFyCF,KEzCE,C;MAEI,eAAW,KAAK,Q;KCzDxB,cAAQ,CAAR,C;IACS,oBDqDT,QCrDA,S;I5BxBoB,W;IAFxB,YAAQ,C;IACR,OAAO,QAAI,kBAAX,C;M4B0Bc,kJ;MAAN,Q5BzBK,aAAK,gBAAM,eAAN,EAAM,uBAAN,W4ByBV,C;aACI,C;UACI,UDkDZ,QClDoB,KAAK,gBAAM,gBAAN,EAAM,wBAAN,Y;UACb,UDiDZ,QCjDoB,KAAK,gBAAM,gBAAN,EAAM,wBAAN,Y;UH8FrB,SG7Fe,G;UH8Ff,SG9FkB,G;UDwDlB,gB;YAEI,IFqCO,IErCP,C;cAAY,O;;UAGhB,eAAW,KAAK,aC7DD,GD6DC,EC7DE,GD6DF,EFkCL,IElCK,C;UFkCQ,SG/FT,G;UH+FyB,SG/FtB,G;UAHd,K;aAKA,C;UACI,YD6CZ,QC7CoB,KAAK,gBAAM,gBAAN,EAAM,wBAAN,Y;UACb,YD4CZ,QC5CoB,KAAK,gBAAM,gBAAN,EAAM,wBAAN,Y;UDoDrB,gB;YAEI,IFwCO,KExCP,C;cAAY,O;;UAGhB,eAAW,KAAK,aCxDD,KDwDC,ECxDE,KDwDF,EFqCL,KErCK,C;UFqCS,SG7FV,K;UH6F0B,SG7FvB,K;UH8EoB,oBAgBtC,CAAM,KAAN,C;UGjGI,K;aAKA,C;UACI,WDwCZ,QCxCqB,KAAK,gBAAM,gBAAN,EAAM,wBAAN,Y;UACd,WDuCZ,QCvCqB,KAAK,gBAAM,gBAAN,EAAM,wBAAN,Y;UACd,WDsCZ,QCtCqB,KAAK,gBAAM,gBAAN,EAAM,wBAAN,Y;UACd,WDqCZ,QCrCqB,KAAK,gBAAM,gBAAN,EAAM,wBAAN,Y;UH2FtB,YAAU,eAAM,kBAAS,MAAT,EAAa,MAAb,EG1FD,IH0FC,EG1FG,IH0FH,CAAN,GAAiC,eAAM,kBG1FlC,IH0FkC,EG1F9B,IH0F8B,EG1F1B,IH0F0B,EG1FtB,IH0FsB,C;UACjD,mBAAqB,YAAJ,KAAI,C;UAgC7B,oBjH60BgD,MAAW,KiH70BrC,YjH60BqC,EiH70BzB,EjH60ByB,C;UiH50B3D,WAAS,MAAM,a;UACf,kBAAY,GAAZ,C;UACA,kBAAY,GAAZ,C;UACA,kBAAY,GAAZ,C;UACA,kBAAY,GAAZ,C;UACA,yBAAmB,CAAnB,C;UAtCsC,sCG3Ff,IH2Fe,EG3FX,IH2FW,EG3FP,IH2FO,EG3FH,IH2FG,CAuCtC,CAAQ,GAAR,EAAa,yCAAb,C;UAIA,iBAAU,CAAV,UAAkB,aAAlB,U;YACI,cAAY,QAAI,I;YA5CkB,sCG3Ff,IH2Fe,EG3FX,IH2FW,EG3FP,IH2FO,EG3FH,IH2FG,CA8ClC,CAAQ,OAAR,EAAe,0BA9C2G,4BElDhH,2DFkDgH,CA8C3G,qDAAf,C;;;UA7CU,SG5FiB,I;UH4FA,SG5FI,I;UHuEW,oBAsBtC,CAAM,KAAN,C;UGlGI,K;aAOA,C;UACI,aDiCZ,QCjCqB,KAAK,gBAAM,gBAAN,EAAM,wBAAN,Y;UACd,aDgCZ,QChCqB,KAAK,gBAAM,gBAAN,EAAM,wBAAN,Y;UACd,aD+BZ,QC/BqB,KAAK,gBAAM,iBAAN,EAAM,yBAAN,a;UACd,aD8BZ,QC9BqB,KAAK,gBAAM,iBAAN,EAAM,yBAAN,a;UACd,WD6BZ,QC7BqB,KAAK,gBAAM,iBAAN,EAAM,yBAAN,a;UACd,WD4BZ,QC5BqB,KAAK,gBAAM,iBAAN,EAAM,yBAAN,a;UHwFtB,cAAU,eAAM,kBAAS,MAAT,EAAa,MAAb,EGvFA,MHuFA,EGvFI,MHuFJ,CAAN,GAAiC,eAAM,kBGvFjC,MHuFiC,EGvF7B,MHuF6B,EGvFzB,MHuFyB,EGvFrB,MHuFqB,CAAvC,GAAkE,eAAM,kBGvF1D,MHuF0D,EGvFtD,MHuFsD,EGvFlD,IHuFkD,EGvF9C,IHuF8C,C;UAClF,qBAAqB,YAAJ,OAAI,C;UA0B7B,sBjH60BgD,MAAW,KiH70BrC,cjH60BqC,EiH70BzB,EjH60ByB,C;UiH50B3D,aAAS,MAAM,e;UACf,oBAAY,GAAZ,C;UACA,oBAAY,GAAZ,C;UACA,oBAAY,GAAZ,C;UACA,oBAAY,GAAZ,C;UACA,2BAAmB,CAAnB,C;UAhCsC,wCGxFd,MHwFc,EGxFV,MHwFU,EGxFN,MHwFM,EGxFF,MHwFE,EGxFE,IHwFF,EGxFM,IHwFN,CAiCtC,CAAQ,GAAR,EAAa,+CAAb,C;UAIA,iBAAU,CAAV,UAAkB,eAAlB,U;YACI,gBAAY,QAAI,M;YAtCkB,wCGxFd,MHwFc,EGxFV,MHwFU,EGxFN,MHwFM,EGxFF,MHwFE,EGxFE,IHwFF,EGxFM,IHwFN,CAwClC,CAAQ,SAAR,EAAe,0BAxCmH,4BExDxH,2DFwDwH,CAwCnH,+DAAf,C;;;UAvCU,SGzF0B,I;UHyFT,SGzFa,I;UH8DE,oBA4BtC,CAAM,KAAN,C;UGjGI,K;aASA,C;UH2FJ,UAAK,M;UAAL,UAAS,M;UE1DT,gB;YAEI,IFwDS,KExDT,C;cAAY,O;;UAGhB,eAAW,KAAK,aAAI,GAAJ,EAAO,GAAP,EFqDH,KErDG,C;UFsBsB,oBAgCtC,CAAM,IAAN,C;UElEA,IFmEM,IEnEN,C;YAEI,eAAW,KAAK,Q;;UC5BhB,K;;;ID0BJ,IFsEF,KEtEE,C;MAEI,eAAW,KAAK,Q;KAYxB,O;EACJ,C;EAEA,4C;IACI,YAAW,kC;IACX,YAAW,kC;IAIP,Y;G;;SAHK,Y;MAAQ,OAAA,SAAK,K;K;;qDAMtB,Y;IACI,SAAK,Q;IACL,SAAK,Q;EACT,C;0DAEA,0B;IACI,UnH43BwC,MAAW,KmH53BrC,EnH43BqC,EmH53BjC,EnH43BiC,C;ImH33BnD,UnHk4BwC,MAAW,KmHl4BrC,EnHk4BqC,EmHl4BjC,EnHk4BiC,C;ImHj4BnD,enHi4BwC,MAAW,KmHj4BhC,EnHi4BgC,EmHj4B5B,EnHi4B4B,C;ImHh4BnD,enHy3BwC,MAAW,KmHz3BhC,EnHy3BgC,EmHz3B5B,EnHy3B4B,C;ImHx3BnD,OAAoB,GAAZ,4BAAiB,GAAlB,KAAuC,GAAZ,4BAAiB,GAA5C,C;EACX,C;2DAEA,kB;IAEsB,Q;IAAA,gB;IAAlB,aAAU,CAAV,gB;MACI,WAAW,IAAK,KAAK,eAAM,CAAN,C;MACrB,WAAW,IAAK,KAAK,eAAM,CAAN,C;MACrB,IAAI,gBAAS,IAAT,EAAe,IAAf,EAAqB,EAArB,EAAyB,EAAzB,CAAJ,C;QACI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AAqD,sCAAyB,UAAzB,EAAgC,SAAhC,EAAsC,aAAtC,EAAgD,IAAhD,EAAsD,CAAtD,EAAyD,CAAzD,EAAmE,KAAnE,C;G;;SAEjC,Y;MAAQ,yB;K;;;SACP,Y;MAAQ,0B;K;;gCAEhC,Y;IACC,sB;EACD,C;mDAEG,0B;IAAuC,sB;MAAA,SAAiB,M;IAAqB,OAAI,WAAU,GAAV,IAAiB,WAAU,GAA/B,GAAoC,IAApC,GAA8C,cAAU,6BAAe,aAAf,EAAyB,MAAzB,EAAiC,MAAjC,CAAV,C;G;EAE1G,0D;IAAiE,mB;IAAhE,oB;IAAsB,oB;IAAoB,oB;G;;SACtC,Y;MAAQ,OAAwB,YAAvB,WAAO,MAAP,GAAe,WAAQ,C;K;;;SAC/B,Y;MAAQ,OAAyB,YAAxB,WAAO,OAAP,GAAgB,WAAQ,C;K;;sDAE1D,+B;IAAyF,sB;IyCwXnF,QzCxXyE,SyCwX5D,E;IACb,QzCzXyE,SyCyX5D,E;IACb,QzC1XyE,SyC0X5D,E;IACb,QzC3XyE,SyC2X5D,E;IACb,SzC5XyE,SyC4X3D,G;IACd,SzC7XyE,SyC6X3D,G;;MzC5XA,wBAAM,WAAN,EAAc,WAAd,C;MyC8XV,qBzC7XA,U;;MAFqE,SyCiYrE,KAAS,C;MzCjY4D,SyCkYrE,KAAS,C;MzClY4D,SyCmYrE,KAAS,C;MzCnY4D,SyCoYrE,KAAS,C;MzCpY4D,SyCqYrE,MAAU,E;MzCrY2D,SyCsYrE,MAAU,E;;IzCtY2D,yB;G;qDAK/E,2B;IACC,gBAAa,KAAM,U;IANqE,sB;IyCwXnF,QzCxXyE,SyCwX5D,E;IACb,QzCzXyE,SyCyX5D,E;IACb,QzC1XyE,SyC0X5D,E;IACb,QzC3XyE,SyC2X5D,E;IACb,SzC5XyE,SyC4X3D,G;IACd,SzC7XyE,SyC6X3D,G;;MzC5XA,wBAAM,WAAN,EAAc,WAAd,C;MyC8XV,qBzCzXuB,U;;MAN8C,SyCiYrE,KAAS,C;MzCjY4D,SyCkYrE,KAAS,C;MzClY4D,SyCmYrE,KAAS,C;MzCnY4D,SyCoYrE,KAAS,C;MzCpY4D,SyCqYrE,MAAU,E;MzCrY2D,SyCsYrE,MAAU,E;;IzChYnB,yB;G;sDAED,uB;IAFC,gBAEoE,KAFjD,U;IyCkXd,QzCxXyE,SyCwX5D,E;IACb,QzCzXyE,SyCyX5D,E;IACb,QzC1XyE,SyC0X5D,E;IACb,QzC3XyE,SyC2X5D,E;IACb,SzC5XyE,SyC4X3D,G;IACd,SzC7XyE,SyC6X3D,G;;MzC5XA,wBAAM,WAAN,EAAc,WAAd,C;MAO0D,WAAO,4B;;MARN,SyCiYrE,KAAS,C;MzCjY4D,SyCkYrE,KAAS,C;MzClY4D,SyCmYrE,KAAS,C;MzCnY4D,SyCoYrE,KAAS,C;MzCpY4D,SyCqYrE,MAAU,E;MzCrY2D,SyCsYrE,MAAU,E;;G;iEzC1XpB,iD;IyC4WM,QzC3WQ,SyC2WK,E;IACb,QzC5WQ,SyC4WK,E;IACb,QzC7WQ,SyC6WK,E;IACb,QzC9WQ,SyC8WK,E;IACb,SzC/WQ,SyC+WM,G;IACd,SzChXQ,SyCgXM,G;;MzChXN,SAZM,eAAM,WAAN,EAAc,WAAd,C;MAYO,WAAO,yD;;MAApB,SyCoXJ,KAAS,C;MzCpXL,SyCqXJ,KAAS,C;MzCrXL,SyCsXJ,KAAS,C;MzCtXL,SyCuXJ,KAAS,C;MzCvXL,SyCwXJ,MAAU,E;MzCxXN,SyCyXJ,MAAU,E;;EzCxXpB,C;;;;;;uIAGE,oB;IACI,6B;;MAEI,OAAO,U;;MAEP,2B;;EAER,C;EAEc,uP;IACV,yB;MAAA,YAAwB,Y;IACxB,oB;MAAA,OAA0B,I;IAC1B,oB;MAAA,OAAyB,kB;IACzB,6B;MAAA,kD;IACA,yB;MAAA,YAAwB,G;IACxB,4B;MAAA,2B;IACA,0B;MAAA,yB;IACA,wB;MAAA,yB;IACA,0B;MAAA,aAAyB,G;IACzB,2B;MAAA,cAAyB,0B;IACzB,yB;MAAA,YAAuB,0B;IACvB,4B;MAAA,eAAiC,gC;IACjC,oB;MAAA,OAAiB,gCAAmB,a;IACpC,wB;MAAA,WAAuB,I;IACvB,6B;MAAA,gBAAmC,qCAAc,S;IACjD,+B;MAAA,kBAAuC,uCAAgB,K;IACvD,2B;MAAA,cAA0B,G;IAC1B,wC;MAAA,kE;IAjBA,0B;IACA,gB;IACA,gB;IACA,kC;IACA,0B;IACA,gC;IACA,4B;IACA,wB;IACA,4B;IACA,8B;IACA,0B;I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EpEqdF,C;UoE1drB,K;aAOA,C;UACI,WpE+chB,IoE/cyB,KAAK,gBAAM,YAAN,EAAM,oBAAN,U;UACd,WpE8chB,IoE9cyB,KAAK,gBAAM,YAAN,EAAM,oBAAN,U;UACd,WpE6chB,IoE7cyB,KAAK,gBAAM,aAAN,EAAM,qBAAN,W;UACd,WpE4chB,IoE5cyB,KAAK,gBAAM,aAAN,EAAM,qBAAN,W;UACd,SpE2chB,IoE3cyB,KAAK,gBAAM,aAAN,EAAM,qBAAN,W;UACd,SpE0chB,IoE1cyB,KAAK,gBAAM,aAAN,EAAM,qBAAN,W;UpE8cY,0BoE7clB,IpE6ckB,EoE7cd,IpE6cc,EoE7cV,IpE6cU,EoE7cN,IpE6cM,EoE7cF,EpE6cE,EoE7cE,EpE6cF,C;UoEpd9B,K;aASA,C;UpE4cE,iB;UoE5cF,K;;;EpE8chB,C;EAEA,qC;IoE7eQ,YAAQ,CAAR,C;IACS,kBpE6eb,IoE7eI,S;I5BxBoB,Q;IAFxB,UAAQ,C;IACR,OAAO,MAAI,gBAAX,C;M4B0Bc,sH;MAAN,Q5BzBK,WAAK,gBAAM,UAAN,EAAM,kBAAN,Q4ByBV,C;aACI,C;UACI,QpE0ehB,IoE1ewB,KAAK,gBAAM,YAAN,EAAM,oBAAN,U;UACb,QpEyehB,IoEzewB,KAAK,gBAAM,YAAN,EAAM,oBAAN,U;UpE0eN,yBAAS,qBoEzeT,CpEyeS,EoEzeN,CpEyeM,CAAT,EAA6B,qBoEze7B,CpEye6B,EoEze1B,CpEye0B,CAA7B,C;UoE5eX,K;aAKA,C;UACI,UpEqehB,IoErewB,KAAK,gBAAM,YAAN,EAAM,oBAAN,U;UACb,UpEoehB,IoEpewB,KAAK,gBAAM,YAAN,EAAM,oBAAN,U;UpEseN,yBAAS,qBoEreT,GpEqeS,EoEreN,GpEqeM,CAAT,EAA6B,qBoEre7B,GpEqe6B,EoEre1B,GpEqe0B,CAA7B,C;UoExeX,K;aAKA,C;UACI,SpEgehB,IoEheyB,KAAK,gBAAM,YAAN,EAAM,oBAAN,U;UACd,SpE+dhB,IoE/dyB,KAAK,gBAAM,YAAN,EAAM,oBAAN,U;UACd,SpE8dhB,IoE9dyB,KAAK,gBAAM,YAAN,EAAM,oBAAN,U;UACd,SpE6dhB,IoE7dyB,KAAK,gBAAM,YAAN,EAAM,oBAAN,U;UpEgeG,yBAAS,qBoE/dnB,EpE+dmB,EoE/df,EpE+de,CAAT,EAA+B,qBoE/dzC,EpE+dyC,EoE/drC,EpE+dqC,CAA/B,EAAqD,qBoE/dvD,EpE+duD,EoE/dnD,EpE+dmD,CAArD,EAA2E,qBoE/d7E,EpE+d6E,EoE/dzE,EpE+dyE,CAA3E,C;UoEperB,K;aAOA,C;UACI,WpEydhB,IoEzdyB,KAAK,gBAAM,YAAN,EAAM,oBAAN,U;UACd,WpEwdhB,IoExdyB,KAAK,gBAAM,YAAN,EAAM,oBAAN,U;UACd,WpEudhB,IoEvdyB,KAAK,gBAAM,aAAN,EAAM,qBAAN,W;UACd,WpEsdhB,IoEtdyB,KAAK,gBAAM,aAAN,EAAM,qBAAN,W;UACd,SpEqdhB,IoErdyB,KAAK,gBAAM,aAAN,EAAM,qBAAN,W;UACd,SpEodhB,IoEpdyB,KAAK,gBAAM,aAAN,EAAM,qBAAN,W;UpEwdY,0BAAU,qBoEvd5B,IpEud4B,EoEvdxB,IpEudwB,CAAV,EAAgC,qBoEvdlD,IpEudkD,EoEvd9C,IpEud8C,CAAhC,EAAsD,qBoEvdhE,IpEudgE,EoEvd5D,IpEud4D,CAAtD,EAA4E,qBoEvdtF,IpEudsF,EoEvdlF,IpEudkF,CAA5E,EAAkG,qBoEvdpG,EpEudoG,EoEvdhG,EpEudgG,CAAlG,EAAwH,qBoEvd1H,EpEud0H,EoEvdtH,EpEudsH,CAAxH,C;UoE9d9B,K;aASA,C;UpEsdE,iB;UoEtdF,K;;;EpEwdhB,C;EuE7hBA,oC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,kC;IAAA,qC;K;IAAyB,8D;IAAU,4D;IAAS,0D;G;;EAAnB,4C;IAAA,wB;IAAA,oC;G;;EAAU,2C;IAAA,wB;IAAA,mC;G;;EAAS,0C;IAAA,wB;IAAA,kC;G;;;;;;EAA5C,8B;IAAA,gH;G;;EAAA,mC;IAAA,a;MAAA,gB;QAAA,yC;MAAA,e;QAAA,wC;MAAA,c;QAAA,uC;MAAA,QAAA,wE;;G;;EAEA,wC;IAAqC,qB;MAAA,QAAiB,K;IAAiB,QAAM,SAAN,M;WACnE,U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AI,GAAJ,CAAL,C;IAD3B,Y;G;iBA6rBD,yB;I1HlhBA,0C;IAAA,uG;I0HkhBA,kE;MAEI,IAAI,QAAJ,C;Q1HnhB4G,oBAAa,e0HmhBlG,G1HnhBkG,CAAb,EAA6B,e0HmhB7G,G1HnhB6G,CAA7B,EAA6C,e0HmhBxH,G1HnhBwH,CAA7C,EAA6D,e0HmhBnI,G1HnhBmI,CAA7D,EAA4E,e0HmhB7I,E1HnhB6I,CAA5E,EAA2F,e0HmhBxJ,E1HnhBwJ,CAA3F,C;;QA9BD,0BAAY,e0HijBvD,G1HjjBuD,CAAZ,EAA4B,e0HijBlE,G1HjjBkE,CAA5B,EAA4C,e0HijB7E,G1HjjB6E,CAA5C,EAA4D,e0HijBxF,G1HjjBwF,CAA5D,EAA2E,e0HijBlG,E1HjjBkG,CAA3E,EAA0F,e0HijB7G,E1HjjB6G,CAA1F,C;;K;G0H+iB/G,C;gBAIA,yB;I1HxhBA,0C;IAAA,qG;I0HwhBA,sD;MACI,IAAI,QAAJ,C;Q1HxhB+E,mBAAW,e0HwhBpE,E1HxhBoE,CAAX,EAA0B,e0HwhB/E,E1HxhB+E,CAA1B,EAAyC,e0HwhB1F,E1HxhB0F,CAAzC,EAAwD,e0HwhBrG,E1HxhBqG,CAAxD,C;;QA9BqB,yBAAgB,e0HsjBlE,E1HtjBkE,CAAhB,EAAqC,e0HsjBnF,E1HtjBmF,CAArC,EAAyD,e0HsjBnG,E1HtjBmG,CAAzD,EAA6E,e0HsjBnH,E1HtjBmH,CAA7E,C;;K;G0HqjBxG,C;kBAGA,yB;I1H9hBA,0C;IAAA,qG;I0H8hBA,8C;MACI,IAAI,QAAJ,C;Q1H9hBqD,mBAAU,e0H8hBzC,E1H9hByC,CAAV,EAAwB,e0H8hBnD,E1H9hBmD,CAAxB,C;;QA7BD,yBAAS,e0H2jBnB,E1H3jBmB,CAAT,EAAuB,e0H2jB7B,E1H3jB6B,CAAvB,C;;K;G0H0jBxD,C;kBAGA,yB;I1HniBA,0C;IAAA,qG;I0HmiBA,8C;MACI,IAAI,QAAJ,C;Q1HniBqD,mBAAU,e0HmiBzC,E1HniByC,CAAV,EAAwB,e0HmiBnD,E1HniBmD,CAAxB,C;;QA7BD,yBAAS,e0HgkBnB,E1HhkBmB,CAAT,EAAuB,e0HgkB7B,E1HhkB6B,CAAvB,C;;K;G0H+jBxD,C;iBAGA,yB;I1HxjBA,0C;IAAA,uG;IAFA,qG;I0H0jBA,0C;MACI,IAAI,QAAJ,C;Q1HxjB2C,oBAAW,e0HwjB/B,E1HxjB+B,CAAX,C;;QAFD,mBAAU,e0H0jBZ,E1H1jBY,CAAV,C;;K;G0HyjB9C,C;iBAGA,yB;I1HtjBA,0C;IAAA,uG;IAFA,qG;I0HwjBA,0C;MACI,IAAI,QAAJ,C;Q1HtjB2C,oBAAW,e0HsjB/B,E1HtjB+B,CAAX,C;;QAFD,mBAAU,e0HwjBZ,E1HxjBY,CAAV,C;;K;G0HujB9C,C;mBAGA,yB;I1HpjBA,0C;IAAA,uG;IAFA,qG;I0HsjBA,0C;MACI,IAAI,QAAJ,C;Q1HpjB2C,oBAAW,e0HojB/B,E1HpjB+B,CAAX,C;;QAFD,mBAAU,e0HsjBZ,E1HtjBY,CAAV,C;;K;G0HqjB9C,C;mBAGA,yB;I1HljBA,0C;IAAA,uG;IAFA,qG;I0HojBA,0C;MACI,IAAI,QAAJ,C;Q1HljB2C,oBAAW,e0HkjB/B,E1HljB+B,CAAX,C;;QAFD,mBAAU,e0HojBZ,E1HpjBY,CAAV,C;;K;G0HmjB9C,C;;;;;;;;Eb7tBA,qB;IAAA,yB;G;4CACI,a;IAAsC,W;G;;;;;;;EAD1C,iC;IAAA,gC;MAAA,e;KAAA,yB;G;EAIqB,2B;IAAC,kB;G;6CAClB,a;IAAsC,W;G;;;;;;EAG1C,wB;IAAA,4B;IAGsB,sBAAW,oBAAO,MAAlB,C;G;;;;;;;EAHtB,oC;IAAA,mC;MAAA,kB;KAAA,4B;G;;;;;;;;EASA,qC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,mC;IAAA,sC;K;IACI,4D;IAAQ,4D;IAAQ,0D;G;;EAAhB,2C;IAAA,yB;IAAA,mC;G;;EAAQ,2C;IAAA,yB;IAAA,mC;G;;EAAQ,0C;IAAA,yB;IAAA,kC;G;;;;;;EADpB,+B;IAAA,+G;G;;EAAA,oC;IAAA,a;MAAA,c;QAAA,wC;MAAA,c;QAAA,wC;MAAA,a;QAAA,uC;MAAA,QAAA,+E;;G;;EAIA,sC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,oC;IAAA,uC;K;IACI,oF;IAAmB,wF;G;;EAAnB,uD;IAAA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"}