{"version":3,"file":"krypto-root-krypto.js","sources":["../../../../../krypto/src/commonMain/kotlin/com/soywiz/krypto/Hasher.kt","kotlin/math.kt","../../../../../krypto/src/commonMain/kotlin/com/soywiz/krypto/MD5.kt","../../../../../krypto/src/commonMain/kotlin/com/soywiz/krypto/SHA.kt","util/Preconditions.kt","generated/_ArraysJs.kt","../../../../../krypto/src/commonMain/kotlin/com/soywiz/krypto/AES.kt","util/Standard.kt","../../../../../krypto/src/commonMain/kotlin/com/soywiz/krypto/internal/KryptoTools.kt","arrayUtils.kt","../../../../../krypto/src/commonMain/kotlin/com/soywiz/krypto/HMAC.kt","../../../../../krypto/src/commonMain/kotlin/com/soywiz/krypto/Krypto.kt","../../../../../krypto/src/commonMain/kotlin/com/soywiz/krypto/PBKDF2.kt","../../../../../krypto/src/commonMain/kotlin/com/soywiz/krypto/Padding.kt","../../../../../krypto/src/commonMain/kotlin/com/soywiz/krypto/SHA1.kt","../../../../../krypto/src/commonMain/kotlin/com/soywiz/krypto/SHA256.kt","../../../../../krypto/src/commonMain/kotlin/com/soywiz/krypto/SecureRandom.kt","../../../../../krypto/src/commonMain/kotlin/com/soywiz/krypto/encoding/ASCII.kt","../../../../../krypto/src/commonMain/kotlin/com/soywiz/krypto/encoding/Base64.kt","../../../../../krypto/src/commonMain/kotlin/com/soywiz/krypto/encoding/Hex.kt","kotlin/text/string.kt","text/StringBuilder.kt","../../../../../krypto/src/jsMain/kotlin/com/soywiz/krypto/SecureRandomJs.kt","util/Lazy.kt","../../../../../krypto/src/commonMain/kotlin/com/soywiz/krypto/internal/KryptoVersion.kt"],"sourcesContent":[null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n@file:Suppress(\"DEPRECATION\", \"DEPRECATION_ERROR\")\npackage kotlin.math\n\n\nimport kotlin.internal.InlineOnly\nimport kotlin.js.Math as nativeMath\n\n\n// region ================ Double Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sin(x: Double): Double = nativeMath.sin(x)\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cos(x: Double): Double = nativeMath.cos(x)\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tan(x: Double): Double = nativeMath.tan(x)\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asin(x: Double): Double = nativeMath.asin(x)\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acos(x: Double): Double = nativeMath.acos(x)\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan(x: Double): Double = nativeMath.atan(x)\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan2(y: Double, x: Double): Double = nativeMath.atan2(y, x)\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sinh(x: Double): Double = nativeMath.sinh(x)\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cosh(x: Double): Double = nativeMath.cosh(x)\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tanh(x: Double): Double = nativeMath.tanh(x)\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asinh(x: Double): Double = nativeMath.asinh(x)\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acosh(x: Double): Double = nativeMath.acosh(x)\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atanh(x: Double): Double = nativeMath.atanh(x)\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun hypot(x: Double, y: Double): Double = nativeMath.hypot(x, y)\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sqrt(x: Double): Double = nativeMath.sqrt(x)\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun exp(x: Double): Double = nativeMath.exp(x)\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun expm1(x: Double): Double = nativeMath.expm1(x)\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\npublic actual fun log(x: Double, base: Double): Double {\n    if (base <= 0.0 || base == 1.0) return Double.NaN\n    return nativeMath.log(x) / nativeMath.log(base)\n}\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln(x: Double): Double = nativeMath.log(x)\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log10(x: Double): Double = nativeMath.log10(x)\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log2(x: Double): Double = nativeMath.log2(x)\n\n/**\n * Computes `ln(x + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln1p(x: Double): Double = nativeMath.log1p(x)\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest double value that is greater than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ceil(x: Double): Double = nativeMath.ceil(x).unsafeCast<Double>() // TODO: Remove unsafe cast after removing public js.math\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest double value that is smaller than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun floor(x: Double): Double = nativeMath.floor(x).unsafeCast<Double>()\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun truncate(x: Double): Double = nativeMath.trunc(x)\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun round(x: Double): Double {\n    if (x % 0.5 != 0.0) {\n        return nativeMath.round(x).unsafeCast<Double>()\n    }\n    val floor = floor(x)\n    return if (floor % 2 == 0.0) floor else ceil(x)\n}\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Double]\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun abs(x: Double): Double = nativeMath.abs(x)\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sign(x: Double): Double = nativeMath.sign(x)\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Double, b: Double): Double = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Double, b: Double): Double = nativeMath.max(a, b)\n\n// extensions\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.pow(x: Double): Double = nativeMath.pow(this, x)\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.pow(n: Int): Double = nativeMath.pow(this, n.toDouble())\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Double.absoluteValue: Double get() = nativeMath.abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Double.sign: Double get() = nativeMath.sign(this)\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.withSign(sign: Int): Double = this.withSign(sign.toDouble())\n\n/**\n * Returns the ulp (unit in the last place) of this value.\n *\n * An ulp is a positive distance between this value and the next nearest [Double] value larger in magnitude.\n *\n * Special Cases:\n *   - `NaN.ulp` is `NaN`\n *   - `x.ulp` is `+Inf` when `x` is `+Inf` or `-Inf`\n *   - `0.0.ulp` is `Double.MIN_VALUE`\n */\n@SinceKotlin(\"1.2\")\npublic actual val Double.ulp: Double get() = when {\n    this < 0 -> (-this).ulp\n    this.isNaN() || this == Double.POSITIVE_INFINITY -> this\n    this == Double.MAX_VALUE -> this - this.nextDown()\n    else -> this.nextUp() - this\n}\n\n/**\n * Returns the [Double] value nearest to this value in direction of positive infinity.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextUp(): Double = when {\n    this.isNaN() || this == Double.POSITIVE_INFINITY -> this\n    this == 0.0 -> Double.MIN_VALUE\n    else -> Double.fromBits(this.toRawBits() + if (this > 0) 1 else -1)\n}\n\n/**\n * Returns the [Double] value nearest to this value in direction of negative infinity.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextDown(): Double = when {\n    this.isNaN() || this == Double.NEGATIVE_INFINITY -> this\n    this == 0.0 -> -Double.MIN_VALUE\n    else -> Double.fromBits(this.toRawBits() + if (this > 0) -1 else 1)\n}\n\n\n/**\n * Returns the [Double] value nearest to this value in direction from this value towards the value [to].\n *\n * Special cases:\n *   - `x.nextTowards(y)` is `NaN` if either `x` or `y` are `NaN`\n *   - `x.nextTowards(x) == x`\n *\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextTowards(to: Double): Double = when {\n    this.isNaN() || to.isNaN() -> Double.NaN\n    to == this -> to\n    to > this -> this.nextUp()\n    else /* to < this */ -> this.nextDown()\n}\n\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.roundToInt(): Int = when {\n    isNaN() -> throw IllegalArgumentException(\"Cannot round NaN value.\")\n    this > Int.MAX_VALUE -> Int.MAX_VALUE\n    this < Int.MIN_VALUE -> Int.MIN_VALUE\n    else -> nativeMath.round(this).unsafeCast<Double>().toInt()\n}\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.roundToLong(): Long = when {\n    isNaN() -> throw IllegalArgumentException(\"Cannot round NaN value.\")\n    this > Long.MAX_VALUE -> Long.MAX_VALUE\n    this < Long.MIN_VALUE -> Long.MIN_VALUE\n    else -> nativeMath.round(this).unsafeCast<Double>().toLong()\n}\n\n// endregion\n\n\n\n// region ================ Float Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sin(x: Float): Float = nativeMath.sin(x.toDouble()).toFloat()\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cos(x: Float): Float = nativeMath.cos(x.toDouble()).toFloat()\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tan(x: Float): Float = nativeMath.tan(x.toDouble()).toFloat()\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asin(x: Float): Float = nativeMath.asin(x.toDouble()).toFloat()\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acos(x: Float): Float = nativeMath.acos(x.toDouble()).toFloat()\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan(x: Float): Float = nativeMath.atan(x.toDouble()).toFloat()\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan2(y: Float, x: Float): Float = nativeMath.atan2(y.toDouble(), x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sinh(x: Float): Float = nativeMath.sinh(x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cosh(x: Float): Float = nativeMath.cosh(x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tanh(x: Float): Float = nativeMath.tanh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asinh(x: Float): Float = nativeMath.asinh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acosh(x: Float): Float = nativeMath.acosh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atanh(x: Float): Float = nativeMath.atanh(x.toDouble()).toFloat()\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun hypot(x: Float, y: Float): Float = nativeMath.hypot(x.toDouble(), y.toDouble()).toFloat()\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sqrt(x: Float): Float = nativeMath.sqrt(x.toDouble()).toFloat()\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun exp(x: Float): Float = nativeMath.exp(x.toDouble()).toFloat()\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun expm1(x: Float): Float = nativeMath.expm1(x.toDouble()).toFloat()\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log(x: Float, base: Float): Float = log(x.toDouble(), base.toDouble()).toFloat()\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln(x: Float): Float = nativeMath.log(x.toDouble()).toFloat()\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log10(x: Float): Float = nativeMath.log10(x.toDouble()).toFloat()\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log2(x: Float): Float = nativeMath.log2(x.toDouble()).toFloat()\n\n/**\n * Computes `ln(a + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln1p(x: Float): Float = nativeMath.log1p(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest Float value that is greater than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ceil(x: Float): Float = nativeMath.ceil(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest Float value that is smaller than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun floor(x: Float): Float = nativeMath.floor(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun truncate(x: Float): Float = truncate(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun round(x: Float): Float = round(x.toDouble()).toFloat()\n\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Float]\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun abs(x: Float): Float = nativeMath.abs(x.toDouble()).toFloat()\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sign(x: Float): Float = nativeMath.sign(x.toDouble()).toFloat()\n\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Float, b: Float): Float = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Float, b: Float): Float = nativeMath.max(a, b)\n\n// extensions\n\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.pow(x: Float): Float = nativeMath.pow(this.toDouble(), x.toDouble()).toFloat()\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.pow(n: Int): Float = nativeMath.pow(this.toDouble(), n.toDouble()).toFloat()\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Float.absoluteValue: Float get() = nativeMath.abs(this.toDouble()).toFloat()\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Float.sign: Float get() = nativeMath.sign(this.toDouble()).toFloat()\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n *\n * If [sign] is `NaN` the sign of the result is undefined.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.withSign(sign: Float): Float = this.toDouble().withSign(sign.toDouble()).toFloat()\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.withSign(sign: Int): Float = this.toDouble().withSign(sign.toDouble()).toFloat()\n\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.roundToInt(): Int = toDouble().roundToInt()\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.roundToLong(): Long = toDouble().roundToLong()\n\n\n// endregion\n\n// region ================ Integer Math ========================================\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Int.MIN_VALUE)` is `Int.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Int]\n */\n// TODO: remove manual 'or' when KT-19290 is fixed\n@SinceKotlin(\"1.2\")\npublic actual fun abs(n: Int): Int = if (n < 0) (-n or 0) else n\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Int, b: Int): Int = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Int, b: Int): Int = nativeMath.max(a, b)\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Int.MIN_VALUE.absoluteValue` is `Int.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Int.absoluteValue: Int get() = abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic actual val Int.sign: Int get() = when {\n    this < 0 -> -1\n    this > 0 -> 1\n    else -> 0\n}\n\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Long.MIN_VALUE)` is `Long.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Long]\n */\n@SinceKotlin(\"1.2\")\npublic actual fun abs(n: Long): Long = if (n < 0) -n else n\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun min(a: Long, b: Long): Long = if (a <= b) a else b\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun max(a: Long, b: Long): Long = if (a >= b) a else b\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Long.MIN_VALUE.absoluteValue` is `Long.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Long.absoluteValue: Long get() = abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic actual val Long.sign: Int get() = when {\n    this < 0 -> -1\n    this > 0 -> 1\n    else -> 0\n}\n\n\n// endregion\n",null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"PreconditionsKt\")\n\npackage kotlin\n\nimport kotlin.contracts.contract\n\n/**\n * Throws an [IllegalArgumentException] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun require(value: Boolean): Unit {\n    contract {\n        returns() implies value\n    }\n    require(value) { \"Failed requirement.\" }\n}\n\n/**\n * Throws an [IllegalArgumentException] with the result of calling [lazyMessage] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun require(value: Boolean, lazyMessage: () -> Any): Unit {\n    contract {\n        returns() implies value\n    }\n    if (!value) {\n        val message = lazyMessage()\n        throw IllegalArgumentException(message.toString())\n    }\n}\n\n/**\n * Throws an [IllegalArgumentException] if the [value] is null. Otherwise returns the not null value.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> requireNotNull(value: T?): T {\n    contract {\n        returns() implies (value != null)\n    }\n    return requireNotNull(value) { \"Required value was null.\" }\n}\n\n/**\n * Throws an [IllegalArgumentException] with the result of calling [lazyMessage] if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> requireNotNull(value: T?, lazyMessage: () -> Any): T {\n    contract {\n        returns() implies (value != null)\n    }\n\n    if (value == null) {\n        val message = lazyMessage()\n        throw IllegalArgumentException(message.toString())\n    } else {\n        return value\n    }\n}\n\n/**\n * Throws an [IllegalStateException] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun check(value: Boolean): Unit {\n    contract {\n        returns() implies value\n    }\n    check(value) { \"Check failed.\" }\n}\n\n/**\n * Throws an [IllegalStateException] with the result of calling [lazyMessage] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun check(value: Boolean, lazyMessage: () -> Any): Unit {\n    contract {\n        returns() implies value\n    }\n    if (!value) {\n        val message = lazyMessage()\n        throw IllegalStateException(message.toString())\n    }\n}\n\n/**\n * Throws an [IllegalStateException] if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> checkNotNull(value: T?): T {\n    contract {\n        returns() implies (value != null)\n    }\n    return checkNotNull(value) { \"Required value was null.\" }\n}\n\n/**\n * Throws an [IllegalStateException] with the result of calling [lazyMessage]  if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> checkNotNull(value: T?, lazyMessage: () -> Any): T {\n    contract {\n        returns() implies (value != null)\n    }\n\n    if (value == null) {\n        val message = lazyMessage()\n        throw IllegalStateException(message.toString())\n    } else {\n        return value\n    }\n}\n\n\n/**\n * Throws an [IllegalStateException] with the given [message].\n *\n * @sample samples.misc.Preconditions.failWithError\n */\n@kotlin.internal.InlineOnly\npublic inline fun error(message: Any): Nothing = throw IllegalStateException(message.toString())\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\nimport primitiveArrayConcat\nimport withType\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun <T> Array<out T>.elementAt(index: Int): T {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun ByteArray.elementAt(index: Int): Byte {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun ShortArray.elementAt(index: Int): Short {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun IntArray.elementAt(index: Int): Int {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun LongArray.elementAt(index: Int): Long {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun FloatArray.elementAt(index: Int): Float {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun DoubleArray.elementAt(index: Int): Double {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun BooleanArray.elementAt(index: Int): Boolean {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun CharArray.elementAt(index: Int): Char {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic actual fun <T> Array<out T>.asList(): List<T> {\n    return ArrayList<T>(this.unsafeCast<Array<Any?>>())\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun ByteArray.asList(): List<Byte> {\n    return this.unsafeCast<Array<Byte>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun ShortArray.asList(): List<Short> {\n    return this.unsafeCast<Array<Short>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun IntArray.asList(): List<Int> {\n    return this.unsafeCast<Array<Int>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun LongArray.asList(): List<Long> {\n    return this.unsafeCast<Array<Long>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun FloatArray.asList(): List<Float> {\n    return this.unsafeCast<Array<Float>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun DoubleArray.asList(): List<Double> {\n    return this.unsafeCast<Array<Double>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun BooleanArray.asList(): List<Boolean> {\n    return this.unsafeCast<Array<Boolean>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic actual fun CharArray.asList(): List<Char> {\n    return object : AbstractList<Char>(), RandomAccess {\n        override val size: Int get() = this@asList.size\n        override fun isEmpty(): Boolean = this@asList.isEmpty()\n        override fun contains(element: Char): Boolean = this@asList.contains(element)\n        override fun get(index: Int): Char {\n            AbstractList.checkElementIndex(index, size)\n            return this@asList[index]\n        }\n        override fun indexOf(element: Char): Int {\n            if ((element as Any?) !is Char) return -1\n            return this@asList.indexOf(element)\n        }\n        override fun lastIndexOf(element: Char): Int {\n            if ((element as Any?) !is Char) return -1\n            return this@asList.lastIndexOf(element)\n        }\n    }\n}\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayDeepEquals\")\npublic actual infix fun <T> Array<out T>.contentDeepEquals(other: Array<out T>): Boolean {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayDeepHashCode\")\npublic actual fun <T> Array<out T>.contentDeepHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayDeepToString\")\npublic actual fun <T> Array<out T>.contentDeepToString(): String {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun <T> Array<out T>.contentEquals(other: Array<out T>): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun ByteArray.contentEquals(other: ByteArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun ShortArray.contentEquals(other: ShortArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun IntArray.contentEquals(other: IntArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun LongArray.contentEquals(other: LongArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun FloatArray.contentEquals(other: FloatArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun DoubleArray.contentEquals(other: DoubleArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun BooleanArray.contentEquals(other: BooleanArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun CharArray.contentEquals(other: CharArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun <T> Array<out T>.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun ByteArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun ShortArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun IntArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun LongArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun FloatArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun DoubleArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun BooleanArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun CharArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun <T> Array<out T>.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun ByteArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun ShortArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun IntArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun LongArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun FloatArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun DoubleArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun BooleanArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun CharArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun <T> Array<out T>.copyInto(destination: Array<T>, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): Array<T> {\n    arrayCopy(this, destination, destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun ByteArray.copyInto(destination: ByteArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ByteArray {\n    arrayCopy(this.unsafeCast<Array<Byte>>(), destination.unsafeCast<Array<Byte>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun ShortArray.copyInto(destination: ShortArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ShortArray {\n    arrayCopy(this.unsafeCast<Array<Short>>(), destination.unsafeCast<Array<Short>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun IntArray.copyInto(destination: IntArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): IntArray {\n    arrayCopy(this.unsafeCast<Array<Int>>(), destination.unsafeCast<Array<Int>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun LongArray.copyInto(destination: LongArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): LongArray {\n    arrayCopy(this.unsafeCast<Array<Long>>(), destination.unsafeCast<Array<Long>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun FloatArray.copyInto(destination: FloatArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): FloatArray {\n    arrayCopy(this.unsafeCast<Array<Float>>(), destination.unsafeCast<Array<Float>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun DoubleArray.copyInto(destination: DoubleArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): DoubleArray {\n    arrayCopy(this.unsafeCast<Array<Double>>(), destination.unsafeCast<Array<Double>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun BooleanArray.copyInto(destination: BooleanArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): BooleanArray {\n    arrayCopy(this.unsafeCast<Array<Boolean>>(), destination.unsafeCast<Array<Boolean>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun CharArray.copyInto(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): CharArray {\n    arrayCopy(this.unsafeCast<Array<Char>>(), destination.unsafeCast<Array<Char>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline fun <T> Array<out T>.copyOf(): Array<T> {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun ByteArray.copyOf(): ByteArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun ShortArray.copyOf(): ShortArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun IntArray.copyOf(): IntArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun LongArray.copyOf(): LongArray {\n    return withType(\"LongArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun FloatArray.copyOf(): FloatArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun DoubleArray.copyOf(): DoubleArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun BooleanArray.copyOf(): BooleanArray {\n    return withType(\"BooleanArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun CharArray.copyOf(): CharArray {\n    return withType(\"CharArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun ByteArray.copyOf(newSize: Int): ByteArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, ByteArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun ShortArray.copyOf(newSize: Int): ShortArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, ShortArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun IntArray.copyOf(newSize: Int): IntArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, IntArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun LongArray.copyOf(newSize: Int): LongArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"LongArray\", arrayCopyResize(this, newSize, 0L))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun FloatArray.copyOf(newSize: Int): FloatArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, FloatArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun DoubleArray.copyOf(newSize: Int): DoubleArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, DoubleArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `false` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `false` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun BooleanArray.copyOf(newSize: Int): BooleanArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"BooleanArray\", arrayCopyResize(this, newSize, false))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with null char (`\\u0000`) values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with null char (`\\u0000`) values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun CharArray.copyOf(newSize: Int): CharArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"CharArray\", fillFrom(this, CharArray(newSize)))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `null` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `null` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizingCopyOf\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual fun <T> Array<out T>.copyOf(newSize: Int): Array<T?> {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return arrayCopyResize(this, newSize, null)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual fun <T> Array<out T>.copyOfRange(fromIndex: Int, toIndex: Int): Array<T> {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun ByteArray.copyOfRange(fromIndex: Int, toIndex: Int): ByteArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun ShortArray.copyOfRange(fromIndex: Int, toIndex: Int): ShortArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun IntArray.copyOfRange(fromIndex: Int, toIndex: Int): IntArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun LongArray.copyOfRange(fromIndex: Int, toIndex: Int): LongArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"LongArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun FloatArray.copyOfRange(fromIndex: Int, toIndex: Int): FloatArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun DoubleArray.copyOfRange(fromIndex: Int, toIndex: Int): DoubleArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun BooleanArray.copyOfRange(fromIndex: Int, toIndex: Int): BooleanArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"BooleanArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun CharArray.copyOfRange(fromIndex: Int, toIndex: Int): CharArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"CharArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun <T> Array<T>.fill(element: T, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ByteArray.fill(element: Byte, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ShortArray.fill(element: Short, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun IntArray.fill(element: Int, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun LongArray.fill(element: Long, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun FloatArray.fill(element: Float, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun DoubleArray.fill(element: Double, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun BooleanArray.fill(element: Boolean, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun CharArray.fill(element: Char, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline operator fun <T> Array<out T>.plus(element: T): Array<T> {\n    return this.asDynamic().concat(arrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ByteArray.plus(element: Byte): ByteArray {\n    return plus(byteArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ShortArray.plus(element: Short): ShortArray {\n    return plus(shortArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun IntArray.plus(element: Int): IntArray {\n    return plus(intArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun LongArray.plus(element: Long): LongArray {\n    return plus(longArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun FloatArray.plus(element: Float): FloatArray {\n    return plus(floatArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun DoubleArray.plus(element: Double): DoubleArray {\n    return plus(doubleArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun BooleanArray.plus(element: Boolean): BooleanArray {\n    return plus(booleanArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun CharArray.plus(element: Char): CharArray {\n    return plus(charArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual operator fun <T> Array<out T>.plus(elements: Collection<T>): Array<T> {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun ByteArray.plus(elements: Collection<Byte>): ByteArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun ShortArray.plus(elements: Collection<Short>): ShortArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun IntArray.plus(elements: Collection<Int>): IntArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun LongArray.plus(elements: Collection<Long>): LongArray {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun FloatArray.plus(elements: Collection<Float>): FloatArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun DoubleArray.plus(elements: Collection<Double>): DoubleArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun BooleanArray.plus(elements: Collection<Boolean>): BooleanArray {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun CharArray.plus(elements: Collection<Char>): CharArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline operator fun <T> Array<out T>.plus(elements: Array<out T>): Array<T> {\n    return this.asDynamic().concat(elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ByteArray.plus(elements: ByteArray): ByteArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ShortArray.plus(elements: ShortArray): ShortArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun IntArray.plus(elements: IntArray): IntArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun LongArray.plus(elements: LongArray): LongArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun FloatArray.plus(elements: FloatArray): FloatArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun DoubleArray.plus(elements: DoubleArray): DoubleArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun BooleanArray.plus(elements: BooleanArray): BooleanArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun CharArray.plus(elements: CharArray): CharArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline fun <T> Array<out T>.plusElement(element: T): Array<T> {\n    return this.asDynamic().concat(arrayOf(element))\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun IntArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic actual fun LongArray.sort(): Unit {\n    if (size > 1) sort { a: Long, b: Long -> a.compareTo(b) }\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun ByteArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun ShortArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun DoubleArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun FloatArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun CharArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place according to the natural order of its elements.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @sample samples.collections.Arrays.Sorting.sortArrayOfComparable\n */\npublic actual fun <T : Comparable<T>> Array<out T>.sort(): Unit {\n    if (size > 1) sortArray(this)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sort(comparison: (a: T, b: T) -> Int): Unit {\n    if (size > 1) sortArrayWith(this, comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sort(noinline comparison: (a: Byte, b: Byte) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sort(noinline comparison: (a: Short, b: Short) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sort(noinline comparison: (a: Int, b: Int) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sort(noinline comparison: (a: Long, b: Long) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sort(noinline comparison: (a: Float, b: Float) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sort(noinline comparison: (a: Double, b: Double) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sort(noinline comparison: (a: Char, b: Char) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T> Array<out T>.sortWith(comparator: Comparator<in T>): Unit {\n    if (size > 1) sortArrayWith(this, comparator)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun ByteArray.toTypedArray(): Array<Byte> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun ShortArray.toTypedArray(): Array<Short> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun IntArray.toTypedArray(): Array<Int> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun LongArray.toTypedArray(): Array<Long> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun FloatArray.toTypedArray(): Array<Float> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun DoubleArray.toTypedArray(): Array<Double> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun BooleanArray.toTypedArray(): Array<Boolean> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun CharArray.toTypedArray(): Array<Char> {\n    return Array(size) { index -> this[index] }\n}\n\n",null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StandardKt\")\npackage kotlin\n\nimport kotlin.contracts.*\n\n/**\n * An exception is thrown to indicate that a method body remains to be implemented.\n */\npublic class NotImplementedError(message: String = \"An operation is not implemented.\") : Error(message)\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n */\n\n@kotlin.internal.InlineOnly\npublic inline fun TODO(): Nothing = throw NotImplementedError()\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n *\n * @param reason a string explaining why the implementation is missing.\n */\n@kotlin.internal.InlineOnly\npublic inline fun TODO(reason: String): Nothing = throw NotImplementedError(\"An operation is not implemented: $reason\")\n\n\n\n/**\n * Calls the specified function [block] and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <R> run(block: () -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.run(block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with the given [receiver] as its receiver and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#with).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> with(receiver: T, block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return receiver.block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns `this` value.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#apply).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> T.apply(block: T.() -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block()\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns `this` value.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#also).\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.also(block: (T) -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block(this)\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#let).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.let(block: (T) -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block(this)\n}\n\n/**\n * Returns `this` value if it satisfies the given [predicate] or `null`, if it doesn't.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeIf(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (predicate(this)) this else null\n}\n\n/**\n * Returns `this` value if it _does not_ satisfy the given [predicate] or `null`, if it does.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeUnless(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (!predicate(this)) this else null\n}\n\n/**\n * Executes the given function [action] specified number of [times].\n *\n * A zero-based index of current iteration is passed as a parameter to [action].\n *\n * @sample samples.misc.ControlFlow.repeat\n */\n@kotlin.internal.InlineOnly\npublic inline fun repeat(times: Int, action: (Int) -> Unit) {\n    contract { callsInPlace(action) }\n\n    for (index in 0 until times) {\n        action(index)\n    }\n}\n",null,null,null,null,null,null,null,null,null,null,null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\nimport kotlin.js.RegExp\n\n/**\n * Converts the characters in the specified array to a string.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun String(chars: CharArray): String {\n    var result = \"\"\n    for (char in chars) {\n        result += char\n    }\n    return result\n}\n\n/**\n * Converts the characters from a portion of the specified array to a string.\n *\n * @throws IndexOutOfBoundsException if either [offset] or [length] are less than zero\n * or `offset + length` is out of [chars] array bounds.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun String(chars: CharArray, offset: Int, length: Int): String {\n    if (offset < 0 || length < 0 || chars.size - offset < length)\n        throw IndexOutOfBoundsException(\"size: ${chars.size}; offset: $offset; length: $length\")\n    var result = \"\"\n    for (index in offset until offset + length) {\n        result += chars[index]\n    }\n    return result\n}\n\n/**\n * Concatenates characters in this [CharArray] into a String.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun CharArray.concatToString(): String {\n    var result = \"\"\n    for (char in this) {\n        result += char\n    }\n    return result\n}\n\n/**\n * Concatenates characters in this [CharArray] or its subrange into a String.\n *\n * @param startIndex the beginning (inclusive) of the subrange of characters, 0 by default.\n * @param endIndex the end (exclusive) of the subrange of characters, size of this array by default.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n@ExperimentalStdlibApi\npublic actual fun CharArray.concatToString(startIndex: Int = 0, endIndex: Int = this.size): String {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, this.size)\n    var result = \"\"\n    for (index in startIndex until endIndex) {\n        result += this[index]\n    }\n    return result\n}\n\n/**\n * Returns a [CharArray] containing characters of this string.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun String.toCharArray(): CharArray {\n    return CharArray(length) { get(it) }\n}\n\n/**\n * Returns a [CharArray] containing characters of this string or its substring.\n *\n * @param startIndex the beginning (inclusive) of the substring, 0 by default.\n * @param endIndex the end (exclusive) of the substring, length of this string by default.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the length of this string.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n@ExperimentalStdlibApi\npublic actual fun String.toCharArray(startIndex: Int = 0, endIndex: Int = this.length): CharArray {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, length)\n    return CharArray(endIndex - startIndex) { get(startIndex + it) }\n}\n\n/**\n * Decodes a string from the bytes in UTF-8 encoding in this array.\n *\n * Malformed byte sequences are replaced by the replacement char `\\uFFFD`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun ByteArray.decodeToString(): String {\n    return decodeUtf8(this, 0, size, false)\n}\n\n/**\n * Decodes a string from the bytes in UTF-8 encoding in this array or its subrange.\n *\n * @param startIndex the beginning (inclusive) of the subrange to decode, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to decode, size of this array by default.\n * @param throwOnInvalidSequence specifies whether to throw an exception on malformed byte sequence or replace it by the replacement char `\\uFFFD`.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n * @throws CharacterCodingException if the byte array contains malformed UTF-8 byte sequence and [throwOnInvalidSequence] is true.\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n@ExperimentalStdlibApi\npublic actual fun ByteArray.decodeToString(\n    startIndex: Int = 0,\n    endIndex: Int = this.size,\n    throwOnInvalidSequence: Boolean = false\n): String {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, this.size)\n    return decodeUtf8(this, startIndex, endIndex, throwOnInvalidSequence)\n}\n\n/**\n * Encodes this string to an array of bytes in UTF-8 encoding.\n *\n * Any malformed char sequence is replaced by the replacement byte sequence.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun String.encodeToByteArray(): ByteArray {\n    return encodeUtf8(this, 0, length, false)\n}\n\n/**\n * Encodes this string or its substring to an array of bytes in UTF-8 encoding.\n *\n * @param startIndex the beginning (inclusive) of the substring to encode, 0 by default.\n * @param endIndex the end (exclusive) of the substring to encode, length of this string by default.\n * @param throwOnInvalidSequence specifies whether to throw an exception on malformed char sequence or replace.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the length of this string.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n * @throws CharacterCodingException if this string contains malformed char sequence and [throwOnInvalidSequence] is true.\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n@ExperimentalStdlibApi\npublic actual fun String.encodeToByteArray(\n    startIndex: Int = 0,\n    endIndex: Int = this.length,\n    throwOnInvalidSequence: Boolean = false\n): ByteArray {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, length)\n    return encodeUtf8(this, startIndex, endIndex, throwOnInvalidSequence)\n}\n\n/**\n * Returns a copy of this string converted to upper case using the rules of the default locale.\n *\n * @sample samples.text.Strings.toUpperCase\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toUpperCase(): String = asDynamic().toUpperCase()\n\n/**\n * Returns a copy of this string converted to lower case using the rules of the default locale.\n *\n * @sample samples.text.Strings.toLowerCase\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toLowerCase(): String = asDynamic().toLowerCase()\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeIndexOf(str: String, fromIndex: Int): Int = asDynamic().indexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeLastIndexOf(str: String, fromIndex: Int): Int = asDynamic().lastIndexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeStartsWith(s: String, position: Int): Boolean = asDynamic().startsWith(s, position)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeEndsWith(s: String): Boolean = asDynamic().endsWith(s)\n\n@kotlin.internal.InlineOnly\npublic actual inline fun String.substring(startIndex: Int): String = asDynamic().substring(startIndex)\n\n@kotlin.internal.InlineOnly\npublic actual inline fun String.substring(startIndex: Int, endIndex: Int): String = asDynamic().substring(startIndex, endIndex)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.concat(str: String): String = asDynamic().concat(str)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.match(regex: String): Array<String>? = asDynamic().match(regex)\n\n//native public fun String.trim(): String\n//TODO: String.replace to implement effective trimLeading and trimTrailing\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeReplace(pattern: RegExp, replacement: String): String = asDynamic().replace(pattern, replacement)\n\n@SinceKotlin(\"1.2\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.compareTo(other: String, ignoreCase: Boolean = false): Int {\n    if (ignoreCase) {\n        val n1 = this.length\n        val n2 = other.length\n        val min = minOf(n1, n2)\n        if (min == 0) return n1 - n2\n        var start = 0\n        while (true) {\n            val end = minOf(start + 16, min)\n            var s1 = this.substring(start, end)\n            var s2 = other.substring(start, end)\n            if (s1 != s2) {\n                s1 = s1.toUpperCase()\n                s2 = s2.toUpperCase()\n                if (s1 != s2) {\n                    s1 = s1.toLowerCase()\n                    s2 = s2.toLowerCase()\n                    if (s1 != s2) {\n                        return s1.compareTo(s2)\n                    }\n                }\n            }\n            if (end == min) break\n            start = end\n        }\n        return n1 - n2\n    } else {\n        return compareTo(other)\n    }\n}\n\n\nprivate val STRING_CASE_INSENSITIVE_ORDER = Comparator<String> { a, b -> a.compareTo(b, ignoreCase = true) }\n\n@SinceKotlin(\"1.2\")\npublic actual val String.Companion.CASE_INSENSITIVE_ORDER: Comparator<String>\n    get() = STRING_CASE_INSENSITIVE_ORDER\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\n/**\n * A mutable sequence of characters.\n *\n * String builder can be used to efficiently perform multiple string manipulation operations.\n */\nexpect class StringBuilder : Appendable, CharSequence {\n    /** Constructs an empty string builder. */\n    constructor()\n\n    /** Constructs an empty string builder with the specified initial [capacity]. */\n    constructor(capacity: Int)\n\n    /** Constructs a string builder that contains the same characters as the specified [content] char sequence. */\n    constructor(content: CharSequence)\n\n    /** Constructs a string builder that contains the same characters as the specified [content] string. */\n    @SinceKotlin(\"1.3\")\n//    @ExperimentalStdlibApi\n    constructor(content: String)\n\n    override val length: Int\n\n    override operator fun get(index: Int): Char\n\n    override fun subSequence(startIndex: Int, endIndex: Int): CharSequence\n\n    override fun append(value: Char): StringBuilder\n    override fun append(value: CharSequence?): StringBuilder\n    override fun append(value: CharSequence?, startIndex: Int, endIndex: Int): StringBuilder\n\n    /**\n     * Reverses the contents of this string builder and returns this instance.\n     *\n     * Surrogate pairs included in this string builder are treated as single characters.\n     * Therefore, the order of the high-low surrogates is never reversed.\n     *\n     * Note that the reverse operation may produce new surrogate pairs that were unpaired low-surrogates and high-surrogates before the operation.\n     * For example, reversing `\"\\uDC00\\uD800\"` produces `\"\\uD800\\uDC00\"` which is a valid surrogate pair.\n     */\n    fun reverse(): StringBuilder\n\n    /**\n     * Appends the string representation of the specified object [value] to this string builder and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was appended to this string builder.\n     */\n    fun append(value: Any?): StringBuilder\n\n    /**\n     * Appends the string representation of the specified boolean [value] to this string builder and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was appended to this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n//    @ExperimentalStdlibApi\n    fun append(value: Boolean): StringBuilder\n\n    /**\n     * Appends characters in the specified character array [value] to this string builder and returns this instance.\n     *\n     * Characters are appended in order, starting at the index 0.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun append(value: CharArray): StringBuilder\n\n    /**\n     * Appends the specified string [value] to this string builder and returns this instance.\n     */\n    @SinceKotlin(\"1.3\")\n//    @ExperimentalStdlibApi\n    fun append(value: String): StringBuilder\n\n    /**\n     * Returns the current capacity of this string builder.\n     *\n     * The capacity is the maximum length this string builder can have before an allocation occurs.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun capacity(): Int\n\n    /**\n     * Ensures that the capacity of this string builder is at least equal to the specified [minimumCapacity].\n     *\n     * If the current capacity is less than the [minimumCapacity], a new backing storage is allocated with greater capacity.\n     * Otherwise, this method takes no action and simply returns.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun ensureCapacity(minimumCapacity: Int)\n\n    /**\n     * Returns the index within this string builder of the first occurrence of the specified [string].\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun indexOf(string: String): Int\n\n    /**\n     * Returns the index within this string builder of the first occurrence of the specified [string],\n     * starting at the specified [startIndex].\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder starting at the specified [startIndex].\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun indexOf(string: String, startIndex: Int): Int\n\n    /**\n     * Returns the index within this string builder of the last occurrence of the specified [string].\n     * The last occurrence of empty string `\"\"` is considered to be at the index equal to `this.length`.\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun lastIndexOf(string: String): Int\n\n    /**\n     * Returns the index within this string builder of the last occurrence of the specified [string],\n     * starting from the specified [startIndex] toward the beginning.\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder starting at the specified [startIndex].\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun lastIndexOf(string: String, startIndex: Int): Int\n\n    /**\n     * Inserts the string representation of the specified boolean [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was inserted into this string builder at the specified [index].\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun insert(index: Int, value: Boolean): StringBuilder\n\n    /**\n     * Inserts the specified character [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun insert(index: Int, value: Char): StringBuilder\n\n    /**\n     * Inserts characters in the specified character array [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The inserted characters go in same order as in the [value] character array, starting at [index].\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun insert(index: Int, value: CharArray): StringBuilder\n\n    /**\n     * Inserts characters in the specified character sequence [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The inserted characters go in the same order as in the [value] character sequence, starting at [index].\n     *\n     * @param index the position in this string builder to insert at.\n     * @param value the character sequence from which characters are inserted. If [value] is `null`, then the four characters `\"null\"` are inserted.\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun insert(index: Int, value: CharSequence?): StringBuilder\n\n    /**\n     * Inserts the string representation of the specified object [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was inserted into this string builder at the specified [index].\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun insert(index: Int, value: Any?): StringBuilder\n\n    /**\n     * Inserts the string [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun insert(index: Int, value: String): StringBuilder\n\n    /**\n     *  Sets the length of this string builder to the specified [newLength].\n     *\n     *  If the [newLength] is less than the current length, it is changed to the specified [newLength].\n     *  Otherwise, null characters '\\u0000' are appended to this string builder until its length is less than the [newLength].\n     *\n     *  Note that in Kotlin/JS [set] operator function has non-constant execution time complexity.\n     *  Therefore, increasing length of this string builder and then updating each character by index may slow down your program.\n     *\n     *  @throws IndexOutOfBoundsException or [IllegalArgumentException] if [newLength] is less than zero.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun setLength(newLength: Int)\n\n    /**\n     * Returns a new [String] that contains characters in this string builder at [startIndex] (inclusive) and up to the [length] (exclusive).\n     *\n     * @throws IndexOutOfBoundsException if [startIndex] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun substring(startIndex: Int): String\n\n    /**\n     * Returns a new [String] that contains characters in this string builder at [startIndex] (inclusive) and up to the [endIndex] (exclusive).\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun substring(startIndex: Int, endIndex: Int): String\n\n    /**\n     * Attempts to reduce storage used for this string builder.\n     *\n     * If the backing storage of this string builder is larger than necessary to hold its current contents,\n     * then it may be resized to become more space efficient.\n     * Calling this method may, but is not required to, affect the value of the [capacity] property.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun trimToSize()\n}\n\n\n/**\n * Clears the content of this string builder making it empty and returns this instance.\n *\n * @sample samples.text.Strings.clearStringBuilder\n */\n@SinceKotlin(\"1.3\")\npublic expect fun StringBuilder.clear(): StringBuilder\n\n/**\n * Sets the character at the specified [index] to the specified [value].\n *\n * @throws IndexOutOfBoundsException if [index] is out of bounds of this string builder.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic expect operator fun StringBuilder.set(index: Int, value: Char)\n\n/**\n * Replaces characters in the specified range of this string builder with characters in the specified string [value] and returns this instance.\n *\n * @param startIndex the beginning (inclusive) of the range to replace.\n * @param endIndex the end (exclusive) of the range to replace.\n * @param value the string to replace with.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] if [startIndex] is less than zero, greater than the length of this string builder, or `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic expect fun StringBuilder.setRange(startIndex: Int, endIndex: Int, value: String): StringBuilder\n\n/**\n * Removes the character at the specified [index] from this string builder and returns this instance.\n *\n * If the `Char` at the specified [index] is part of a supplementary code point, this method does not remove the entire supplementary character.\n *\n * @param index the index of `Char` to remove.\n *\n * @throws IndexOutOfBoundsException if [index] is out of bounds of this string builder.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic expect fun StringBuilder.deleteAt(index: Int): StringBuilder\n\n/**\n * Removes characters in the specified range from this string builder and returns this instance.\n *\n * @param startIndex the beginning (inclusive) of the range to remove.\n * @param endIndex the end (exclusive) of the range to remove.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic expect fun StringBuilder.deleteRange(startIndex: Int, endIndex: Int): StringBuilder\n\n/**\n * Copies characters from this string builder into the [destination] character array.\n *\n * @param destination the array to copy to.\n * @param destinationOffset the position in the array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the range to copy, 0 by default.\n * @param endIndex the end (exclusive) of the range to copy, length of this string builder by default.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n *  or when that index is out of the [destination] array indices range.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic expect fun StringBuilder.toCharArray(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = this.length)\n\n/**\n * Appends characters in a subarray of the specified character array [value] to this string builder and returns this instance.\n *\n * Characters are appended in order, starting at specified [startIndex].\n *\n * @param value the array from which characters are appended.\n * @param startIndex the beginning (inclusive) of the subarray to append.\n * @param endIndex the end (exclusive) of the subarray to append.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] array indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic expect fun StringBuilder.appendRange(value: CharArray, startIndex: Int, endIndex: Int): StringBuilder\n\n/**\n * Appends a subsequence of the specified character sequence [value] to this string builder and returns this instance.\n *\n * @param value the character sequence from which a subsequence is appended. If [value] is `null`,\n *  then characters are appended as if [value] contained the four characters `\"null\"`.\n * @param startIndex the beginning (inclusive) of the subsequence to append.\n * @param endIndex the end (exclusive) of the subsequence to append.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic expect fun StringBuilder.appendRange(value: CharSequence?, startIndex: Int, endIndex: Int): StringBuilder\n\n/**\n * Inserts characters in a subarray of the specified character array [value] into this string builder at the specified [index] and returns this instance.\n *\n * The inserted characters go in same order as in the [value] array, starting at [index].\n *\n * @param index the position in this string builder to insert at.\n * @param value the array from which characters are inserted.\n * @param startIndex the beginning (inclusive) of the subarray to insert.\n * @param endIndex the end (exclusive) of the subarray to insert.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic expect fun StringBuilder.insertRange(index: Int, value: CharArray, startIndex: Int, endIndex: Int): StringBuilder\n\n/**\n * Inserts characters in a subsequence of the specified character sequence [value] into this string builder at the specified [index] and returns this instance.\n *\n * The inserted characters go in the same order as in the [value] character sequence, starting at [index].\n *\n * @param index the position in this string builder to insert at.\n * @param value the character sequence from which a subsequence is inserted. If [value] is `null`,\n *  then characters will be inserted as if [value] contained the four characters `\"null\"`.\n * @param startIndex the beginning (inclusive) of the subsequence to insert.\n * @param endIndex the end (exclusive) of the subsequence to insert.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic expect fun StringBuilder.insertRange(index: Int, value: CharSequence?, startIndex: Int, endIndex: Int): StringBuilder\n\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\")\n@Deprecated(\"Use append(value: Any?) instead\", ReplaceWith(\"append(value = obj)\"), DeprecationLevel.WARNING)\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.append(obj: Any?): StringBuilder = this.append(obj)\n\n/**\n * Builds new string by populating newly created [StringBuilder] using provided [builderAction]\n * and then converting it to [String].\n */\n@kotlin.internal.InlineOnly\npublic inline fun buildString(builderAction: StringBuilder.() -> Unit): String =\n    StringBuilder().apply(builderAction).toString()\n\n/**\n * Builds new string by populating newly created [StringBuilder] initialized with the given [capacity]\n * using provided [builderAction] and then converting it to [String].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun buildString(capacity: Int, builderAction: StringBuilder.() -> Unit): String =\n    StringBuilder(capacity).apply(builderAction).toString()\n\n/**\n * Appends all arguments to the given StringBuilder.\n */\npublic fun StringBuilder.append(vararg value: String?): StringBuilder {\n    for (item in value)\n        append(item)\n    return this\n}\n\n/**\n * Appends all arguments to the given StringBuilder.\n */\npublic fun StringBuilder.append(vararg value: Any?): StringBuilder {\n    for (item in value)\n        append(item)\n    return this\n}\n",null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmName(\"LazyKt\")\n@file:kotlin.jvm.JvmMultifileClass\n\npackage kotlin\n\nimport kotlin.reflect.KProperty\n\n/**\n * Represents a value with lazy initialization.\n *\n * To create an instance of [Lazy] use the [lazy] function.\n */\npublic interface Lazy<out T> {\n    /**\n     * Gets the lazily initialized value of the current Lazy instance.\n     * Once the value was initialized it must not change during the rest of lifetime of this Lazy instance.\n     */\n    public val value: T\n\n    /**\n     * Returns `true` if a value for this Lazy instance has been already initialized, and `false` otherwise.\n     * Once this function has returned `true` it stays `true` for the rest of lifetime of this Lazy instance.\n     */\n    public fun isInitialized(): Boolean\n}\n\n/**\n * Creates a new instance of the [Lazy] that is already initialized with the specified [value].\n */\npublic fun <T> lazyOf(value: T): Lazy<T> = InitializedLazyImpl(value)\n\n/**\n * An extension to delegate a read-only property of type [T] to an instance of [Lazy].\n *\n * This extension allows to use instances of Lazy for property delegation:\n * `val property: String by lazy { initializer }`\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Lazy<T>.getValue(thisRef: Any?, property: KProperty<*>): T = value\n\n/**\n * Specifies how a [Lazy] instance synchronizes initialization among multiple threads.\n */\npublic enum class LazyThreadSafetyMode {\n\n    /**\n     * Locks are used to ensure that only a single thread can initialize the [Lazy] instance.\n     */\n    SYNCHRONIZED,\n\n    /**\n     * Initializer function can be called several times on concurrent access to uninitialized [Lazy] instance value,\n     * but only the first returned value will be used as the value of [Lazy] instance.\n     */\n    PUBLICATION,\n\n    /**\n     * No locks are used to synchronize an access to the [Lazy] instance value; if the instance is accessed from multiple threads, its behavior is undefined.\n     *\n     * This mode should not be used unless the [Lazy] instance is guaranteed never to be initialized from more than one thread.\n     */\n    NONE,\n}\n\n\ninternal object UNINITIALIZED_VALUE\n\n// internal to be called from lazy in JS\ninternal class UnsafeLazyImpl<out T>(initializer: () -> T) : Lazy<T>, Serializable {\n    private var initializer: (() -> T)? = initializer\n    private var _value: Any? = UNINITIALIZED_VALUE\n\n    override val value: T\n        get() {\n            if (_value === UNINITIALIZED_VALUE) {\n                _value = initializer!!()\n                initializer = null\n            }\n            @Suppress(\"UNCHECKED_CAST\")\n            return _value as T\n        }\n\n    override fun isInitialized(): Boolean = _value !== UNINITIALIZED_VALUE\n\n    override fun toString(): String = if (isInitialized()) value.toString() else \"Lazy value not initialized yet.\"\n\n    private fun writeReplace(): Any = InitializedLazyImpl(value)\n}\n\ninternal class InitializedLazyImpl<out T>(override val value: T) : Lazy<T>, Serializable {\n\n    override fun isInitialized(): Boolean = true\n\n    override fun toString(): String = value.toString()\n\n}\n",null],"names":[],"mappings":"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"}